{"ast":null,"code":"var _jsxFileName = \"/Users/ioanaghinea/major-group-project/MajorGroupProject/src/google_login.js\";\nimport GoogleLogin from 'react-google-login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*#__PURE__*/\n_jsxDEV(GoogleLogin, {\n  clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n  buttonText: \"Log in with Google\",\n  onSuccess: handleLogin,\n  onFailure: handleLogin,\n  cookiePolicy: 'single_host_origin'\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 1\n}, this);\n\nconst handleLogin = async googleData => {\n  const res = await fetch(\"/api/v1/auth/google\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      token: googleData.tokenId\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await res.json(); // store returned user somehow\n};\n\nconst {\n  OAuth2Client\n} = require('google-auth-library');\n\nconst client = new OAuth2Client(process.env.CLIENT_ID);\nserver.post(\"/api/v1/auth/google\", async (req, res) => {\n  const {\n    token\n  } = req.body;\n  const ticket = await client.verifyIdToken({\n    idToken: token,\n    audience: process.env.CLIENT_ID\n  });\n  const {\n    name,\n    email,\n    picture\n  } = ticket.getPayload();\n  const user = await db.user.upsert({\n    where: {\n      email: email\n    },\n    update: {\n      name,\n      picture\n    },\n    create: {\n      name,\n      email,\n      picture\n    }\n  });\n  req.session.userId = user.id;\n  res.status(201);\n  res.json(user);\n});\nserver.use(async (req, res, next) => {\n  const user = await db.user.findFirst({\n    where: {\n      id: req.session.userId\n    }\n  });\n  req.user = user;\n  next();\n}); // Sign out route\n\nserver.delete(\"/api/v1/auth/logout\", async (req, res) => {\n  await req.session.destroy();\n  res.status(200);\n  res.json({\n    message: \"Logged out successfully\"\n  });\n}); // \"Me\" route\n\nserver.get(\"/me\", async (req, res) => {\n  res.status(200);\n  res.json(req.user);\n});\n\nclass Facebook extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: false\n    };\n\n    this.facebookResponse = response => {\n      console.log(response);\n      this.setState({ ...this.state,\n        user: response\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"auto\",\n        textAlign: \"center\",\n        paddingTop: \"2em\"\n      },\n      children: this.state.user ? /*#__PURE__*/_jsxDEV(UserScreen, {\n        user: this.state.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(LoginButton, {\n        facebookResponse: this.facebookResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/ioanaghinea/major-group-project/MajorGroupProject/src/google_login.js"],"names":["GoogleLogin","process","env","REACT_APP_GOOGLE_CLIENT_ID","handleLogin","googleData","res","fetch","method","body","JSON","stringify","token","tokenId","headers","data","json","OAuth2Client","require","client","CLIENT_ID","server","post","req","ticket","verifyIdToken","idToken","audience","name","email","picture","getPayload","user","db","upsert","where","update","create","session","userId","id","status","use","next","findFirst","delete","destroy","message","get","Facebook","React","Component","state","facebookResponse","response","console","log","setState","render","margin","textAlign","paddingTop"],"mappings":"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","sourcesContent":["import GoogleLogin from 'react-google-login';\n\n\n<GoogleLogin\n    clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n    buttonText=\"Log in with Google\"\n    onSuccess={handleLogin}\n    onFailure={handleLogin}\n    cookiePolicy={'single_host_origin'}\n/>\n\nconst handleLogin = async googleData => {\n    const res = await fetch(\"/api/v1/auth/google\", {\n        method: \"POST\",\n        body: JSON.stringify({\n        token: googleData.tokenId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    const data = await res.json()\n    // store returned user somehow\n}\n\nconst { OAuth2Client } = require('google-auth-library')\nconst client = new OAuth2Client(process.env.CLIENT_ID)\n\nserver.post(\"/api/v1/auth/google\", async (req, res) => {\n    const { token }  = req.body\n    const ticket = await client.verifyIdToken({\n        idToken: token,\n        audience: process.env.CLIENT_ID\n    });\n    const { name, email, picture } = ticket.getPayload();    \n    const user = await db.user.upsert({ \n        where: { email: email },\n        update: { name, picture },\n        create: { name, email, picture }\n    })\n    req.session.userId = user.id\n    res.status(201)\n    res.json(user)\n})\n\nserver.use(async (req, res, next) => {\n    const user = await db.user.findFirst({where: { id:  req.session.userId }})\n    req.user = user\n    next()\n})\n\n// Sign out route\n\nserver.delete(\"/api/v1/auth/logout\", async (req, res) => {\n    await req.session.destroy()\n    res.status(200)\n    res.json({\n        message: \"Logged out successfully\"\n    })\n})\n\n// \"Me\" route\n\nserver.get(\"/me\", async (req, res) => {\n    res.status(200)\n    res.json(req.user)\n})\n\nclass Facebook extends React.Component {\n    state = {user:false}\n    facebookResponse = (response) => { console.log( response ); this.setState( {...this.state, user: response } ) }\n  \n    render() {\n      return (\n        <div style={{ margin: \"auto\", textAlign: \"center\", paddingTop: \"2em\" }}>\n          { this.state.user ? <UserScreen user={this.state.user}/> :\n            <LoginButton facebookResponse={this.facebookResponse}/>\n          }\n        </div>\n      )\n    }\n  }"]},"metadata":{},"sourceType":"module"}