{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ibott\\\\MajorGroupProject\\\\src\\\\google_login.js\";\nimport GoogleLogin from 'react-google-login';\nimport './google_login.css';\nimport React from 'react';\nimport axios from 'axios';\n\nconst LoginButton = () => /*#__PURE__*/React.createElement(GoogleLogin, {\n  clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n  buttonText: \"Continue with Google\",\n  className: \"GoogleLogin\",\n  onSuccess: handleLogin,\n  onFailure: handleLogin,\n  cookiePolicy: 'single_host_origin',\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 1\n  }\n});\n\n_c = LoginButton;\n\nconst handleLogin = async googleData => {\n  const newData = [];\n  axios.post('http://localhost:3001', newData);\n};\n\nconst {\n  OAuth2Client\n} = require('google-auth-library');\n\nconst client = new OAuth2Client(process.env.CLIENT_ID); // server.post(\"/api/v1/auth/google\", async (req, res) => {\n//     const { token }  = req.body\n//     const ticket = await client.verifyIdToken({\n//         idToken: token,\n//         audience: process.env.CLIENT_ID\n//     });\n//     const { name, email, picture } = ticket.getPayload();    \n//     const user = await db.user.upsert({ \n//         where: { email: email },\n//         update: { name, picture },\n//         create: { name, email, picture }\n//     })\n//     req.session.userId = user.id\n//     res.status(201)\n//     res.json(user)\n// })\n// server.use(async (req, res, next) => {\n//     const user = await db.user.findFirst({where: { id:  req.session.userId }})\n//     req.user = user\n//     next()\n// })\n// // Sign out route\n// server.delete(\"/api/v1/auth/logout\", async (req, res) => {\n//     await req.session.destroy()\n//     res.status(200)\n//     res.json({\n//         message: \"Logged out successfully\"\n//     })\n// })\n// // \"Me\" route\n// server.get(\"/me\", async (req, res) => {\n//     res.status(200)\n//     res.json(req.user)\n// })\n\nexport default LoginButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginButton\");","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/src/google_login.js"],"names":["GoogleLogin","React","axios","LoginButton","process","env","REACT_APP_GOOGLE_CLIENT_ID","handleLogin","googleData","newData","post","OAuth2Client","require","client","CLIENT_ID"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAO,oBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAG,mBACpB,oBAAC,WAAD;AACI,EAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,0BAD1B;AAEI,EAAA,UAAU,EAAC,sBAFf;AAGI,EAAA,SAAS,EAAC,aAHd;AAII,EAAA,SAAS,EAAEC,WAJf;AAKI,EAAA,SAAS,EAAEA,WALf;AAMI,EAAA,YAAY,EAAE,oBANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADA;;KAAMJ,W;;AAWN,MAAMI,WAAW,GAAG,MAAMC,UAAN,IAAoB;AACpC,QAAMC,OAAO,GAAG,EAAhB;AACAP,EAAAA,KAAK,CAACQ,IAAN,CAAW,uBAAX,EAAoCD,OAApC;AACH,CAHD;;AAKA,MAAM;AAAEE,EAAAA;AAAF,IAAmBC,OAAO,CAAC,qBAAD,CAAhC;;AACA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiBP,OAAO,CAACC,GAAR,CAAYS,SAA7B,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,eAAeX,WAAf","sourcesContent":["import GoogleLogin from 'react-google-login';\r\nimport './google_login.css';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginButton = () => (\r\n<GoogleLogin\r\n    clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n    buttonText=\"Continue with Google\"\r\n    className=\"GoogleLogin\"\r\n    onSuccess={handleLogin}\r\n    onFailure={handleLogin}\r\n    cookiePolicy={'single_host_origin'}\r\n/>\r\n)\r\n\r\nconst handleLogin = async googleData => {\r\n    const newData = [];\r\n    axios.post('http://localhost:3001', newData)\r\n}\r\n\r\nconst { OAuth2Client } = require('google-auth-library')\r\nconst client = new OAuth2Client(process.env.CLIENT_ID)\r\n\r\n// server.post(\"/api/v1/auth/google\", async (req, res) => {\r\n//     const { token }  = req.body\r\n//     const ticket = await client.verifyIdToken({\r\n//         idToken: token,\r\n//         audience: process.env.CLIENT_ID\r\n//     });\r\n//     const { name, email, picture } = ticket.getPayload();    \r\n//     const user = await db.user.upsert({ \r\n//         where: { email: email },\r\n//         update: { name, picture },\r\n//         create: { name, email, picture }\r\n//     })\r\n//     req.session.userId = user.id\r\n//     res.status(201)\r\n//     res.json(user)\r\n// })\r\n\r\n// server.use(async (req, res, next) => {\r\n//     const user = await db.user.findFirst({where: { id:  req.session.userId }})\r\n//     req.user = user\r\n//     next()\r\n// })\r\n\r\n// // Sign out route\r\n\r\n// server.delete(\"/api/v1/auth/logout\", async (req, res) => {\r\n//     await req.session.destroy()\r\n//     res.status(200)\r\n//     res.json({\r\n//         message: \"Logged out successfully\"\r\n//     })\r\n// })\r\n\r\n// // \"Me\" route\r\n\r\n// server.get(\"/me\", async (req, res) => {\r\n//     res.status(200)\r\n//     res.json(req.user)\r\n// })\r\n\r\nexport default LoginButton;"]},"metadata":{},"sourceType":"module"}