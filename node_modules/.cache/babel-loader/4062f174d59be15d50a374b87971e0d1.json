{"ast":null,"code":"/**\r\n * RC2 implementation.\r\n *\r\n * @author Stefan Siegl\r\n *\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n *\r\n * Information on the RC2 cipher is available from RFC #2268,\r\n * http://www.ietf.org/rfc/rfc2268.txt\r\n */\nvar forge = require('./forge');\n\nrequire('./util');\n\nvar piTable = [0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d, 0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2, 0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32, 0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82, 0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc, 0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26, 0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03, 0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7, 0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a, 0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec, 0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39, 0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31, 0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9, 0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9, 0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e, 0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad];\nvar s = [1, 2, 3, 5];\n/**\r\n * Rotate a word left by given number of bits.\r\n *\r\n * Bits that are shifted out on the left are put back in on the right\r\n * hand side.\r\n *\r\n * @param word The word to shift left.\r\n * @param bits The number of bits to shift by.\r\n * @return The rotated word.\r\n */\n\nvar rol = function (word, bits) {\n  return word << bits & 0xffff | (word & 0xffff) >> 16 - bits;\n};\n/**\r\n * Rotate a word right by given number of bits.\r\n *\r\n * Bits that are shifted out on the right are put back in on the left\r\n * hand side.\r\n *\r\n * @param word The word to shift right.\r\n * @param bits The number of bits to shift by.\r\n * @return The rotated word.\r\n */\n\n\nvar ror = function (word, bits) {\n  return (word & 0xffff) >> bits | word << 16 - bits & 0xffff;\n};\n/* RC2 API */\n\n\nmodule.exports = forge.rc2 = forge.rc2 || {};\n/**\r\n * Perform RC2 key expansion as per RFC #2268, section 2.\r\n *\r\n * @param key variable-length user key (between 1 and 128 bytes)\r\n * @param effKeyBits number of effective key bits (default: 128)\r\n * @return the expanded RC2 key (ByteBuffer of 128 bytes)\r\n */\n\nforge.rc2.expandKey = function (key, effKeyBits) {\n  if (typeof key === 'string') {\n    key = forge.util.createBuffer(key);\n  }\n\n  effKeyBits = effKeyBits || 128;\n  /* introduce variables that match the names used in RFC #2268 */\n\n  var L = key;\n  var T = key.length();\n  var T1 = effKeyBits;\n  var T8 = Math.ceil(T1 / 8);\n  var TM = 0xff >> (T1 & 0x07);\n  var i;\n\n  for (i = T; i < 128; i++) {\n    L.putByte(piTable[L.at(i - 1) + L.at(i - T) & 0xff]);\n  }\n\n  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);\n\n  for (i = 127 - T8; i >= 0; i--) {\n    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);\n  }\n\n  return L;\n};\n/**\r\n * Creates a RC2 cipher object.\r\n *\r\n * @param key the symmetric key to use (as base for key generation).\r\n * @param bits the number of effective key bits.\r\n * @param encrypt false for decryption, true for encryption.\r\n *\r\n * @return the cipher.\r\n */\n\n\nvar createCipher = function (key, bits, encrypt) {\n  var _finish = false,\n      _input = null,\n      _output = null,\n      _iv = null;\n  var mixRound, mashRound;\n  var i,\n      j,\n      K = [];\n  /* Expand key and fill into K[] Array */\n\n  key = forge.rc2.expandKey(key, bits);\n\n  for (i = 0; i < 64; i++) {\n    K.push(key.getInt16Le());\n  }\n\n  if (encrypt) {\n    /**\r\n     * Perform one mixing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mixing on.\r\n     */\n    mixRound = function (R) {\n      for (i = 0; i < 4; i++) {\n        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);\n        R[i] = rol(R[i], s[i]);\n        j++;\n      }\n    };\n    /**\r\n     * Perform one mashing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mashing on.\r\n     */\n\n\n    mashRound = function (R) {\n      for (i = 0; i < 4; i++) {\n        R[i] += K[R[(i + 3) % 4] & 63];\n      }\n    };\n  } else {\n    /**\r\n     * Perform one r-mixing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mixing on.\r\n     */\n    mixRound = function (R) {\n      for (i = 3; i >= 0; i--) {\n        R[i] = ror(R[i], s[i]);\n        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);\n        j--;\n      }\n    };\n    /**\r\n     * Perform one r-mashing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mashing on.\r\n     */\n\n\n    mashRound = function (R) {\n      for (i = 3; i >= 0; i--) {\n        R[i] -= K[R[(i + 3) % 4] & 63];\n      }\n    };\n  }\n  /**\r\n   * Run the specified cipher execution plan.\r\n   *\r\n   * This function takes four words from the input buffer, applies the IV on\r\n   * it (if requested) and runs the provided execution plan.\r\n   *\r\n   * The plan must be put together in form of a array of arrays.  Where the\r\n   * outer one is simply a list of steps to perform and the inner one needs\r\n   * to have two elements: the first one telling how many rounds to perform,\r\n   * the second one telling what to do (i.e. the function to call).\r\n   *\r\n   * @param {Array} plan The plan to execute.\r\n   */\n\n\n  var runPlan = function (plan) {\n    var R = [];\n    /* Get data from input buffer and fill the four words into R */\n\n    for (i = 0; i < 4; i++) {\n      var val = _input.getInt16Le();\n\n      if (_iv !== null) {\n        if (encrypt) {\n          /* We're encrypting, apply the IV first. */\n          val ^= _iv.getInt16Le();\n        } else {\n          /* We're decryption, keep cipher text for next block. */\n          _iv.putInt16Le(val);\n        }\n      }\n\n      R.push(val & 0xffff);\n    }\n    /* Reset global \"j\" variable as per spec. */\n\n\n    j = encrypt ? 0 : 63;\n    /* Run execution plan. */\n\n    for (var ptr = 0; ptr < plan.length; ptr++) {\n      for (var ctr = 0; ctr < plan[ptr][0]; ctr++) {\n        plan[ptr][1](R);\n      }\n    }\n    /* Write back result to output buffer. */\n\n\n    for (i = 0; i < 4; i++) {\n      if (_iv !== null) {\n        if (encrypt) {\n          /* We're encrypting in CBC-mode, feed back encrypted bytes into\r\n             IV buffer to carry it forward to next block. */\n          _iv.putInt16Le(R[i]);\n        } else {\n          R[i] ^= _iv.getInt16Le();\n        }\n      }\n\n      _output.putInt16Le(R[i]);\n    }\n  };\n  /* Create cipher object */\n\n\n  var cipher = null;\n  cipher = {\n    /**\r\n     * Starts or restarts the encryption or decryption process, whichever\r\n     * was previously configured.\r\n     *\r\n     * To use the cipher in CBC mode, iv may be given either as a string\r\n     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.\r\n     *\r\n     * @param iv the initialization vector to use, null for ECB mode.\r\n     * @param output the output the buffer to write to, null to create one.\r\n     */\n    start: function (iv, output) {\n      if (iv) {\n        /* CBC mode */\n        if (typeof iv === 'string') {\n          iv = forge.util.createBuffer(iv);\n        }\n      }\n\n      _finish = false;\n      _input = forge.util.createBuffer();\n      _output = output || new forge.util.createBuffer();\n      _iv = iv;\n      cipher.output = _output;\n    },\n\n    /**\r\n     * Updates the next block.\r\n     *\r\n     * @param input the buffer to read from.\r\n     */\n    update: function (input) {\n      if (!_finish) {\n        // not finishing, so fill the input buffer with more input\n        _input.putBuffer(input);\n      }\n\n      while (_input.length() >= 8) {\n        runPlan([[5, mixRound], [1, mashRound], [6, mixRound], [1, mashRound], [5, mixRound]]);\n      }\n    },\n\n    /**\r\n     * Finishes encrypting or decrypting.\r\n     *\r\n     * @param pad a padding function to use, null for PKCS#7 padding,\r\n     *           signature(blockSize, buffer, decrypt).\r\n     *\r\n     * @return true if successful, false on error.\r\n     */\n    finish: function (pad) {\n      var rval = true;\n\n      if (encrypt) {\n        if (pad) {\n          rval = pad(8, _input, !encrypt);\n        } else {\n          // add PKCS#7 padding to block (each pad byte is the\n          // value of the number of pad bytes)\n          var padding = _input.length() === 8 ? 8 : 8 - _input.length();\n\n          _input.fillWithByte(padding, padding);\n        }\n      }\n\n      if (rval) {\n        // do final update\n        _finish = true;\n        cipher.update();\n      }\n\n      if (!encrypt) {\n        // check for error: input data not a multiple of block size\n        rval = _input.length() === 0;\n\n        if (rval) {\n          if (pad) {\n            rval = pad(8, _output, !encrypt);\n          } else {\n            // ensure padding byte count is valid\n            var len = _output.length();\n\n            var count = _output.at(len - 1);\n\n            if (count > len) {\n              rval = false;\n            } else {\n              // trim off padding bytes\n              _output.truncate(count);\n            }\n          }\n        }\n      }\n\n      return rval;\n    }\n  };\n  return cipher;\n};\n/**\r\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\r\n * given symmetric key. The output will be stored in the 'output' member\r\n * of the returned cipher.\r\n *\r\n * The key and iv may be given as a string of bytes or a byte buffer.\r\n * The cipher is initialized to use 128 effective key bits.\r\n *\r\n * @param key the symmetric key to use.\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n *\r\n * @return the cipher.\r\n */\n\n\nforge.rc2.startEncrypting = function (key, iv, output) {\n  var cipher = forge.rc2.createEncryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n/**\r\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\r\n * given symmetric key.\r\n *\r\n * The key may be given as a string of bytes or a byte buffer.\r\n *\r\n * To start encrypting call start() on the cipher with an iv and optional\r\n * output buffer.\r\n *\r\n * @param key the symmetric key to use.\r\n *\r\n * @return the cipher.\r\n */\n\n\nforge.rc2.createEncryptionCipher = function (key, bits) {\n  return createCipher(key, bits, true);\n};\n/**\r\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\r\n * given symmetric key. The output will be stored in the 'output' member\r\n * of the returned cipher.\r\n *\r\n * The key and iv may be given as a string of bytes or a byte buffer.\r\n * The cipher is initialized to use 128 effective key bits.\r\n *\r\n * @param key the symmetric key to use.\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n *\r\n * @return the cipher.\r\n */\n\n\nforge.rc2.startDecrypting = function (key, iv, output) {\n  var cipher = forge.rc2.createDecryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n/**\r\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\r\n * given symmetric key.\r\n *\r\n * The key may be given as a string of bytes or a byte buffer.\r\n *\r\n * To start decrypting call start() on the cipher with an iv and optional\r\n * output buffer.\r\n *\r\n * @param key the symmetric key to use.\r\n *\r\n * @return the cipher.\r\n */\n\n\nforge.rc2.createDecryptionCipher = function (key, bits) {\n  return createCipher(key, bits, false);\n};","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/node_modules/node-forge/lib/rc2.js"],"names":["forge","require","piTable","s","rol","word","bits","ror","module","exports","rc2","expandKey","key","effKeyBits","util","createBuffer","L","T","length","T1","T8","Math","ceil","TM","i","putByte","at","setAt","createCipher","encrypt","_finish","_input","_output","_iv","mixRound","mashRound","j","K","push","getInt16Le","R","runPlan","plan","val","putInt16Le","ptr","ctr","cipher","start","iv","output","update","input","putBuffer","finish","pad","rval","padding","fillWithByte","len","count","truncate","startEncrypting","createEncryptionCipher","startDecrypting","createDecryptionCipher"],"mappings":"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","sourcesContent":["/**\r\n * RC2 implementation.\r\n *\r\n * @author Stefan Siegl\r\n *\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n *\r\n * Information on the RC2 cipher is available from RFC #2268,\r\n * http://www.ietf.org/rfc/rfc2268.txt\r\n */\r\nvar forge = require('./forge');\r\nrequire('./util');\r\n\r\nvar piTable = [\r\n  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,\r\n  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,\r\n  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,\r\n  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,\r\n  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,\r\n  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,\r\n  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,\r\n  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,\r\n  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,\r\n  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,\r\n  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,\r\n  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,\r\n  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,\r\n  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,\r\n  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,\r\n  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad\r\n];\r\n\r\nvar s = [1, 2, 3, 5];\r\n\r\n/**\r\n * Rotate a word left by given number of bits.\r\n *\r\n * Bits that are shifted out on the left are put back in on the right\r\n * hand side.\r\n *\r\n * @param word The word to shift left.\r\n * @param bits The number of bits to shift by.\r\n * @return The rotated word.\r\n */\r\nvar rol = function(word, bits) {\r\n  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));\r\n};\r\n\r\n/**\r\n * Rotate a word right by given number of bits.\r\n *\r\n * Bits that are shifted out on the right are put back in on the left\r\n * hand side.\r\n *\r\n * @param word The word to shift right.\r\n * @param bits The number of bits to shift by.\r\n * @return The rotated word.\r\n */\r\nvar ror = function(word, bits) {\r\n  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);\r\n};\r\n\r\n/* RC2 API */\r\nmodule.exports = forge.rc2 = forge.rc2 || {};\r\n\r\n/**\r\n * Perform RC2 key expansion as per RFC #2268, section 2.\r\n *\r\n * @param key variable-length user key (between 1 and 128 bytes)\r\n * @param effKeyBits number of effective key bits (default: 128)\r\n * @return the expanded RC2 key (ByteBuffer of 128 bytes)\r\n */\r\nforge.rc2.expandKey = function(key, effKeyBits) {\r\n  if(typeof key === 'string') {\r\n    key = forge.util.createBuffer(key);\r\n  }\r\n  effKeyBits = effKeyBits || 128;\r\n\r\n  /* introduce variables that match the names used in RFC #2268 */\r\n  var L = key;\r\n  var T = key.length();\r\n  var T1 = effKeyBits;\r\n  var T8 = Math.ceil(T1 / 8);\r\n  var TM = 0xff >> (T1 & 0x07);\r\n  var i;\r\n\r\n  for(i = T; i < 128; i++) {\r\n    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);\r\n  }\r\n\r\n  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);\r\n\r\n  for(i = 127 - T8; i >= 0; i--) {\r\n    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);\r\n  }\r\n\r\n  return L;\r\n};\r\n\r\n/**\r\n * Creates a RC2 cipher object.\r\n *\r\n * @param key the symmetric key to use (as base for key generation).\r\n * @param bits the number of effective key bits.\r\n * @param encrypt false for decryption, true for encryption.\r\n *\r\n * @return the cipher.\r\n */\r\nvar createCipher = function(key, bits, encrypt) {\r\n  var _finish = false, _input = null, _output = null, _iv = null;\r\n  var mixRound, mashRound;\r\n  var i, j, K = [];\r\n\r\n  /* Expand key and fill into K[] Array */\r\n  key = forge.rc2.expandKey(key, bits);\r\n  for(i = 0; i < 64; i++) {\r\n    K.push(key.getInt16Le());\r\n  }\r\n\r\n  if(encrypt) {\r\n    /**\r\n     * Perform one mixing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mixing on.\r\n     */\r\n    mixRound = function(R) {\r\n      for(i = 0; i < 4; i++) {\r\n        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\r\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\r\n        R[i] = rol(R[i], s[i]);\r\n        j++;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Perform one mashing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mashing on.\r\n     */\r\n    mashRound = function(R) {\r\n      for(i = 0; i < 4; i++) {\r\n        R[i] += K[R[(i + 3) % 4] & 63];\r\n      }\r\n    };\r\n  } else {\r\n    /**\r\n     * Perform one r-mixing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mixing on.\r\n     */\r\n    mixRound = function(R) {\r\n      for(i = 3; i >= 0; i--) {\r\n        R[i] = ror(R[i], s[i]);\r\n        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\r\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\r\n        j--;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Perform one r-mashing round \"in place\".\r\n     *\r\n     * @param R Array of four words to perform mashing on.\r\n     */\r\n    mashRound = function(R) {\r\n      for(i = 3; i >= 0; i--) {\r\n        R[i] -= K[R[(i + 3) % 4] & 63];\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Run the specified cipher execution plan.\r\n   *\r\n   * This function takes four words from the input buffer, applies the IV on\r\n   * it (if requested) and runs the provided execution plan.\r\n   *\r\n   * The plan must be put together in form of a array of arrays.  Where the\r\n   * outer one is simply a list of steps to perform and the inner one needs\r\n   * to have two elements: the first one telling how many rounds to perform,\r\n   * the second one telling what to do (i.e. the function to call).\r\n   *\r\n   * @param {Array} plan The plan to execute.\r\n   */\r\n  var runPlan = function(plan) {\r\n    var R = [];\r\n\r\n    /* Get data from input buffer and fill the four words into R */\r\n    for(i = 0; i < 4; i++) {\r\n      var val = _input.getInt16Le();\r\n\r\n      if(_iv !== null) {\r\n        if(encrypt) {\r\n          /* We're encrypting, apply the IV first. */\r\n          val ^= _iv.getInt16Le();\r\n        } else {\r\n          /* We're decryption, keep cipher text for next block. */\r\n          _iv.putInt16Le(val);\r\n        }\r\n      }\r\n\r\n      R.push(val & 0xffff);\r\n    }\r\n\r\n    /* Reset global \"j\" variable as per spec. */\r\n    j = encrypt ? 0 : 63;\r\n\r\n    /* Run execution plan. */\r\n    for(var ptr = 0; ptr < plan.length; ptr++) {\r\n      for(var ctr = 0; ctr < plan[ptr][0]; ctr++) {\r\n        plan[ptr][1](R);\r\n      }\r\n    }\r\n\r\n    /* Write back result to output buffer. */\r\n    for(i = 0; i < 4; i++) {\r\n      if(_iv !== null) {\r\n        if(encrypt) {\r\n          /* We're encrypting in CBC-mode, feed back encrypted bytes into\r\n             IV buffer to carry it forward to next block. */\r\n          _iv.putInt16Le(R[i]);\r\n        } else {\r\n          R[i] ^= _iv.getInt16Le();\r\n        }\r\n      }\r\n\r\n      _output.putInt16Le(R[i]);\r\n    }\r\n  };\r\n\r\n  /* Create cipher object */\r\n  var cipher = null;\r\n  cipher = {\r\n    /**\r\n     * Starts or restarts the encryption or decryption process, whichever\r\n     * was previously configured.\r\n     *\r\n     * To use the cipher in CBC mode, iv may be given either as a string\r\n     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.\r\n     *\r\n     * @param iv the initialization vector to use, null for ECB mode.\r\n     * @param output the output the buffer to write to, null to create one.\r\n     */\r\n    start: function(iv, output) {\r\n      if(iv) {\r\n        /* CBC mode */\r\n        if(typeof iv === 'string') {\r\n          iv = forge.util.createBuffer(iv);\r\n        }\r\n      }\r\n\r\n      _finish = false;\r\n      _input = forge.util.createBuffer();\r\n      _output = output || new forge.util.createBuffer();\r\n      _iv = iv;\r\n\r\n      cipher.output = _output;\r\n    },\r\n\r\n    /**\r\n     * Updates the next block.\r\n     *\r\n     * @param input the buffer to read from.\r\n     */\r\n    update: function(input) {\r\n      if(!_finish) {\r\n        // not finishing, so fill the input buffer with more input\r\n        _input.putBuffer(input);\r\n      }\r\n\r\n      while(_input.length() >= 8) {\r\n        runPlan([\r\n            [ 5, mixRound ],\r\n            [ 1, mashRound ],\r\n            [ 6, mixRound ],\r\n            [ 1, mashRound ],\r\n            [ 5, mixRound ]\r\n          ]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Finishes encrypting or decrypting.\r\n     *\r\n     * @param pad a padding function to use, null for PKCS#7 padding,\r\n     *           signature(blockSize, buffer, decrypt).\r\n     *\r\n     * @return true if successful, false on error.\r\n     */\r\n    finish: function(pad) {\r\n      var rval = true;\r\n\r\n      if(encrypt) {\r\n        if(pad) {\r\n          rval = pad(8, _input, !encrypt);\r\n        } else {\r\n          // add PKCS#7 padding to block (each pad byte is the\r\n          // value of the number of pad bytes)\r\n          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());\r\n          _input.fillWithByte(padding, padding);\r\n        }\r\n      }\r\n\r\n      if(rval) {\r\n        // do final update\r\n        _finish = true;\r\n        cipher.update();\r\n      }\r\n\r\n      if(!encrypt) {\r\n        // check for error: input data not a multiple of block size\r\n        rval = (_input.length() === 0);\r\n        if(rval) {\r\n          if(pad) {\r\n            rval = pad(8, _output, !encrypt);\r\n          } else {\r\n            // ensure padding byte count is valid\r\n            var len = _output.length();\r\n            var count = _output.at(len - 1);\r\n\r\n            if(count > len) {\r\n              rval = false;\r\n            } else {\r\n              // trim off padding bytes\r\n              _output.truncate(count);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return rval;\r\n    }\r\n  };\r\n\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\r\n * given symmetric key. The output will be stored in the 'output' member\r\n * of the returned cipher.\r\n *\r\n * The key and iv may be given as a string of bytes or a byte buffer.\r\n * The cipher is initialized to use 128 effective key bits.\r\n *\r\n * @param key the symmetric key to use.\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n *\r\n * @return the cipher.\r\n */\r\nforge.rc2.startEncrypting = function(key, iv, output) {\r\n  var cipher = forge.rc2.createEncryptionCipher(key, 128);\r\n  cipher.start(iv, output);\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\r\n * given symmetric key.\r\n *\r\n * The key may be given as a string of bytes or a byte buffer.\r\n *\r\n * To start encrypting call start() on the cipher with an iv and optional\r\n * output buffer.\r\n *\r\n * @param key the symmetric key to use.\r\n *\r\n * @return the cipher.\r\n */\r\nforge.rc2.createEncryptionCipher = function(key, bits) {\r\n  return createCipher(key, bits, true);\r\n};\r\n\r\n/**\r\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\r\n * given symmetric key. The output will be stored in the 'output' member\r\n * of the returned cipher.\r\n *\r\n * The key and iv may be given as a string of bytes or a byte buffer.\r\n * The cipher is initialized to use 128 effective key bits.\r\n *\r\n * @param key the symmetric key to use.\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n *\r\n * @return the cipher.\r\n */\r\nforge.rc2.startDecrypting = function(key, iv, output) {\r\n  var cipher = forge.rc2.createDecryptionCipher(key, 128);\r\n  cipher.start(iv, output);\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\r\n * given symmetric key.\r\n *\r\n * The key may be given as a string of bytes or a byte buffer.\r\n *\r\n * To start decrypting call start() on the cipher with an iv and optional\r\n * output buffer.\r\n *\r\n * @param key the symmetric key to use.\r\n *\r\n * @return the cipher.\r\n */\r\nforge.rc2.createDecryptionCipher = function(key, bits) {\r\n  return createCipher(key, bits, false);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}