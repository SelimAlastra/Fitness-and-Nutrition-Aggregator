{"ast":null,"code":"var _jsxFileName = \"/Users/ioanaghinea/major-group-project/MajorGroupProject/src/google_login.js\";\nimport GoogleLogin from 'react-google-login';\nimport './google_login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginButton = () => /*#__PURE__*/_jsxDEV(GoogleLogin, {\n  clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n  buttonText: \"Continue with Google\",\n  className: \"GoogleLogin\",\n  onSuccess: handleLogin,\n  onFailure: handleLogin,\n  cookiePolicy: 'single_host_origin'\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 1\n}, this);\n\n_c = LoginButton;\n\nconst handleLogin = async googleData => {\n  const res = await fetch(\"/api/v1/auth/google\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      token: googleData.tokenId\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await res.json(); // store returned user somehow\n};\n\nconst {\n  OAuth2Client\n} = require('google-auth-library');\n\nconst client = new OAuth2Client(process.env.CLIENT_ID); // server.post(\"/api/v1/auth/google\", async (req, res) => {\n//     const { token }  = req.body\n//     const ticket = await client.verifyIdToken({\n//         idToken: token,\n//         audience: process.env.CLIENT_ID\n//     });\n//     const { name, email, picture } = ticket.getPayload();    \n//     const user = await db.user.upsert({ \n//         where: { email: email },\n//         update: { name, picture },\n//         create: { name, email, picture }\n//     })\n//     req.session.userId = user.id\n//     res.status(201)\n//     res.json(user)\n// })\n// server.use(async (req, res, next) => {\n//     const user = await db.user.findFirst({where: { id:  req.session.userId }})\n//     req.user = user\n//     next()\n// })\n// // Sign out route\n// server.delete(\"/api/v1/auth/logout\", async (req, res) => {\n//     await req.session.destroy()\n//     res.status(200)\n//     res.json({\n//         message: \"Logged out successfully\"\n//     })\n// })\n// // \"Me\" route\n// server.get(\"/me\", async (req, res) => {\n//     res.status(200)\n//     res.json(req.user)\n// })\n\nexport default LoginButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginButton\");","map":{"version":3,"sources":["/Users/ioanaghinea/major-group-project/MajorGroupProject/src/google_login.js"],"names":["GoogleLogin","LoginButton","process","env","REACT_APP_GOOGLE_CLIENT_ID","handleLogin","googleData","res","fetch","method","body","JSON","stringify","token","tokenId","headers","data","json","OAuth2Client","require","client","CLIENT_ID"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAO,oBAAP;;;AAEA,MAAMC,WAAW,GAAG,mBACpB,QAAC,WAAD;AACI,EAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,0BAD1B;AAEI,EAAA,UAAU,EAAC,sBAFf;AAGI,EAAA,SAAS,EAAC,aAHd;AAII,EAAA,SAAS,EAAEC,WAJf;AAKI,EAAA,SAAS,EAAEA,WALf;AAMI,EAAA,YAAY,EAAE;AANlB;AAAA;AAAA;AAAA;AAAA,QADA;;KAAMJ,W;;AAWN,MAAMI,WAAW,GAAG,MAAMC,UAAN,IAAoB;AACpC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qBAAD,EAAwB;AAC3CC,IAAAA,MAAM,EAAE,MADmC;AAE3CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACrBC,MAAAA,KAAK,EAAEP,UAAU,CAACQ;AADG,KAAf,CAFqC;AAK7CC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AALoC,GAAxB,CAAvB;AASA,QAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB,CAVoC,CAWpC;AACH,CAZD;;AAcA,MAAM;AAAEC,EAAAA;AAAF,IAAmBC,OAAO,CAAC,qBAAD,CAAhC;;AACA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiBhB,OAAO,CAACC,GAAR,CAAYkB,SAA7B,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,eAAepB,WAAf","sourcesContent":["import GoogleLogin from 'react-google-login';\nimport './google_login.css';\n\nconst LoginButton = () => (\n<GoogleLogin\n    clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n    buttonText=\"Continue with Google\"\n    className=\"GoogleLogin\"\n    onSuccess={handleLogin}\n    onFailure={handleLogin}\n    cookiePolicy={'single_host_origin'}\n/>\n)\n\nconst handleLogin = async googleData => {\n    const res = await fetch(\"/api/v1/auth/google\", {\n        method: \"POST\",\n        body: JSON.stringify({\n        token: googleData.tokenId\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    const data = await res.json()\n    // store returned user somehow\n}\n\nconst { OAuth2Client } = require('google-auth-library')\nconst client = new OAuth2Client(process.env.CLIENT_ID)\n\n// server.post(\"/api/v1/auth/google\", async (req, res) => {\n//     const { token }  = req.body\n//     const ticket = await client.verifyIdToken({\n//         idToken: token,\n//         audience: process.env.CLIENT_ID\n//     });\n//     const { name, email, picture } = ticket.getPayload();    \n//     const user = await db.user.upsert({ \n//         where: { email: email },\n//         update: { name, picture },\n//         create: { name, email, picture }\n//     })\n//     req.session.userId = user.id\n//     res.status(201)\n//     res.json(user)\n// })\n\n// server.use(async (req, res, next) => {\n//     const user = await db.user.findFirst({where: { id:  req.session.userId }})\n//     req.user = user\n//     next()\n// })\n\n// // Sign out route\n\n// server.delete(\"/api/v1/auth/logout\", async (req, res) => {\n//     await req.session.destroy()\n//     res.status(200)\n//     res.json({\n//         message: \"Logged out successfully\"\n//     })\n// })\n\n// // \"Me\" route\n\n// server.get(\"/me\", async (req, res) => {\n//     res.status(200)\n//     res.json(req.user)\n// })\n\nexport default LoginButton;"]},"metadata":{},"sourceType":"module"}