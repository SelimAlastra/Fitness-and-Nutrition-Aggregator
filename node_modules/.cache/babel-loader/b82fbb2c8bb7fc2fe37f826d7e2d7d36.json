{"ast":null,"code":"/**\r\n * DES (Data Encryption Standard) implementation.\r\n *\r\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\r\n * It is based on the BSD-licensed implementation by Paul Tero:\r\n *\r\n * Paul Tero, July 2001\r\n * http://www.tero.co.uk/des/\r\n *\r\n * Optimised for performance with large blocks by\r\n * Michael Hayworth, November 2001\r\n * http://www.netdealing.com\r\n *\r\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n *\r\n * @author Stefan Siegl\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\r\n */\nvar forge = require('./forge');\n\nrequire('./cipher');\n\nrequire('./cipherModes');\n\nrequire('./util');\n/* DES API */\n\n\nmodule.exports = forge.des = forge.des || {};\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n * cipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\n\nforge.des.startEncrypting = function (key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: false,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n\n  cipher.start(iv);\n  return cipher;\n};\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\n\n\nforge.des.createEncryptionCipher = function (key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: false,\n    mode: mode\n  });\n};\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n * decipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\n\n\nforge.des.startDecrypting = function (key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: true,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n\n  cipher.start(iv);\n  return cipher;\n};\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\n\n\nforge.des.createDecryptionCipher = function (key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: true,\n    mode: mode\n  });\n};\n/**\r\n * Creates a new DES cipher algorithm object.\r\n *\r\n * @param name the name of the algorithm.\r\n * @param mode the mode factory function.\r\n *\r\n * @return the DES algorithm object.\r\n */\n\n\nforge.des.Algorithm = function (name, mode) {\n  var self = this;\n  self.name = name;\n  self.mode = new mode({\n    blockSize: 8,\n    cipher: {\n      encrypt: function (inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, false);\n      },\n      decrypt: function (inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, true);\n      }\n    }\n  });\n  self._init = false;\n};\n/**\r\n * Initializes this DES algorithm by expanding its key.\r\n *\r\n * @param options the options to use.\r\n *          key the key to use with this algorithm.\r\n *          decrypt true if the algorithm should be initialized for decryption,\r\n *            false for encryption.\r\n */\n\n\nforge.des.Algorithm.prototype.initialize = function (options) {\n  if (this._init) {\n    return;\n  }\n\n  var key = forge.util.createBuffer(options.key);\n\n  if (this.name.indexOf('3DES') === 0) {\n    if (key.length() !== 24) {\n      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);\n    }\n  } // do key expansion to 16 or 48 subkeys (single or triple DES)\n\n\n  this._keys = _createKeys(key);\n  this._init = true;\n};\n/** Register DES algorithms **/\n\n\nregisterAlgorithm('DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('DES-CTR', forge.cipher.modes.ctr);\nregisterAlgorithm('3DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('3DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('3DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('3DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('3DES-CTR', forge.cipher.modes.ctr);\n\nfunction registerAlgorithm(name, mode) {\n  var factory = function () {\n    return new forge.des.Algorithm(name, mode);\n  };\n\n  forge.cipher.registerAlgorithm(name, factory);\n}\n/** DES implementation **/\n\n\nvar spfunction1 = [0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004];\nvar spfunction2 = [-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000];\nvar spfunction3 = [0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200];\nvar spfunction4 = [0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080];\nvar spfunction5 = [0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100];\nvar spfunction6 = [0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010];\nvar spfunction7 = [0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002];\nvar spfunction8 = [0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000];\n/**\r\n * Create necessary sub keys.\r\n *\r\n * @param key the 64-bit or 192-bit key.\r\n *\r\n * @return the expanded keys.\r\n */\n\nfunction _createKeys(key) {\n  var pc2bytes0 = [0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204],\n      pc2bytes1 = [0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101],\n      pc2bytes2 = [0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808],\n      pc2bytes3 = [0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000],\n      pc2bytes4 = [0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010],\n      pc2bytes5 = [0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420],\n      pc2bytes6 = [0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002],\n      pc2bytes7 = [0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800],\n      pc2bytes8 = [0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002],\n      pc2bytes9 = [0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408],\n      pc2bytes10 = [0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020],\n      pc2bytes11 = [0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200],\n      pc2bytes12 = [0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010],\n      pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105]; // how many iterations (1 for des, 3 for triple des)\n  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n\n  var iterations = key.length() > 8 ? 3 : 1; // stores the return keys\n\n  var keys = []; // now define the left shifts which need to be done\n\n  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n  var n = 0,\n      tmp;\n\n  for (var j = 0; j < iterations; j++) {\n    var left = key.getInt32();\n    var right = key.getInt32();\n    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n    right ^= tmp;\n    left ^= tmp << 4;\n    tmp = (right >>> -16 ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= tmp << -16;\n    tmp = (left >>> 2 ^ right) & 0x33333333;\n    right ^= tmp;\n    left ^= tmp << 2;\n    tmp = (right >>> -16 ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= tmp << -16;\n    tmp = (left >>> 1 ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= tmp << 1;\n    tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n    left ^= tmp;\n    right ^= tmp << 8;\n    tmp = (left >>> 1 ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= tmp << 1; // right needs to be shifted and OR'd with last four bits of left\n\n    tmp = left << 8 | right >>> 20 & 0x000000f0; // left needs to be put upside down\n\n    left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;\n    right = tmp; // now go through and perform these shifts on the left and right keys\n\n    for (var i = 0; i < shifts.length; ++i) {\n      //shift the keys either one or two bits to the left\n      if (shifts[i]) {\n        left = left << 2 | left >>> 26;\n        right = right << 2 | right >>> 26;\n      } else {\n        left = left << 1 | left >>> 27;\n        right = right << 1 | right >>> 27;\n      }\n\n      left &= -0xf;\n      right &= -0xf; // now apply PC-2, in such a way that E is easier when encrypting or\n      // decrypting this conversion will look like PC-2 except only the last 6\n      // bits of each byte are used rather than 48 consecutive bits and the\n      // order of lines will be according to how the S selection functions will\n      // be applied: S2, S4, S6, S8, S1, S3, S5, S7\n\n      var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] | pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] | pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] | pc2bytes6[left >>> 4 & 0xf];\n      var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] | pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] | pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] | pc2bytes13[right >>> 4 & 0xf];\n      tmp = (righttmp >>> 16 ^ lefttmp) & 0x0000ffff;\n      keys[n++] = lefttmp ^ tmp;\n      keys[n++] = righttmp ^ tmp << 16;\n    }\n  }\n\n  return keys;\n}\n/**\r\n * Updates a single block (1 byte) using DES. The update will either\r\n * encrypt or decrypt the block.\r\n *\r\n * @param keys the expanded keys.\r\n * @param input the input block (an array of 32-bit words).\r\n * @param output the updated output block.\r\n * @param decrypt true to decrypt the block, false to encrypt it.\r\n */\n\n\nfunction _updateBlock(keys, input, output, decrypt) {\n  // set up loops for single or triple DES\n  var iterations = keys.length === 32 ? 3 : 9;\n  var looping;\n\n  if (iterations === 3) {\n    looping = decrypt ? [30, -2, -2] : [0, 32, 2];\n  } else {\n    looping = decrypt ? [94, 62, -2, 32, 64, 2, 30, -2, -2] : [0, 32, 2, 62, 30, -2, 64, 96, 2];\n  }\n\n  var tmp;\n  var left = input[0];\n  var right = input[1]; // first each 64 bit chunk of the message must be permuted according to IP\n\n  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= tmp << 4;\n  tmp = (left >>> 16 ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= tmp << 16;\n  tmp = (right >>> 2 ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= tmp << 2;\n  tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= tmp << 8;\n  tmp = (left >>> 1 ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= tmp << 1; // rotate left 1 bit\n\n  left = left << 1 | left >>> 31;\n  right = right << 1 | right >>> 31;\n\n  for (var j = 0; j < iterations; j += 3) {\n    var endloop = looping[j + 1];\n    var loopinc = looping[j + 2]; // now go through and perform the encryption or decryption\n\n    for (var i = looping[j]; i != endloop; i += loopinc) {\n      var right1 = right ^ keys[i];\n      var right2 = (right >>> 4 | right << 28) ^ keys[i + 1]; // passing these bytes through the S selection functions\n\n      tmp = left;\n      left = right;\n      right = tmp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] | spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] | spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);\n    } // unreverse left and right\n\n\n    tmp = left;\n    left = right;\n    right = tmp;\n  } // rotate right 1 bit\n\n\n  left = left >>> 1 | left << 31;\n  right = right >>> 1 | right << 31; // now perform IP-1, which is IP in the opposite direction\n\n  tmp = (left >>> 1 ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= tmp << 1;\n  tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= tmp << 8;\n  tmp = (right >>> 2 ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= tmp << 2;\n  tmp = (left >>> 16 ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= tmp << 16;\n  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= tmp << 4;\n  output[0] = left;\n  output[1] = right;\n}\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * forge.cipher.createCipher('DES-<mode>', key);\r\n * forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates a deprecated DES cipher object. This object's mode will default to\r\n * CBC (cipher-block-chaining).\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param options the options to use.\r\n *          key the symmetric key to use (64 or 192 bits).\r\n *          output the buffer to write to.\r\n *          decrypt true for decryption, false for encryption.\r\n *          mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\n\n\nfunction _createCipher(options) {\n  options = options || {};\n  var mode = (options.mode || 'CBC').toUpperCase();\n  var algorithm = 'DES-' + mode;\n  var cipher;\n\n  if (options.decrypt) {\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\n  } else {\n    cipher = forge.cipher.createCipher(algorithm, options.key);\n  } // backwards compatible start API\n\n\n  var start = cipher.start;\n\n  cipher.start = function (iv, options) {\n    // backwards compatibility: support second arg as output buffer\n    var output = null;\n\n    if (options instanceof forge.util.ByteBuffer) {\n      output = options;\n      options = {};\n    }\n\n    options = options || {};\n    options.output = output;\n    options.iv = iv;\n    start.call(cipher, options);\n  };\n\n  return cipher;\n}","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/node_modules/node-forge/lib/des.js"],"names":["forge","require","module","exports","des","startEncrypting","key","iv","output","mode","cipher","_createCipher","decrypt","start","createEncryptionCipher","startDecrypting","createDecryptionCipher","Algorithm","name","self","blockSize","encrypt","inBlock","outBlock","_updateBlock","_keys","_init","prototype","initialize","options","util","createBuffer","indexOf","length","Error","_createKeys","registerAlgorithm","modes","ecb","cbc","cfb","ofb","ctr","factory","spfunction1","spfunction2","spfunction3","spfunction4","spfunction5","spfunction6","spfunction7","spfunction8","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","iterations","keys","shifts","n","tmp","j","left","getInt32","right","i","lefttmp","righttmp","input","looping","endloop","loopinc","right1","right2","toUpperCase","algorithm","createDecipher","createCipher","ByteBuffer","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACAA,OAAO,CAAC,UAAD,CAAP;;AACAA,OAAO,CAAC,eAAD,CAAP;;AACAA,OAAO,CAAC,QAAD,CAAP;AAEA;;;AACAC,MAAM,CAACC,OAAP,GAAiBH,KAAK,CAACI,GAAN,GAAYJ,KAAK,CAACI,GAAN,IAAa,EAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,KAAK,CAACI,GAAN,CAAUC,eAAV,GAA4B,UAASC,GAAT,EAAcC,EAAd,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgC;AAC1D,MAAIC,MAAM,GAAGC,aAAa,CAAC;AACzBL,IAAAA,GAAG,EAAEA,GADoB;AAEzBE,IAAAA,MAAM,EAAEA,MAFiB;AAGzBI,IAAAA,OAAO,EAAE,KAHgB;AAIzBH,IAAAA,IAAI,EAAEA,IAAI,KAAKF,EAAE,KAAK,IAAP,GAAc,KAAd,GAAsB,KAA3B;AAJe,GAAD,CAA1B;;AAMAG,EAAAA,MAAM,CAACG,KAAP,CAAaN,EAAb;AACA,SAAOG,MAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,KAAK,CAACI,GAAN,CAAUU,sBAAV,GAAmC,UAASR,GAAT,EAAcG,IAAd,EAAoB;AACrD,SAAOE,aAAa,CAAC;AACnBL,IAAAA,GAAG,EAAEA,GADc;AAEnBE,IAAAA,MAAM,EAAE,IAFW;AAGnBI,IAAAA,OAAO,EAAE,KAHU;AAInBH,IAAAA,IAAI,EAAEA;AAJa,GAAD,CAApB;AAMD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,KAAK,CAACI,GAAN,CAAUW,eAAV,GAA4B,UAAST,GAAT,EAAcC,EAAd,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgC;AAC1D,MAAIC,MAAM,GAAGC,aAAa,CAAC;AACzBL,IAAAA,GAAG,EAAEA,GADoB;AAEzBE,IAAAA,MAAM,EAAEA,MAFiB;AAGzBI,IAAAA,OAAO,EAAE,IAHgB;AAIzBH,IAAAA,IAAI,EAAEA,IAAI,KAAKF,EAAE,KAAK,IAAP,GAAc,KAAd,GAAsB,KAA3B;AAJe,GAAD,CAA1B;;AAMAG,EAAAA,MAAM,CAACG,KAAP,CAAaN,EAAb;AACA,SAAOG,MAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,KAAK,CAACI,GAAN,CAAUY,sBAAV,GAAmC,UAASV,GAAT,EAAcG,IAAd,EAAoB;AACrD,SAAOE,aAAa,CAAC;AACnBL,IAAAA,GAAG,EAAEA,GADc;AAEnBE,IAAAA,MAAM,EAAE,IAFW;AAGnBI,IAAAA,OAAO,EAAE,IAHU;AAInBH,IAAAA,IAAI,EAAEA;AAJa,GAAD,CAApB;AAMD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,KAAK,CAACI,GAAN,CAAUa,SAAV,GAAsB,UAASC,IAAT,EAAeT,IAAf,EAAqB;AACzC,MAAIU,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACD,IAAL,GAAYA,IAAZ;AACAC,EAAAA,IAAI,CAACV,IAAL,GAAY,IAAIA,IAAJ,CAAS;AACnBW,IAAAA,SAAS,EAAE,CADQ;AAEnBV,IAAAA,MAAM,EAAE;AACNW,MAAAA,OAAO,EAAE,UAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACnC,eAAOC,YAAY,CAACL,IAAI,CAACM,KAAN,EAAaH,OAAb,EAAsBC,QAAtB,EAAgC,KAAhC,CAAnB;AACD,OAHK;AAINX,MAAAA,OAAO,EAAE,UAASU,OAAT,EAAkBC,QAAlB,EAA4B;AACnC,eAAOC,YAAY,CAACL,IAAI,CAACM,KAAN,EAAaH,OAAb,EAAsBC,QAAtB,EAAgC,IAAhC,CAAnB;AACD;AANK;AAFW,GAAT,CAAZ;AAWAJ,EAAAA,IAAI,CAACO,KAAL,GAAa,KAAb;AACD,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,KAAK,CAACI,GAAN,CAAUa,SAAV,CAAoBU,SAApB,CAA8BC,UAA9B,GAA2C,UAASC,OAAT,EAAkB;AAC3D,MAAG,KAAKH,KAAR,EAAe;AACb;AACD;;AAED,MAAIpB,GAAG,GAAGN,KAAK,CAAC8B,IAAN,CAAWC,YAAX,CAAwBF,OAAO,CAACvB,GAAhC,CAAV;;AACA,MAAG,KAAKY,IAAL,CAAUc,OAAV,CAAkB,MAAlB,MAA8B,CAAjC,EAAoC;AAClC,QAAG1B,GAAG,CAAC2B,MAAJ,OAAiB,EAApB,EAAwB;AACtB,YAAM,IAAIC,KAAJ,CAAU,kCAAkC5B,GAAG,CAAC2B,MAAJ,KAAe,CAA3D,CAAN;AACD;AACF,GAV0D,CAY3D;;;AACA,OAAKR,KAAL,GAAaU,WAAW,CAAC7B,GAAD,CAAxB;AACA,OAAKoB,KAAL,GAAa,IAAb;AACD,CAfD;AAiBA;;;AAEAU,iBAAiB,CAAC,SAAD,EAAYpC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBC,GAA/B,CAAjB;AACAF,iBAAiB,CAAC,SAAD,EAAYpC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBE,GAA/B,CAAjB;AACAH,iBAAiB,CAAC,SAAD,EAAYpC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBG,GAA/B,CAAjB;AACAJ,iBAAiB,CAAC,SAAD,EAAYpC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBI,GAA/B,CAAjB;AACAL,iBAAiB,CAAC,SAAD,EAAYpC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBK,GAA/B,CAAjB;AAEAN,iBAAiB,CAAC,UAAD,EAAapC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBC,GAAhC,CAAjB;AACAF,iBAAiB,CAAC,UAAD,EAAapC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBE,GAAhC,CAAjB;AACAH,iBAAiB,CAAC,UAAD,EAAapC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBG,GAAhC,CAAjB;AACAJ,iBAAiB,CAAC,UAAD,EAAapC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBI,GAAhC,CAAjB;AACAL,iBAAiB,CAAC,UAAD,EAAapC,KAAK,CAACU,MAAN,CAAa2B,KAAb,CAAmBK,GAAhC,CAAjB;;AAEA,SAASN,iBAAT,CAA2BlB,IAA3B,EAAiCT,IAAjC,EAAuC;AACrC,MAAIkC,OAAO,GAAG,YAAW;AACvB,WAAO,IAAI3C,KAAK,CAACI,GAAN,CAAUa,SAAd,CAAwBC,IAAxB,EAA8BT,IAA9B,CAAP;AACD,GAFD;;AAGAT,EAAAA,KAAK,CAACU,MAAN,CAAa0B,iBAAb,CAA+BlB,IAA/B,EAAqCyB,OAArC;AACD;AAED;;;AAEA,IAAIC,WAAW,GAAG,CAAC,SAAD,EAAW,CAAX,EAAa,OAAb,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,OAAzC,EAAiD,GAAjD,EAAqD,OAArD,EAA6D,KAA7D,EAAmE,SAAnE,EAA6E,SAA7E,EAAuF,KAAvF,EAA6F,SAA7F,EAAuG,SAAvG,EAAiH,SAAjH,EAA2H,GAA3H,EAA+H,KAA/H,EAAqI,SAArI,EAA+I,SAA/I,EAAyJ,OAAzJ,EAAiK,OAAjK,EAAyK,SAAzK,EAAmL,SAAnL,EAA6L,SAA7L,EAAuM,OAAvM,EAA+M,SAA/M,EAAyN,SAAzN,EAAmO,OAAnO,EAA2O,CAA3O,EAA6O,KAA7O,EAAmP,OAAnP,EAA2P,SAA3P,EAAqQ,OAArQ,EAA6Q,SAA7Q,EAAuR,GAAvR,EAA2R,SAA3R,EAAqS,SAArS,EAA+S,SAA/S,EAAyT,SAAzT,EAAmU,KAAnU,EAAyU,SAAzU,EAAmV,OAAnV,EAA2V,OAA3V,EAAmW,SAAnW,EAA6W,KAA7W,EAAmX,GAAnX,EAAuX,SAAvX,EAAiY,OAAjY,EAAyY,SAAzY,EAAmZ,OAAnZ,EAA2Z,SAA3Z,EAAqa,SAAra,EAA+a,SAA/a,EAAyb,KAAzb,EAA+b,OAA/b,EAAuc,SAAvc,EAAid,KAAjd,EAAud,SAAvd,EAAie,SAAje,EAA2e,CAA3e,EAA6e,OAA7e,EAAqf,OAArf,EAA6f,CAA7f,EAA+f,SAA/f,CAAlB;AACA,IAAIC,WAAW,GAAG,CAAC,CAAC,UAAF,EAAa,CAAC,UAAd,EAAyB,MAAzB,EAAgC,QAAhC,EAAyC,QAAzC,EAAkD,IAAlD,EAAuD,CAAC,UAAxD,EAAmE,CAAC,UAApE,EAA+E,CAAC,UAAhF,EAA2F,CAAC,UAA5F,EAAuG,CAAC,UAAxG,EAAmH,CAAC,UAApH,EAA+H,CAAC,UAAhI,EAA2I,QAA3I,EAAoJ,IAApJ,EAAyJ,CAAC,UAA1J,EAAqK,QAArK,EAA8K,QAA9K,EAAuL,CAAC,UAAxL,EAAmM,CAAnM,EAAqM,CAAC,UAAtM,EAAiN,MAAjN,EAAwN,QAAxN,EAAiO,CAAC,UAAlO,EAA6O,QAA7O,EAAsP,CAAC,UAAvP,EAAkQ,CAAlQ,EAAoQ,QAApQ,EAA6Q,MAA7Q,EAAoR,CAAC,UAArR,EAAgS,CAAC,UAAjS,EAA4S,MAA5S,EAAmT,CAAnT,EAAqT,QAArT,EAA8T,CAAC,UAA/T,EAA0U,QAA1U,EAAmV,CAAC,UAApV,EAA+V,CAAC,UAAhW,EAA2W,CAAC,UAA5W,EAAuX,MAAvX,EAA8X,CAAC,UAA/X,EAA0Y,CAAC,UAA3Y,EAAsZ,IAAtZ,EAA2Z,CAAC,UAA5Z,EAAua,QAAva,EAAgb,IAAhb,EAAqb,MAArb,EAA4b,CAAC,UAA7b,EAAwc,MAAxc,EAA+c,CAAC,UAAhd,EAA2d,QAA3d,EAAoe,CAAC,UAAre,EAAgf,QAAhf,EAAyf,CAAC,UAA1f,EAAqgB,CAAC,UAAtgB,EAAihB,QAAjhB,EAA0hB,QAA1hB,EAAmiB,CAAniB,EAAqiB,CAAC,UAAtiB,EAAijB,MAAjjB,EAAwjB,CAAC,UAAzjB,EAAokB,CAAC,UAArkB,EAAglB,CAAC,UAAjlB,EAA4lB,QAA5lB,CAAlB;AACA,IAAIC,WAAW,GAAG,CAAC,KAAD,EAAO,SAAP,EAAiB,CAAjB,EAAmB,SAAnB,EAA6B,SAA7B,EAAuC,CAAvC,EAAyC,OAAzC,EAAiD,SAAjD,EAA2D,OAA3D,EAAmE,SAAnE,EAA6E,SAA7E,EAAuF,OAAvF,EAA+F,SAA/F,EAAyG,OAAzG,EAAiH,SAAjH,EAA2H,KAA3H,EAAiI,SAAjI,EAA2I,GAA3I,EAA+I,SAA/I,EAAyJ,KAAzJ,EAA+J,OAA/J,EAAuK,SAAvK,EAAiL,SAAjL,EAA2L,OAA3L,EAAmM,SAAnM,EAA6M,OAA7M,EAAqN,OAArN,EAA6N,SAA7N,EAAuO,GAAvO,EAA2O,SAA3O,EAAqP,KAArP,EAA2P,SAA3P,EAAqQ,SAArQ,EAA+Q,SAA/Q,EAAyR,OAAzR,EAAiS,KAAjS,EAAuS,OAAvS,EAA+S,SAA/S,EAAyT,SAAzT,EAAmU,CAAnU,EAAqU,KAArU,EAA2U,OAA3U,EAAmV,SAAnV,EAA6V,SAA7V,EAAuW,SAAvW,EAAiX,KAAjX,EAAuX,CAAvX,EAAyX,SAAzX,EAAmY,SAAnY,EAA6Y,OAA7Y,EAAqZ,SAArZ,EAA+Z,SAA/Z,EAAya,GAAza,EAA6a,OAA7a,EAAqb,OAArb,EAA6b,SAA7b,EAAuc,SAAvc,EAAid,SAAjd,EAA2d,KAA3d,EAAie,SAAje,EAA2e,OAA3e,EAAmf,GAAnf,EAAuf,SAAvf,EAAigB,OAAjgB,CAAlB;AACA,IAAIC,WAAW,GAAG,CAAC,QAAD,EAAU,MAAV,EAAiB,MAAjB,EAAwB,IAAxB,EAA6B,QAA7B,EAAsC,QAAtC,EAA+C,QAA/C,EAAwD,MAAxD,EAA+D,CAA/D,EAAiE,QAAjE,EAA0E,QAA1E,EAAmF,QAAnF,EAA4F,IAA5F,EAAiG,CAAjG,EAAmG,QAAnG,EAA4G,QAA5G,EAAqH,GAArH,EAAyH,MAAzH,EAAgI,QAAhI,EAAyI,QAAzI,EAAkJ,IAAlJ,EAAuJ,QAAvJ,EAAgK,MAAhK,EAAuK,MAAvK,EAA8K,QAA9K,EAAuL,GAAvL,EAA2L,MAA3L,EAAkM,QAAlM,EAA2M,MAA3M,EAAkN,QAAlN,EAA2N,QAA3N,EAAoO,IAApO,EAAyO,QAAzO,EAAkP,QAAlP,EAA2P,QAA3P,EAAoQ,QAApQ,EAA6Q,IAA7Q,EAAkR,CAAlR,EAAoR,CAApR,EAAsR,QAAtR,EAA+R,MAA/R,EAAsS,QAAtS,EAA+S,QAA/S,EAAwT,GAAxT,EAA4T,QAA5T,EAAqU,MAArU,EAA4U,MAA5U,EAAmV,IAAnV,EAAwV,QAAxV,EAAiW,IAAjW,EAAsW,GAAtW,EAA0W,MAA1W,EAAiX,QAAjX,EAA0X,MAA1X,EAAiY,QAAjY,EAA0Y,QAA1Y,EAAmZ,MAAnZ,EAA0Z,MAA1Z,EAAia,QAAja,EAA0a,QAA1a,EAAmb,IAAnb,EAAwb,QAAxb,EAAic,MAAjc,EAAwc,QAAxc,CAAlB;AACA,IAAIC,WAAW,GAAG,CAAC,KAAD,EAAO,SAAP,EAAiB,SAAjB,EAA2B,UAA3B,EAAsC,OAAtC,EAA8C,KAA9C,EAAoD,UAApD,EAA+D,SAA/D,EAAyE,UAAzE,EAAoF,OAApF,EAA4F,SAA5F,EAAsG,UAAtG,EAAiH,UAAjH,EAA4H,UAA5H,EAAuI,OAAvI,EAA+I,UAA/I,EAA0J,SAA1J,EAAoK,UAApK,EAA+K,UAA/K,EAA0L,CAA1L,EAA4L,UAA5L,EAAuM,UAAvM,EAAkN,UAAlN,EAA6N,SAA7N,EAAuO,UAAvO,EAAkP,UAAlP,EAA6P,CAA7P,EAA+P,UAA/P,EAA0Q,SAA1Q,EAAoR,SAApR,EAA8R,UAA9R,EAAyS,OAAzS,EAAiT,OAAjT,EAAyT,UAAzT,EAAoU,KAApU,EAA0U,SAA1U,EAAoV,UAApV,EAA+V,SAA/V,EAAyW,UAAzW,EAAoX,UAApX,EAA+X,SAA/X,EAAyY,UAAzY,EAAoZ,UAApZ,EAA+Z,SAA/Z,EAAya,UAAza,EAAob,KAApb,EAA0b,SAA1b,EAAoc,UAApc,EAA+c,UAA/c,EAA0d,OAA1d,EAAke,UAAle,EAA6e,UAA7e,EAAwf,SAAxf,EAAkgB,CAAlgB,EAAogB,UAApgB,EAA+gB,UAA/gB,EAA0hB,OAA1hB,EAAkiB,SAAliB,EAA4iB,UAA5iB,EAAujB,OAAvjB,EAA+jB,CAA/jB,EAAikB,UAAjkB,EAA4kB,SAA5kB,EAAslB,UAAtlB,CAAlB;AACA,IAAIC,WAAW,GAAG,CAAC,UAAD,EAAY,UAAZ,EAAuB,MAAvB,EAA8B,UAA9B,EAAyC,UAAzC,EAAoD,IAApD,EAAyD,UAAzD,EAAoE,QAApE,EAA6E,UAA7E,EAAwF,QAAxF,EAAiG,QAAjG,EAA0G,UAA1G,EAAqH,QAArH,EAA8H,UAA9H,EAAyI,UAAzI,EAAoJ,MAApJ,EAA2J,CAA3J,EAA6J,QAA7J,EAAsK,UAAtK,EAAiL,MAAjL,EAAwL,QAAxL,EAAiM,UAAjM,EAA4M,IAA5M,EAAiN,UAAjN,EAA4N,UAA5N,EAAuO,CAAvO,EAAyO,QAAzO,EAAkP,UAAlP,EAA6P,MAA7P,EAAoQ,QAApQ,EAA6Q,UAA7Q,EAAwR,UAAxR,EAAmS,UAAnS,EAA8S,IAA9S,EAAmT,UAAnT,EAA8T,QAA9T,EAAuU,UAAvU,EAAkV,QAAlV,EAA2V,MAA3V,EAAkW,UAAlW,EAA6W,QAA7W,EAAsX,UAAtX,EAAiY,UAAjY,EAA4Y,MAA5Y,EAAmZ,UAAnZ,EAA8Z,UAA9Z,EAAya,QAAza,EAAkb,UAAlb,EAA6b,QAA7b,EAAsc,UAAtc,EAAid,CAAjd,EAAmd,UAAnd,EAA8d,IAA9d,EAAme,MAAne,EAA0e,UAA1e,EAAqf,QAArf,EAA8f,MAA9f,EAAqgB,QAArgB,EAA8gB,UAA9gB,EAAyhB,CAAzhB,EAA2hB,UAA3hB,EAAsiB,UAAtiB,EAAijB,QAAjjB,EAA0jB,UAA1jB,CAAlB;AACA,IAAIC,WAAW,GAAG,CAAC,QAAD,EAAU,SAAV,EAAoB,SAApB,EAA8B,CAA9B,EAAgC,KAAhC,EAAsC,SAAtC,EAAgD,QAAhD,EAAyD,SAAzD,EAAmE,SAAnE,EAA6E,QAA7E,EAAsF,CAAtF,EAAwF,SAAxF,EAAkG,GAAlG,EAAsG,SAAtG,EAAgH,SAAhH,EAA0H,KAA1H,EAAgI,SAAhI,EAA0I,QAA1I,EAAmJ,QAAnJ,EAA4J,SAA5J,EAAsK,SAAtK,EAAgL,SAAhL,EAA0L,SAA1L,EAAoM,QAApM,EAA6M,SAA7M,EAAuN,KAAvN,EAA6N,KAA7N,EAAmO,SAAnO,EAA6O,QAA7O,EAAsP,GAAtP,EAA0P,SAA1P,EAAoQ,QAApQ,EAA6Q,SAA7Q,EAAuR,QAAvR,EAAgS,QAAhS,EAAyS,SAAzS,EAAmT,SAAnT,EAA6T,SAA7T,EAAuU,SAAvU,EAAiV,GAAjV,EAAqV,QAArV,EAA8V,SAA9V,EAAwW,SAAxW,EAAkX,QAAlX,EAA2X,SAA3X,EAAqY,KAArY,EAA2Y,QAA3Y,EAAoZ,SAApZ,EAA8Z,KAA9Z,EAAoa,SAApa,EAA8a,SAA9a,EAAwb,SAAxb,EAAkc,QAAlc,EAA2c,CAA3c,EAA6c,GAA7c,EAAid,SAAjd,EAA2d,CAA3d,EAA6d,QAA7d,EAAse,SAAte,EAAgf,KAAhf,EAAsf,SAAtf,EAAggB,SAAhgB,EAA0gB,KAA1gB,EAAghB,QAAhhB,CAAlB;AACA,IAAIC,WAAW,GAAG,CAAC,UAAD,EAAY,MAAZ,EAAmB,OAAnB,EAA2B,UAA3B,EAAsC,UAAtC,EAAiD,UAAjD,EAA4D,IAA5D,EAAiE,UAAjE,EAA4E,OAA5E,EAAoF,UAApF,EAA+F,UAA/F,EAA0G,OAA1G,EAAkH,UAAlH,EAA6H,OAA7H,EAAqI,MAArI,EAA4I,IAA5I,EAAiJ,UAAjJ,EAA4J,UAA5J,EAAuK,UAAvK,EAAkL,MAAlL,EAAyL,OAAzL,EAAiM,OAAjM,EAAyM,UAAzM,EAAoN,UAApN,EAA+N,MAA/N,EAAsO,CAAtO,EAAwO,CAAxO,EAA0O,UAA1O,EAAqP,UAArP,EAAgQ,UAAhQ,EAA2Q,OAA3Q,EAAmR,OAAnR,EAA2R,OAA3R,EAAmS,OAAnS,EAA2S,UAA3S,EAAsT,MAAtT,EAA6T,IAA7T,EAAkU,UAAlU,EAA6U,MAA7U,EAAoV,OAApV,EAA4V,UAA5V,EAAuW,IAAvW,EAA4W,UAA5W,EAAuX,UAAvX,EAAkY,UAAlY,EAA6Y,UAA7Y,EAAwZ,OAAxZ,EAAga,UAAha,EAA2a,CAA3a,EAA6a,UAA7a,EAAwb,OAAxb,EAAgc,UAAhc,EAA2c,UAA3c,EAAsd,UAAtd,EAAie,UAAje,EAA4e,CAA5e,EAA8e,UAA9e,EAAyf,OAAzf,EAAigB,OAAjgB,EAAygB,MAAzgB,EAAghB,MAAhhB,EAAuhB,OAAvhB,EAA+hB,UAA/hB,EAA0iB,UAA1iB,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAShB,WAAT,CAAqB7B,GAArB,EAA0B;AACxB,MAAI8C,SAAS,GAAI,CAAC,CAAD,EAAG,GAAH,EAAO,UAAP,EAAkB,UAAlB,EAA6B,OAA7B,EAAqC,OAArC,EAA6C,UAA7C,EAAwD,UAAxD,EAAmE,KAAnE,EAAyE,KAAzE,EAA+E,UAA/E,EAA0F,UAA1F,EAAqG,OAArG,EAA6G,OAA7G,EAAqH,UAArH,EAAgI,UAAhI,CAAjB;AAAA,MACIC,SAAS,GAAI,CAAC,CAAD,EAAG,GAAH,EAAO,QAAP,EAAgB,QAAhB,EAAyB,SAAzB,EAAmC,SAAnC,EAA6C,SAA7C,EAAuD,SAAvD,EAAiE,KAAjE,EAAuE,KAAvE,EAA6E,QAA7E,EAAsF,QAAtF,EAA+F,SAA/F,EAAyG,SAAzG,EAAmH,SAAnH,EAA6H,SAA7H,CADjB;AAAA,MAEIC,SAAS,GAAI,CAAC,CAAD,EAAG,GAAH,EAAO,KAAP,EAAa,KAAb,EAAmB,SAAnB,EAA6B,SAA7B,EAAuC,SAAvC,EAAiD,SAAjD,EAA2D,CAA3D,EAA6D,GAA7D,EAAiE,KAAjE,EAAuE,KAAvE,EAA6E,SAA7E,EAAuF,SAAvF,EAAiG,SAAjG,EAA2G,SAA3G,CAFjB;AAAA,MAGIC,SAAS,GAAI,CAAC,CAAD,EAAG,QAAH,EAAY,SAAZ,EAAsB,SAAtB,EAAgC,MAAhC,EAAuC,QAAvC,EAAgD,SAAhD,EAA0D,SAA1D,EAAoE,OAApE,EAA4E,QAA5E,EAAqF,SAArF,EAA+F,SAA/F,EAAyG,OAAzG,EAAiH,QAAjH,EAA0H,SAA1H,EAAoI,SAApI,CAHjB;AAAA,MAIIC,SAAS,GAAI,CAAC,CAAD,EAAG,OAAH,EAAW,IAAX,EAAgB,OAAhB,EAAwB,CAAxB,EAA0B,OAA1B,EAAkC,IAAlC,EAAuC,OAAvC,EAA+C,MAA/C,EAAsD,OAAtD,EAA8D,MAA9D,EAAqE,OAArE,EAA6E,MAA7E,EAAoF,OAApF,EAA4F,MAA5F,EAAmG,OAAnG,CAJjB;AAAA,MAKIC,SAAS,GAAI,CAAC,CAAD,EAAG,KAAH,EAAS,IAAT,EAAc,KAAd,EAAoB,CAApB,EAAsB,KAAtB,EAA4B,IAA5B,EAAiC,KAAjC,EAAuC,SAAvC,EAAiD,SAAjD,EAA2D,SAA3D,EAAqE,SAArE,EAA+E,SAA/E,EAAyF,SAAzF,EAAmG,SAAnG,EAA6G,SAA7G,CALjB;AAAA,MAMIC,SAAS,GAAI,CAAC,CAAD,EAAG,UAAH,EAAc,OAAd,EAAsB,UAAtB,EAAiC,GAAjC,EAAqC,UAArC,EAAgD,OAAhD,EAAwD,UAAxD,EAAmE,CAAnE,EAAqE,UAArE,EAAgF,OAAhF,EAAwF,UAAxF,EAAmG,GAAnG,EAAuG,UAAvG,EAAkH,OAAlH,EAA0H,UAA1H,CANjB;AAAA,MAOIC,SAAS,GAAI,CAAC,CAAD,EAAG,OAAH,EAAW,KAAX,EAAiB,OAAjB,EAAyB,UAAzB,EAAoC,UAApC,EAA+C,UAA/C,EAA0D,UAA1D,EAAqE,OAArE,EAA6E,OAA7E,EAAqF,OAArF,EAA6F,OAA7F,EAAqG,UAArG,EAAgH,UAAhH,EAA2H,UAA3H,EAAsI,UAAtI,CAPjB;AAAA,MAQIC,SAAS,GAAI,CAAC,CAAD,EAAG,OAAH,EAAW,CAAX,EAAa,OAAb,EAAqB,GAArB,EAAyB,OAAzB,EAAiC,GAAjC,EAAqC,OAArC,EAA6C,SAA7C,EAAuD,SAAvD,EAAiE,SAAjE,EAA2E,SAA3E,EAAqF,SAArF,EAA+F,SAA/F,EAAyG,SAAzG,EAAmH,SAAnH,CARjB;AAAA,MASIC,SAAS,GAAI,CAAC,CAAD,EAAG,UAAH,EAAc,GAAd,EAAkB,UAAlB,EAA6B,CAA7B,EAA+B,UAA/B,EAA0C,GAA1C,EAA8C,UAA9C,EAAyD,KAAzD,EAA+D,UAA/D,EAA0E,KAA1E,EAAgF,UAAhF,EAA2F,KAA3F,EAAiG,UAAjG,EAA4G,KAA5G,EAAkH,UAAlH,CATjB;AAAA,MAUIC,UAAU,GAAG,CAAC,CAAD,EAAG,IAAH,EAAQ,CAAR,EAAU,IAAV,EAAe,QAAf,EAAwB,QAAxB,EAAiC,QAAjC,EAA0C,QAA1C,EAAmD,MAAnD,EAA0D,MAA1D,EAAiE,MAAjE,EAAwE,MAAxE,EAA+E,QAA/E,EAAwF,QAAxF,EAAiG,QAAjG,EAA0G,QAA1G,CAVjB;AAAA,MAWIC,UAAU,GAAG,CAAC,CAAD,EAAG,SAAH,EAAa,KAAb,EAAmB,SAAnB,EAA6B,QAA7B,EAAsC,SAAtC,EAAgD,QAAhD,EAAyD,SAAzD,EAAmE,SAAnE,EAA6E,SAA7E,EAAuF,SAAvF,EAAiG,SAAjG,EAA2G,SAA3G,EAAqH,SAArH,EAA+H,SAA/H,EAAyI,SAAzI,CAXjB;AAAA,MAYIC,UAAU,GAAG,CAAC,CAAD,EAAG,MAAH,EAAU,SAAV,EAAoB,SAApB,EAA8B,OAA9B,EAAsC,OAAtC,EAA8C,SAA9C,EAAwD,SAAxD,EAAkE,IAAlE,EAAuE,MAAvE,EAA8E,SAA9E,EAAwF,SAAxF,EAAkG,OAAlG,EAA0G,OAA1G,EAAkH,SAAlH,EAA4H,SAA5H,CAZjB;AAAA,MAaIC,UAAU,GAAG,CAAC,CAAD,EAAG,GAAH,EAAO,KAAP,EAAa,KAAb,EAAmB,CAAnB,EAAqB,GAArB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,KAA7C,EAAmD,KAAnD,EAAyD,GAAzD,EAA6D,GAA7D,EAAiE,KAAjE,EAAuE,KAAvE,CAbjB,CADwB,CAgBxB;AACA;;AACA,MAAIC,UAAU,GAAG5D,GAAG,CAAC2B,MAAJ,KAAe,CAAf,GAAmB,CAAnB,GAAuB,CAAxC,CAlBwB,CAoBxB;;AACA,MAAIkC,IAAI,GAAG,EAAX,CArBwB,CAuBxB;;AACA,MAAIC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAb;AAEA,MAAIC,CAAC,GAAG,CAAR;AAAA,MAAWC,GAAX;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,UAAnB,EAA+BK,CAAC,EAAhC,EAAoC;AAClC,QAAIC,IAAI,GAAGlE,GAAG,CAACmE,QAAJ,EAAX;AACA,QAAIC,KAAK,GAAGpE,GAAG,CAACmE,QAAJ,EAAZ;AAEAH,IAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,IAAAA,KAAK,IAAIJ,GAAT;AACAE,IAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB;AAEAA,IAAAA,GAAG,GAAG,CAAEI,KAAK,KAAK,CAAC,EAAZ,GAAkBF,IAAnB,IAA2B,UAAjC;AACAA,IAAAA,IAAI,IAAIF,GAAR;AACAI,IAAAA,KAAK,IAAKJ,GAAG,IAAI,CAAC,EAAlB;AAEAA,IAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,IAAAA,KAAK,IAAIJ,GAAT;AACAE,IAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB;AAEAA,IAAAA,GAAG,GAAG,CAAEI,KAAK,KAAK,CAAC,EAAZ,GAAkBF,IAAnB,IAA2B,UAAjC;AACAA,IAAAA,IAAI,IAAIF,GAAR;AACAI,IAAAA,KAAK,IAAKJ,GAAG,IAAI,CAAC,EAAlB;AAEAA,IAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,IAAAA,KAAK,IAAIJ,GAAT;AACAE,IAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB;AAEAA,IAAAA,GAAG,GAAG,CAAEI,KAAK,KAAK,CAAX,GAAgBF,IAAjB,IAAyB,UAA/B;AACAA,IAAAA,IAAI,IAAIF,GAAR;AACAI,IAAAA,KAAK,IAAKJ,GAAG,IAAI,CAAjB;AAEAA,IAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,IAAAA,KAAK,IAAIJ,GAAT;AACAE,IAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB,CA9BkC,CAgClC;;AACAA,IAAAA,GAAG,GAAIE,IAAI,IAAI,CAAT,GAAgBE,KAAK,KAAK,EAAX,GAAiB,UAAtC,CAjCkC,CAmClC;;AACAF,IAAAA,IAAI,GAAKE,KAAK,IAAI,EAAV,GAAkBA,KAAK,IAAI,CAAV,GAAe,QAAhC,GACJA,KAAK,KAAK,CAAX,GAAgB,MADX,GACuBA,KAAK,KAAK,EAAX,GAAiB,IAD/C;AAEAA,IAAAA,KAAK,GAAGJ,GAAR,CAtCkC,CAwClC;;AACA,SAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,MAAM,CAACnC,MAA1B,EAAkC,EAAE0C,CAApC,EAAuC;AACrC;AACA,UAAGP,MAAM,CAACO,CAAD,CAAT,EAAc;AACZH,QAAAA,IAAI,GAAIA,IAAI,IAAI,CAAT,GAAeA,IAAI,KAAK,EAA/B;AACAE,QAAAA,KAAK,GAAIA,KAAK,IAAI,CAAV,GAAgBA,KAAK,KAAK,EAAlC;AACD,OAHD,MAGO;AACLF,QAAAA,IAAI,GAAIA,IAAI,IAAI,CAAT,GAAeA,IAAI,KAAK,EAA/B;AACAE,QAAAA,KAAK,GAAIA,KAAK,IAAI,CAAV,GAAgBA,KAAK,KAAK,EAAlC;AACD;;AACDF,MAAAA,IAAI,IAAI,CAAC,GAAT;AACAE,MAAAA,KAAK,IAAI,CAAC,GAAV,CAVqC,CAYrC;AACA;AACA;AACA;AACA;;AACA,UAAIE,OAAO,GACTxB,SAAS,CAACoB,IAAI,KAAK,EAAV,CAAT,GAAyBnB,SAAS,CAAEmB,IAAI,KAAK,EAAV,GAAgB,GAAjB,CAAlC,GACAlB,SAAS,CAAEkB,IAAI,KAAK,EAAV,GAAgB,GAAjB,CADT,GACiCjB,SAAS,CAAEiB,IAAI,KAAK,EAAV,GAAgB,GAAjB,CAD1C,GAEAhB,SAAS,CAAEgB,IAAI,KAAK,EAAV,GAAgB,GAAjB,CAFT,GAEiCf,SAAS,CAAEe,IAAI,KAAK,CAAV,GAAe,GAAhB,CAF1C,GAGAd,SAAS,CAAEc,IAAI,KAAK,CAAV,GAAe,GAAhB,CAJX;AAKA,UAAIK,QAAQ,GACVlB,SAAS,CAACe,KAAK,KAAK,EAAX,CAAT,GAA0Bd,SAAS,CAAEc,KAAK,KAAK,EAAX,GAAiB,GAAlB,CAAnC,GACAb,SAAS,CAAEa,KAAK,KAAK,EAAX,GAAiB,GAAlB,CADT,GACkCZ,UAAU,CAAEY,KAAK,KAAK,EAAX,GAAiB,GAAlB,CAD5C,GAEAX,UAAU,CAAEW,KAAK,KAAK,EAAX,GAAiB,GAAlB,CAFV,GAEmCV,UAAU,CAAEU,KAAK,KAAK,CAAX,GAAgB,GAAjB,CAF7C,GAGAT,UAAU,CAAES,KAAK,KAAK,CAAX,GAAgB,GAAjB,CAJZ;AAKAJ,MAAAA,GAAG,GAAG,CAAEO,QAAQ,KAAK,EAAd,GAAoBD,OAArB,IAAgC,UAAtC;AACAT,MAAAA,IAAI,CAACE,CAAC,EAAF,CAAJ,GAAYO,OAAO,GAAGN,GAAtB;AACAH,MAAAA,IAAI,CAACE,CAAC,EAAF,CAAJ,GAAYQ,QAAQ,GAAIP,GAAG,IAAI,EAA/B;AACD;AACF;;AAED,SAAOH,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS3C,YAAT,CAAsB2C,IAAtB,EAA4BW,KAA5B,EAAmCtE,MAAnC,EAA2CI,OAA3C,EAAoD;AAClD;AACA,MAAIsD,UAAU,GAAGC,IAAI,CAAClC,MAAL,KAAgB,EAAhB,GAAqB,CAArB,GAAyB,CAA1C;AACA,MAAI8C,OAAJ;;AACA,MAAGb,UAAU,KAAK,CAAlB,EAAqB;AACnBa,IAAAA,OAAO,GAAGnE,OAAO,GAAG,CAAC,EAAD,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAH,GAAkB,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,CAAnC;AACD,GAFD,MAEO;AACLmE,IAAAA,OAAO,GAAInE,OAAO,GAChB,CAAC,EAAD,EAAK,EAAL,EAAS,CAAC,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,CAAC,CAA7B,EAAgC,CAAC,CAAjC,CADgB,GAEhB,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,EAAf,EAAmB,CAAC,CAApB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,CAA/B,CAFF;AAGD;;AAED,MAAI0D,GAAJ;AAEA,MAAIE,IAAI,GAAGM,KAAK,CAAC,CAAD,CAAhB;AACA,MAAIJ,KAAK,GAAGI,KAAK,CAAC,CAAD,CAAjB,CAfkD,CAiBlD;;AACAR,EAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,EAAAA,KAAK,IAAIJ,GAAT;AACAE,EAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB;AAEAA,EAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,EAAV,GAAgBE,KAAjB,IAA0B,UAAhC;AACAA,EAAAA,KAAK,IAAIJ,GAAT;AACAE,EAAAA,IAAI,IAAKF,GAAG,IAAI,EAAhB;AAEAA,EAAAA,GAAG,GAAG,CAAEI,KAAK,KAAK,CAAX,GAAgBF,IAAjB,IAAyB,UAA/B;AACAA,EAAAA,IAAI,IAAIF,GAAR;AACAI,EAAAA,KAAK,IAAKJ,GAAG,IAAI,CAAjB;AAEAA,EAAAA,GAAG,GAAG,CAAEI,KAAK,KAAK,CAAX,GAAgBF,IAAjB,IAAyB,UAA/B;AACAA,EAAAA,IAAI,IAAIF,GAAR;AACAI,EAAAA,KAAK,IAAKJ,GAAG,IAAI,CAAjB;AAEAA,EAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,EAAAA,KAAK,IAAIJ,GAAT;AACAE,EAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB,CApCkD,CAsClD;;AACAE,EAAAA,IAAI,GAAKA,IAAI,IAAI,CAAT,GAAeA,IAAI,KAAK,EAAhC;AACAE,EAAAA,KAAK,GAAKA,KAAK,IAAI,CAAV,GAAgBA,KAAK,KAAK,EAAnC;;AAEA,OAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,UAAnB,EAA+BK,CAAC,IAAI,CAApC,EAAuC;AACrC,QAAIS,OAAO,GAAGD,OAAO,CAACR,CAAC,GAAG,CAAL,CAArB;AACA,QAAIU,OAAO,GAAGF,OAAO,CAACR,CAAC,GAAG,CAAL,CAArB,CAFqC,CAIrC;;AACA,SAAI,IAAII,CAAC,GAAGI,OAAO,CAACR,CAAD,CAAnB,EAAwBI,CAAC,IAAIK,OAA7B,EAAsCL,CAAC,IAAIM,OAA3C,EAAoD;AAClD,UAAIC,MAAM,GAAGR,KAAK,GAAGP,IAAI,CAACQ,CAAD,CAAzB;AACA,UAAIQ,MAAM,GAAG,CAAET,KAAK,KAAK,CAAX,GAAiBA,KAAK,IAAI,EAA3B,IAAkCP,IAAI,CAACQ,CAAC,GAAG,CAAL,CAAnD,CAFkD,CAIlD;;AACAL,MAAAA,GAAG,GAAGE,IAAN;AACAA,MAAAA,IAAI,GAAGE,KAAP;AACAA,MAAAA,KAAK,GAAGJ,GAAG,IACTzB,WAAW,CAAEqC,MAAM,KAAK,EAAZ,GAAkB,IAAnB,CAAX,GACAnC,WAAW,CAAEmC,MAAM,KAAK,EAAZ,GAAkB,IAAnB,CADX,GAEAjC,WAAW,CAAEiC,MAAM,KAAM,CAAb,GAAkB,IAAnB,CAFX,GAGA/B,WAAW,CAAC+B,MAAM,GAAG,IAAV,CAHX,GAIAtC,WAAW,CAAEuC,MAAM,KAAK,EAAZ,GAAkB,IAAnB,CAJX,GAKArC,WAAW,CAAEqC,MAAM,KAAK,EAAZ,GAAkB,IAAnB,CALX,GAMAnC,WAAW,CAAEmC,MAAM,KAAM,CAAb,GAAkB,IAAnB,CANX,GAOAjC,WAAW,CAACiC,MAAM,GAAG,IAAV,CARF,CAAX;AASD,KArBoC,CAsBrC;;;AACAb,IAAAA,GAAG,GAAGE,IAAN;AACAA,IAAAA,IAAI,GAAGE,KAAP;AACAA,IAAAA,KAAK,GAAGJ,GAAR;AACD,GApEiD,CAsElD;;;AACAE,EAAAA,IAAI,GAAKA,IAAI,KAAK,CAAV,GAAgBA,IAAI,IAAI,EAAhC;AACAE,EAAAA,KAAK,GAAKA,KAAK,KAAK,CAAX,GAAiBA,KAAK,IAAI,EAAnC,CAxEkD,CA0ElD;;AACAJ,EAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,EAAAA,KAAK,IAAIJ,GAAT;AACAE,EAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB;AAEAA,EAAAA,GAAG,GAAG,CAAEI,KAAK,KAAK,CAAX,GAAgBF,IAAjB,IAAyB,UAA/B;AACAA,EAAAA,IAAI,IAAIF,GAAR;AACAI,EAAAA,KAAK,IAAKJ,GAAG,IAAI,CAAjB;AAEAA,EAAAA,GAAG,GAAG,CAAEI,KAAK,KAAK,CAAX,GAAgBF,IAAjB,IAAyB,UAA/B;AACAA,EAAAA,IAAI,IAAIF,GAAR;AACAI,EAAAA,KAAK,IAAKJ,GAAG,IAAI,CAAjB;AAEAA,EAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,EAAV,GAAgBE,KAAjB,IAA0B,UAAhC;AACAA,EAAAA,KAAK,IAAIJ,GAAT;AACAE,EAAAA,IAAI,IAAKF,GAAG,IAAI,EAAhB;AAEAA,EAAAA,GAAG,GAAG,CAAEE,IAAI,KAAK,CAAV,GAAeE,KAAhB,IAAyB,UAA/B;AACAA,EAAAA,KAAK,IAAIJ,GAAT;AACAE,EAAAA,IAAI,IAAKF,GAAG,IAAI,CAAhB;AAEA9D,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYgE,IAAZ;AACAhE,EAAAA,MAAM,CAAC,CAAD,CAAN,GAAYkE,KAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS/D,aAAT,CAAuBkB,OAAvB,EAAgC;AAC9BA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIpB,IAAI,GAAG,CAACoB,OAAO,CAACpB,IAAR,IAAgB,KAAjB,EAAwB2E,WAAxB,EAAX;AACA,MAAIC,SAAS,GAAG,SAAS5E,IAAzB;AAEA,MAAIC,MAAJ;;AACA,MAAGmB,OAAO,CAACjB,OAAX,EAAoB;AAClBF,IAAAA,MAAM,GAAGV,KAAK,CAACU,MAAN,CAAa4E,cAAb,CAA4BD,SAA5B,EAAuCxD,OAAO,CAACvB,GAA/C,CAAT;AACD,GAFD,MAEO;AACLI,IAAAA,MAAM,GAAGV,KAAK,CAACU,MAAN,CAAa6E,YAAb,CAA0BF,SAA1B,EAAqCxD,OAAO,CAACvB,GAA7C,CAAT;AACD,GAV6B,CAY9B;;;AACA,MAAIO,KAAK,GAAGH,MAAM,CAACG,KAAnB;;AACAH,EAAAA,MAAM,CAACG,KAAP,GAAe,UAASN,EAAT,EAAasB,OAAb,EAAsB;AACnC;AACA,QAAIrB,MAAM,GAAG,IAAb;;AACA,QAAGqB,OAAO,YAAY7B,KAAK,CAAC8B,IAAN,CAAW0D,UAAjC,EAA6C;AAC3ChF,MAAAA,MAAM,GAAGqB,OAAT;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACrB,MAAR,GAAiBA,MAAjB;AACAqB,IAAAA,OAAO,CAACtB,EAAR,GAAaA,EAAb;AACAM,IAAAA,KAAK,CAAC4E,IAAN,CAAW/E,MAAX,EAAmBmB,OAAnB;AACD,GAXD;;AAaA,SAAOnB,MAAP;AACD","sourcesContent":["/**\r\n * DES (Data Encryption Standard) implementation.\r\n *\r\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\r\n * It is based on the BSD-licensed implementation by Paul Tero:\r\n *\r\n * Paul Tero, July 2001\r\n * http://www.tero.co.uk/des/\r\n *\r\n * Optimised for performance with large blocks by\r\n * Michael Hayworth, November 2001\r\n * http://www.netdealing.com\r\n *\r\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n * SUCH DAMAGE.\r\n *\r\n * @author Stefan Siegl\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\r\n */\r\nvar forge = require('./forge');\r\nrequire('./cipher');\r\nrequire('./cipherModes');\r\nrequire('./util');\r\n\r\n/* DES API */\r\nmodule.exports = forge.des = forge.des || {};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n * cipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.startEncrypting = function(key, iv, output, mode) {\r\n  var cipher = _createCipher({\r\n    key: key,\r\n    output: output,\r\n    decrypt: false,\r\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\r\n  });\r\n  cipher.start(iv);\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to encrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.createEncryptionCipher = function(key, mode) {\r\n  return _createCipher({\r\n    key: key,\r\n    output: null,\r\n    decrypt: false,\r\n    mode: mode\r\n  });\r\n};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n * decipher.start({iv: iv});\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n * The output will be stored in the 'output' member of the returned cipher.\r\n *\r\n * The key and iv may be given as binary-encoded strings of bytes or\r\n * byte buffers.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param iv the initialization vector to use.\r\n * @param output the buffer to write to, null to create one.\r\n * @param mode the cipher mode to use (default: 'CBC' if IV is\r\n *          given, 'ECB' if null).\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.startDecrypting = function(key, iv, output, mode) {\r\n  var cipher = _createCipher({\r\n    key: key,\r\n    output: output,\r\n    decrypt: true,\r\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\r\n  });\r\n  cipher.start(iv);\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates an DES cipher object to decrypt data using the given symmetric key.\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param key the symmetric key to use (64 or 192 bits).\r\n * @param mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\r\nforge.des.createDecryptionCipher = function(key, mode) {\r\n  return _createCipher({\r\n    key: key,\r\n    output: null,\r\n    decrypt: true,\r\n    mode: mode\r\n  });\r\n};\r\n\r\n/**\r\n * Creates a new DES cipher algorithm object.\r\n *\r\n * @param name the name of the algorithm.\r\n * @param mode the mode factory function.\r\n *\r\n * @return the DES algorithm object.\r\n */\r\nforge.des.Algorithm = function(name, mode) {\r\n  var self = this;\r\n  self.name = name;\r\n  self.mode = new mode({\r\n    blockSize: 8,\r\n    cipher: {\r\n      encrypt: function(inBlock, outBlock) {\r\n        return _updateBlock(self._keys, inBlock, outBlock, false);\r\n      },\r\n      decrypt: function(inBlock, outBlock) {\r\n        return _updateBlock(self._keys, inBlock, outBlock, true);\r\n      }\r\n    }\r\n  });\r\n  self._init = false;\r\n};\r\n\r\n/**\r\n * Initializes this DES algorithm by expanding its key.\r\n *\r\n * @param options the options to use.\r\n *          key the key to use with this algorithm.\r\n *          decrypt true if the algorithm should be initialized for decryption,\r\n *            false for encryption.\r\n */\r\nforge.des.Algorithm.prototype.initialize = function(options) {\r\n  if(this._init) {\r\n    return;\r\n  }\r\n\r\n  var key = forge.util.createBuffer(options.key);\r\n  if(this.name.indexOf('3DES') === 0) {\r\n    if(key.length() !== 24) {\r\n      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);\r\n    }\r\n  }\r\n\r\n  // do key expansion to 16 or 48 subkeys (single or triple DES)\r\n  this._keys = _createKeys(key);\r\n  this._init = true;\r\n};\r\n\r\n/** Register DES algorithms **/\r\n\r\nregisterAlgorithm('DES-ECB', forge.cipher.modes.ecb);\r\nregisterAlgorithm('DES-CBC', forge.cipher.modes.cbc);\r\nregisterAlgorithm('DES-CFB', forge.cipher.modes.cfb);\r\nregisterAlgorithm('DES-OFB', forge.cipher.modes.ofb);\r\nregisterAlgorithm('DES-CTR', forge.cipher.modes.ctr);\r\n\r\nregisterAlgorithm('3DES-ECB', forge.cipher.modes.ecb);\r\nregisterAlgorithm('3DES-CBC', forge.cipher.modes.cbc);\r\nregisterAlgorithm('3DES-CFB', forge.cipher.modes.cfb);\r\nregisterAlgorithm('3DES-OFB', forge.cipher.modes.ofb);\r\nregisterAlgorithm('3DES-CTR', forge.cipher.modes.ctr);\r\n\r\nfunction registerAlgorithm(name, mode) {\r\n  var factory = function() {\r\n    return new forge.des.Algorithm(name, mode);\r\n  };\r\n  forge.cipher.registerAlgorithm(name, factory);\r\n}\r\n\r\n/** DES implementation **/\r\n\r\nvar spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];\r\nvar spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];\r\nvar spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];\r\nvar spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];\r\nvar spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];\r\nvar spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];\r\nvar spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];\r\nvar spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];\r\n\r\n/**\r\n * Create necessary sub keys.\r\n *\r\n * @param key the 64-bit or 192-bit key.\r\n *\r\n * @return the expanded keys.\r\n */\r\nfunction _createKeys(key) {\r\n  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],\r\n      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],\r\n      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],\r\n      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],\r\n      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],\r\n      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],\r\n      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],\r\n      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],\r\n      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],\r\n      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],\r\n      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],\r\n      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],\r\n      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],\r\n      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];\r\n\r\n  // how many iterations (1 for des, 3 for triple des)\r\n  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\r\n  var iterations = key.length() > 8 ? 3 : 1;\r\n\r\n  // stores the return keys\r\n  var keys = [];\r\n\r\n  // now define the left shifts which need to be done\r\n  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\r\n\r\n  var n = 0, tmp;\r\n  for(var j = 0; j < iterations; j++) {\r\n    var left = key.getInt32();\r\n    var right = key.getInt32();\r\n\r\n    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\r\n    right ^= tmp;\r\n    left ^= (tmp << 4);\r\n\r\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\r\n    left ^= tmp;\r\n    right ^= (tmp << -16);\r\n\r\n    tmp = ((left >>> 2) ^ right) & 0x33333333;\r\n    right ^= tmp;\r\n    left ^= (tmp << 2);\r\n\r\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\r\n    left ^= tmp;\r\n    right ^= (tmp << -16);\r\n\r\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n    right ^= tmp;\r\n    left ^= (tmp << 1);\r\n\r\n    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\r\n    left ^= tmp;\r\n    right ^= (tmp << 8);\r\n\r\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n    right ^= tmp;\r\n    left ^= (tmp << 1);\r\n\r\n    // right needs to be shifted and OR'd with last four bits of left\r\n    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);\r\n\r\n    // left needs to be put upside down\r\n    left = ((right << 24) | ((right << 8) & 0xff0000) |\r\n      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));\r\n    right = tmp;\r\n\r\n    // now go through and perform these shifts on the left and right keys\r\n    for(var i = 0; i < shifts.length; ++i) {\r\n      //shift the keys either one or two bits to the left\r\n      if(shifts[i]) {\r\n        left = (left << 2) | (left >>> 26);\r\n        right = (right << 2) | (right >>> 26);\r\n      } else {\r\n        left = (left << 1) | (left >>> 27);\r\n        right = (right << 1) | (right >>> 27);\r\n      }\r\n      left &= -0xf;\r\n      right &= -0xf;\r\n\r\n      // now apply PC-2, in such a way that E is easier when encrypting or\r\n      // decrypting this conversion will look like PC-2 except only the last 6\r\n      // bits of each byte are used rather than 48 consecutive bits and the\r\n      // order of lines will be according to how the S selection functions will\r\n      // be applied: S2, S4, S6, S8, S1, S3, S5, S7\r\n      var lefttmp = (\r\n        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |\r\n        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |\r\n        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |\r\n        pc2bytes6[(left >>> 4) & 0xf]);\r\n      var righttmp = (\r\n        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |\r\n        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |\r\n        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |\r\n        pc2bytes13[(right >>> 4) & 0xf]);\r\n      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;\r\n      keys[n++] = lefttmp ^ tmp;\r\n      keys[n++] = righttmp ^ (tmp << 16);\r\n    }\r\n  }\r\n\r\n  return keys;\r\n}\r\n\r\n/**\r\n * Updates a single block (1 byte) using DES. The update will either\r\n * encrypt or decrypt the block.\r\n *\r\n * @param keys the expanded keys.\r\n * @param input the input block (an array of 32-bit words).\r\n * @param output the updated output block.\r\n * @param decrypt true to decrypt the block, false to encrypt it.\r\n */\r\nfunction _updateBlock(keys, input, output, decrypt) {\r\n  // set up loops for single or triple DES\r\n  var iterations = keys.length === 32 ? 3 : 9;\r\n  var looping;\r\n  if(iterations === 3) {\r\n    looping = decrypt ? [30, -2, -2] : [0, 32, 2];\r\n  } else {\r\n    looping = (decrypt ?\r\n      [94, 62, -2, 32, 64, 2, 30, -2, -2] :\r\n      [0, 32, 2, 62, 30, -2, 64, 96, 2]);\r\n  }\r\n\r\n  var tmp;\r\n\r\n  var left = input[0];\r\n  var right = input[1];\r\n\r\n  // first each 64 bit chunk of the message must be permuted according to IP\r\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\r\n  right ^= tmp;\r\n  left ^= (tmp << 4);\r\n\r\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\r\n  right ^= tmp;\r\n  left ^= (tmp << 16);\r\n\r\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\r\n  left ^= tmp;\r\n  right ^= (tmp << 2);\r\n\r\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\r\n  left ^= tmp;\r\n  right ^= (tmp << 8);\r\n\r\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n  right ^= tmp;\r\n  left ^= (tmp << 1);\r\n\r\n  // rotate left 1 bit\r\n  left = ((left << 1) | (left >>> 31));\r\n  right = ((right << 1) | (right >>> 31));\r\n\r\n  for(var j = 0; j < iterations; j += 3) {\r\n    var endloop = looping[j + 1];\r\n    var loopinc = looping[j + 2];\r\n\r\n    // now go through and perform the encryption or decryption\r\n    for(var i = looping[j]; i != endloop; i += loopinc) {\r\n      var right1 = right ^ keys[i];\r\n      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\r\n\r\n      // passing these bytes through the S selection functions\r\n      tmp = left;\r\n      left = right;\r\n      right = tmp ^ (\r\n        spfunction2[(right1 >>> 24) & 0x3f] |\r\n        spfunction4[(right1 >>> 16) & 0x3f] |\r\n        spfunction6[(right1 >>>  8) & 0x3f] |\r\n        spfunction8[right1 & 0x3f] |\r\n        spfunction1[(right2 >>> 24) & 0x3f] |\r\n        spfunction3[(right2 >>> 16) & 0x3f] |\r\n        spfunction5[(right2 >>>  8) & 0x3f] |\r\n        spfunction7[right2 & 0x3f]);\r\n    }\r\n    // unreverse left and right\r\n    tmp = left;\r\n    left = right;\r\n    right = tmp;\r\n  }\r\n\r\n  // rotate right 1 bit\r\n  left = ((left >>> 1) | (left << 31));\r\n  right = ((right >>> 1) | (right << 31));\r\n\r\n  // now perform IP-1, which is IP in the opposite direction\r\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\r\n  right ^= tmp;\r\n  left ^= (tmp << 1);\r\n\r\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\r\n  left ^= tmp;\r\n  right ^= (tmp << 8);\r\n\r\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\r\n  left ^= tmp;\r\n  right ^= (tmp << 2);\r\n\r\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\r\n  right ^= tmp;\r\n  left ^= (tmp << 16);\r\n\r\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\r\n  right ^= tmp;\r\n  left ^= (tmp << 4);\r\n\r\n  output[0] = left;\r\n  output[1] = right;\r\n}\r\n\r\n/**\r\n * Deprecated. Instead, use:\r\n *\r\n * forge.cipher.createCipher('DES-<mode>', key);\r\n * forge.cipher.createDecipher('DES-<mode>', key);\r\n *\r\n * Creates a deprecated DES cipher object. This object's mode will default to\r\n * CBC (cipher-block-chaining).\r\n *\r\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\r\n *\r\n * @param options the options to use.\r\n *          key the symmetric key to use (64 or 192 bits).\r\n *          output the buffer to write to.\r\n *          decrypt true for decryption, false for encryption.\r\n *          mode the cipher mode to use (default: 'CBC').\r\n *\r\n * @return the cipher.\r\n */\r\nfunction _createCipher(options) {\r\n  options = options || {};\r\n  var mode = (options.mode || 'CBC').toUpperCase();\r\n  var algorithm = 'DES-' + mode;\r\n\r\n  var cipher;\r\n  if(options.decrypt) {\r\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\r\n  } else {\r\n    cipher = forge.cipher.createCipher(algorithm, options.key);\r\n  }\r\n\r\n  // backwards compatible start API\r\n  var start = cipher.start;\r\n  cipher.start = function(iv, options) {\r\n    // backwards compatibility: support second arg as output buffer\r\n    var output = null;\r\n    if(options instanceof forge.util.ByteBuffer) {\r\n      output = options;\r\n      options = {};\r\n    }\r\n    options = options || {};\r\n    options.output = output;\r\n    options.iv = iv;\r\n    start.call(cipher, options);\r\n  };\r\n\r\n  return cipher;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}