{"ast":null,"code":"'use strict'; // A linked list to keep track of recently-used-ness\n\nconst Yallist = require('yallist');\n\nconst MAX = Symbol('max');\nconst LENGTH = Symbol('length');\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator');\nconst ALLOW_STALE = Symbol('allowStale');\nconst MAX_AGE = Symbol('maxAge');\nconst DISPOSE = Symbol('dispose');\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');\nconst LRU_LIST = Symbol('lruList');\nconst CACHE = Symbol('cache');\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');\n\nconst naiveLength = () => 1; // lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\n\n\nclass LRUCache {\n  constructor(options) {\n    if (typeof options === 'number') options = {\n      max: options\n    };\n    if (!options) options = {};\n    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number'); // Kind of weird to have a default max of Infinity, but oh well.\n\n    const max = this[MAX] = options.max || Infinity;\n    const lc = options.length || naiveLength;\n    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;\n    this[ALLOW_STALE] = options.stale || false;\n    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');\n    this[MAX_AGE] = options.maxAge || 0;\n    this[DISPOSE] = options.dispose;\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n    this.reset();\n  } // resize the cache when the max changes.\n\n\n  set max(mL) {\n    if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');\n    this[MAX] = mL || Infinity;\n    trim(this);\n  }\n\n  get max() {\n    return this[MAX];\n  }\n\n  set allowStale(allowStale) {\n    this[ALLOW_STALE] = !!allowStale;\n  }\n\n  get allowStale() {\n    return this[ALLOW_STALE];\n  }\n\n  set maxAge(mA) {\n    if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');\n    this[MAX_AGE] = mA;\n    trim(this);\n  }\n\n  get maxAge() {\n    return this[MAX_AGE];\n  } // resize the cache when the lengthCalculator changes.\n\n\n  set lengthCalculator(lC) {\n    if (typeof lC !== 'function') lC = naiveLength;\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC;\n      this[LENGTH] = 0;\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n        this[LENGTH] += hit.length;\n      });\n    }\n\n    trim(this);\n  }\n\n  get lengthCalculator() {\n    return this[LENGTH_CALCULATOR];\n  }\n\n  get length() {\n    return this[LENGTH];\n  }\n\n  get itemCount() {\n    return this[LRU_LIST].length;\n  }\n\n  rforEach(fn, thisp) {\n    thisp = thisp || this;\n\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev;\n      forEachStep(this, fn, walker, thisp);\n      walker = prev;\n    }\n  }\n\n  forEach(fn, thisp) {\n    thisp = thisp || this;\n\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next;\n      forEachStep(this, fn, walker, thisp);\n      walker = next;\n    }\n  }\n\n  keys() {\n    return this[LRU_LIST].toArray().map(k => k.key);\n  }\n\n  values() {\n    return this[LRU_LIST].toArray().map(k => k.value);\n  }\n\n  reset() {\n    if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));\n    }\n\n    this[CACHE] = new Map(); // hash of items by key\n\n    this[LRU_LIST] = new Yallist(); // list of items in order of use recency\n\n    this[LENGTH] = 0; // length of items in the list\n  }\n\n  dump() {\n    return this[LRU_LIST].map(hit => isStale(this, hit) ? false : {\n      k: hit.key,\n      v: hit.value,\n      e: hit.now + (hit.maxAge || 0)\n    }).toArray().filter(h => h);\n  }\n\n  dumpLru() {\n    return this[LRU_LIST];\n  }\n\n  set(key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE];\n    if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');\n    const now = maxAge ? Date.now() : 0;\n    const len = this[LENGTH_CALCULATOR](value, key);\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key));\n        return false;\n      }\n\n      const node = this[CACHE].get(key);\n      const item = node.value; // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);\n      }\n\n      item.now = now;\n      item.maxAge = maxAge;\n      item.value = value;\n      this[LENGTH] += len - item.length;\n      item.length = len;\n      this.get(key);\n      trim(this);\n      return true;\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge); // oversized objects fall out of cache automatically.\n\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE]) this[DISPOSE](key, value);\n      return false;\n    }\n\n    this[LENGTH] += hit.length;\n    this[LRU_LIST].unshift(hit);\n    this[CACHE].set(key, this[LRU_LIST].head);\n    trim(this);\n    return true;\n  }\n\n  has(key) {\n    if (!this[CACHE].has(key)) return false;\n    const hit = this[CACHE].get(key).value;\n    return !isStale(this, hit);\n  }\n\n  get(key) {\n    return get(this, key, true);\n  }\n\n  peek(key) {\n    return get(this, key, false);\n  }\n\n  pop() {\n    const node = this[LRU_LIST].tail;\n    if (!node) return null;\n    del(this, node);\n    return node.value;\n  }\n\n  del(key) {\n    del(this, this[CACHE].get(key));\n  }\n\n  load(arr) {\n    // reset the cache\n    this.reset();\n    const now = Date.now(); // A previous serialized cache has the most recent items first\n\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l];\n      const expiresAt = hit.e || 0;\n      if (expiresAt === 0) // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v);else {\n        const maxAge = expiresAt - now; // dont add already expired items\n\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge);\n        }\n      }\n    }\n  }\n\n  prune() {\n    this[CACHE].forEach((value, key) => get(this, key, false));\n  }\n\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key);\n\n  if (node) {\n    const hit = node.value;\n\n    if (isStale(self, hit)) {\n      del(self, node);\n      if (!self[ALLOW_STALE]) return undefined;\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();\n        self[LRU_LIST].unshiftNode(node);\n      }\n    }\n\n    return hit.value;\n  }\n};\n\nconst isStale = (self, hit) => {\n  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;\n  const diff = Date.now() - hit.now;\n  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];\n};\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev;\n      del(self, walker);\n      walker = prev;\n    }\n  }\n};\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value;\n    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);\n    self[LENGTH] -= hit.length;\n    self[CACHE].delete(hit.key);\n    self[LRU_LIST].removeNode(node);\n  }\n};\n\nclass Entry {\n  constructor(key, value, length, now, maxAge) {\n    this.key = key;\n    this.value = value;\n    this.length = length;\n    this.now = now;\n    this.maxAge = maxAge || 0;\n  }\n\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value;\n\n  if (isStale(self, hit)) {\n    del(self, node);\n    if (!self[ALLOW_STALE]) hit = undefined;\n  }\n\n  if (hit) fn.call(thisp, hit.value, hit.key, self);\n};\n\nmodule.exports = LRUCache;","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/node_modules/lru-cache/index.js"],"names":["Yallist","require","MAX","Symbol","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","LRUCache","constructor","options","max","TypeError","Infinity","lc","length","stale","maxAge","dispose","noDisposeOnSet","updateAgeOnGet","reset","mL","trim","allowStale","mA","lengthCalculator","lC","forEach","hit","value","key","itemCount","rforEach","fn","thisp","walker","tail","prev","forEachStep","head","next","keys","toArray","map","k","values","Map","dump","isStale","v","e","now","filter","h","dumpLru","set","Date","len","has","del","get","node","item","Entry","unshift","peek","pop","load","arr","l","expiresAt","prune","self","doUse","undefined","unshiftNode","diff","delete","removeNode","call","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\n// A linked list to keep track of recently-used-ness\r\nconst Yallist = require('yallist')\r\n\r\nconst MAX = Symbol('max')\r\nconst LENGTH = Symbol('length')\r\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\r\nconst ALLOW_STALE = Symbol('allowStale')\r\nconst MAX_AGE = Symbol('maxAge')\r\nconst DISPOSE = Symbol('dispose')\r\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\r\nconst LRU_LIST = Symbol('lruList')\r\nconst CACHE = Symbol('cache')\r\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\r\n\r\nconst naiveLength = () => 1\r\n\r\n// lruList is a yallist where the head is the youngest\r\n// item, and the tail is the oldest.  the list contains the Hit\r\n// objects as the entries.\r\n// Each Hit object has a reference to its Yallist.Node.  This\r\n// never changes.\r\n//\r\n// cache is a Map (or PseudoMap) that matches the keys to\r\n// the Yallist.Node object.\r\nclass LRUCache {\r\n  constructor (options) {\r\n    if (typeof options === 'number')\r\n      options = { max: options }\r\n\r\n    if (!options)\r\n      options = {}\r\n\r\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\r\n      throw new TypeError('max must be a non-negative number')\r\n    // Kind of weird to have a default max of Infinity, but oh well.\r\n    const max = this[MAX] = options.max || Infinity\r\n\r\n    const lc = options.length || naiveLength\r\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\r\n    this[ALLOW_STALE] = options.stale || false\r\n    if (options.maxAge && typeof options.maxAge !== 'number')\r\n      throw new TypeError('maxAge must be a number')\r\n    this[MAX_AGE] = options.maxAge || 0\r\n    this[DISPOSE] = options.dispose\r\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\r\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\r\n    this.reset()\r\n  }\r\n\r\n  // resize the cache when the max changes.\r\n  set max (mL) {\r\n    if (typeof mL !== 'number' || mL < 0)\r\n      throw new TypeError('max must be a non-negative number')\r\n\r\n    this[MAX] = mL || Infinity\r\n    trim(this)\r\n  }\r\n  get max () {\r\n    return this[MAX]\r\n  }\r\n\r\n  set allowStale (allowStale) {\r\n    this[ALLOW_STALE] = !!allowStale\r\n  }\r\n  get allowStale () {\r\n    return this[ALLOW_STALE]\r\n  }\r\n\r\n  set maxAge (mA) {\r\n    if (typeof mA !== 'number')\r\n      throw new TypeError('maxAge must be a non-negative number')\r\n\r\n    this[MAX_AGE] = mA\r\n    trim(this)\r\n  }\r\n  get maxAge () {\r\n    return this[MAX_AGE]\r\n  }\r\n\r\n  // resize the cache when the lengthCalculator changes.\r\n  set lengthCalculator (lC) {\r\n    if (typeof lC !== 'function')\r\n      lC = naiveLength\r\n\r\n    if (lC !== this[LENGTH_CALCULATOR]) {\r\n      this[LENGTH_CALCULATOR] = lC\r\n      this[LENGTH] = 0\r\n      this[LRU_LIST].forEach(hit => {\r\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\r\n        this[LENGTH] += hit.length\r\n      })\r\n    }\r\n    trim(this)\r\n  }\r\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\r\n\r\n  get length () { return this[LENGTH] }\r\n  get itemCount () { return this[LRU_LIST].length }\r\n\r\n  rforEach (fn, thisp) {\r\n    thisp = thisp || this\r\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\r\n      const prev = walker.prev\r\n      forEachStep(this, fn, walker, thisp)\r\n      walker = prev\r\n    }\r\n  }\r\n\r\n  forEach (fn, thisp) {\r\n    thisp = thisp || this\r\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\r\n      const next = walker.next\r\n      forEachStep(this, fn, walker, thisp)\r\n      walker = next\r\n    }\r\n  }\r\n\r\n  keys () {\r\n    return this[LRU_LIST].toArray().map(k => k.key)\r\n  }\r\n\r\n  values () {\r\n    return this[LRU_LIST].toArray().map(k => k.value)\r\n  }\r\n\r\n  reset () {\r\n    if (this[DISPOSE] &&\r\n        this[LRU_LIST] &&\r\n        this[LRU_LIST].length) {\r\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\r\n    }\r\n\r\n    this[CACHE] = new Map() // hash of items by key\r\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\r\n    this[LENGTH] = 0 // length of items in the list\r\n  }\r\n\r\n  dump () {\r\n    return this[LRU_LIST].map(hit =>\r\n      isStale(this, hit) ? false : {\r\n        k: hit.key,\r\n        v: hit.value,\r\n        e: hit.now + (hit.maxAge || 0)\r\n      }).toArray().filter(h => h)\r\n  }\r\n\r\n  dumpLru () {\r\n    return this[LRU_LIST]\r\n  }\r\n\r\n  set (key, value, maxAge) {\r\n    maxAge = maxAge || this[MAX_AGE]\r\n\r\n    if (maxAge && typeof maxAge !== 'number')\r\n      throw new TypeError('maxAge must be a number')\r\n\r\n    const now = maxAge ? Date.now() : 0\r\n    const len = this[LENGTH_CALCULATOR](value, key)\r\n\r\n    if (this[CACHE].has(key)) {\r\n      if (len > this[MAX]) {\r\n        del(this, this[CACHE].get(key))\r\n        return false\r\n      }\r\n\r\n      const node = this[CACHE].get(key)\r\n      const item = node.value\r\n\r\n      // dispose of the old one before overwriting\r\n      // split out into 2 ifs for better coverage tracking\r\n      if (this[DISPOSE]) {\r\n        if (!this[NO_DISPOSE_ON_SET])\r\n          this[DISPOSE](key, item.value)\r\n      }\r\n\r\n      item.now = now\r\n      item.maxAge = maxAge\r\n      item.value = value\r\n      this[LENGTH] += len - item.length\r\n      item.length = len\r\n      this.get(key)\r\n      trim(this)\r\n      return true\r\n    }\r\n\r\n    const hit = new Entry(key, value, len, now, maxAge)\r\n\r\n    // oversized objects fall out of cache automatically.\r\n    if (hit.length > this[MAX]) {\r\n      if (this[DISPOSE])\r\n        this[DISPOSE](key, value)\r\n\r\n      return false\r\n    }\r\n\r\n    this[LENGTH] += hit.length\r\n    this[LRU_LIST].unshift(hit)\r\n    this[CACHE].set(key, this[LRU_LIST].head)\r\n    trim(this)\r\n    return true\r\n  }\r\n\r\n  has (key) {\r\n    if (!this[CACHE].has(key)) return false\r\n    const hit = this[CACHE].get(key).value\r\n    return !isStale(this, hit)\r\n  }\r\n\r\n  get (key) {\r\n    return get(this, key, true)\r\n  }\r\n\r\n  peek (key) {\r\n    return get(this, key, false)\r\n  }\r\n\r\n  pop () {\r\n    const node = this[LRU_LIST].tail\r\n    if (!node)\r\n      return null\r\n\r\n    del(this, node)\r\n    return node.value\r\n  }\r\n\r\n  del (key) {\r\n    del(this, this[CACHE].get(key))\r\n  }\r\n\r\n  load (arr) {\r\n    // reset the cache\r\n    this.reset()\r\n\r\n    const now = Date.now()\r\n    // A previous serialized cache has the most recent items first\r\n    for (let l = arr.length - 1; l >= 0; l--) {\r\n      const hit = arr[l]\r\n      const expiresAt = hit.e || 0\r\n      if (expiresAt === 0)\r\n        // the item was created without expiration in a non aged cache\r\n        this.set(hit.k, hit.v)\r\n      else {\r\n        const maxAge = expiresAt - now\r\n        // dont add already expired items\r\n        if (maxAge > 0) {\r\n          this.set(hit.k, hit.v, maxAge)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  prune () {\r\n    this[CACHE].forEach((value, key) => get(this, key, false))\r\n  }\r\n}\r\n\r\nconst get = (self, key, doUse) => {\r\n  const node = self[CACHE].get(key)\r\n  if (node) {\r\n    const hit = node.value\r\n    if (isStale(self, hit)) {\r\n      del(self, node)\r\n      if (!self[ALLOW_STALE])\r\n        return undefined\r\n    } else {\r\n      if (doUse) {\r\n        if (self[UPDATE_AGE_ON_GET])\r\n          node.value.now = Date.now()\r\n        self[LRU_LIST].unshiftNode(node)\r\n      }\r\n    }\r\n    return hit.value\r\n  }\r\n}\r\n\r\nconst isStale = (self, hit) => {\r\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\r\n    return false\r\n\r\n  const diff = Date.now() - hit.now\r\n  return hit.maxAge ? diff > hit.maxAge\r\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\r\n}\r\n\r\nconst trim = self => {\r\n  if (self[LENGTH] > self[MAX]) {\r\n    for (let walker = self[LRU_LIST].tail;\r\n      self[LENGTH] > self[MAX] && walker !== null;) {\r\n      // We know that we're about to delete this one, and also\r\n      // what the next least recently used key will be, so just\r\n      // go ahead and set it now.\r\n      const prev = walker.prev\r\n      del(self, walker)\r\n      walker = prev\r\n    }\r\n  }\r\n}\r\n\r\nconst del = (self, node) => {\r\n  if (node) {\r\n    const hit = node.value\r\n    if (self[DISPOSE])\r\n      self[DISPOSE](hit.key, hit.value)\r\n\r\n    self[LENGTH] -= hit.length\r\n    self[CACHE].delete(hit.key)\r\n    self[LRU_LIST].removeNode(node)\r\n  }\r\n}\r\n\r\nclass Entry {\r\n  constructor (key, value, length, now, maxAge) {\r\n    this.key = key\r\n    this.value = value\r\n    this.length = length\r\n    this.now = now\r\n    this.maxAge = maxAge || 0\r\n  }\r\n}\r\n\r\nconst forEachStep = (self, fn, node, thisp) => {\r\n  let hit = node.value\r\n  if (isStale(self, hit)) {\r\n    del(self, node)\r\n    if (!self[ALLOW_STALE])\r\n      hit = undefined\r\n  }\r\n  if (hit)\r\n    fn.call(thisp, hit.value, hit.key, self)\r\n}\r\n\r\nmodule.exports = LRUCache\r\n"]},"metadata":{},"sourceType":"script"}