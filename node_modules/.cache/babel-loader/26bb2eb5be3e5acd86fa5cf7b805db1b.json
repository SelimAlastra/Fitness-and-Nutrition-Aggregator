{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ibott\\\\MajorGroupProject\\\\src\\\\user_login.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useState } from 'react';\nimport { ErrorMessage, useFormik } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\nimport './user-login.css';\nconst eye = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n  icon: faEye,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }\n}); // const isCorrectLogin = (login) => {\n//   if(!login) return \"no input\";\n//   if(login !=='^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$')\n//     return \"This is not an email\"\n//   else\n//     return \"This is an email.\"\n// };\n\nfunction PopUpLogin() {\n  _s();\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    className: \"loginButton\",\n    variant: \"primary\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-dialog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    className: \"logIn\",\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"LOGIN FORM\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \" \", /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }\n  }), \" \"))));\n}\n\n_s(PopUpLogin, \"NKb1ZOdhT+qUsWLXSgjSS2bk2C4=\");\n\n_c = PopUpLogin;\n; // Yup.addMethod(Yup.string(), 'checkEmailOrUsername', function(message = \"login\"){\n//     return this.test(\"checkEmailOrUsername\", message, function (val) {\n//       return /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/gi.test(val);\n//     })\n// });\n\nconst schema = Yup.object().shape({\n  email: Yup.string().email(\"Email must be a valid email.\").required(\"No email provided.\"),\n  password: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\").matches(/^[a-zA-Z0-9!@#\\$%\\^\\&*\\)\\(+=._-]+$/, \"Password should not contain space.\")\n});\n\nconst Login = () => {\n  _s2();\n\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  const togglePasswordVisiblity = () => {\n    setPasswordShown(passwordShown ? false : true);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: schema,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        console.log(\"Logging in\", values);\n        setSubmitting(false);\n      }, 500);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: formik.handleSubmit,\n    autoComplete: \"Off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 1\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    hidden: true,\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 3\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(Form.Control, {\n    id: \"email\",\n    name: \"email\",\n    type: \"text\",\n    placeholder: \"Enter your email\",\n    value: formik.values.email,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    className: formik.errors.email && formik.touched.email && \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }), formik.errors.email && formik.touched.email && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, formik.errors.email), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Form.Label, {\n    hidden: true,\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"parent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    id: \"password\",\n    name: \"password\",\n    type: passwordShown ? \"text\" : \"password\",\n    placeholder: \"Enter your password\",\n    value: formik.values.password,\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    className: formik.errors.password && formik.touched.password && \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"i\", {\n    className: \"child\",\n    onClick: togglePasswordVisiblity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 8\n    }\n  }, eye)), formik.errors.password && formik.touched.password && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, formik.errors.password), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, \"Forgot Password?\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"loginButton\",\n    type: \"submit\",\n    name: \"loginBtn\",\n    disabled: formik.isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, \"Log In\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  })));\n};\n\n_s2(Login, \"DZkJ8JbTg+pxQWwtDsjk0W8M6ZE=\", false, function () {\n  return [useFormik];\n});\n\n_c2 = Login;\nexport default PopUpLogin;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PopUpLogin\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/src/user_login.js"],"names":["React","Component","useState","ErrorMessage","useFormik","EmailValidator","Yup","Button","Form","Modal","FontAwesomeIcon","faEye","eye","PopUpLogin","show","setShow","handleClose","handleShow","schema","object","shape","email","string","required","password","min","matches","Login","passwordShown","setPasswordShown","togglePasswordVisiblity","formik","initialValues","validationSchema","onSubmit","values","setSubmitting","setTimeout","console","log","handleSubmit","handleChange","handleBlur","errors","touched","isSubmitting"],"mappings":"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","sourcesContent":["import React, { Component, useState} from 'react';\r\nimport { ErrorMessage, useFormik } from \"formik\";\r\nimport * as EmailValidator from \"email-validator\";\r\nimport * as Yup from \"yup\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEye} from \"@fortawesome/free-solid-svg-icons\";\r\nimport './user-login.css'\r\nconst eye = <FontAwesomeIcon icon={faEye} />;\r\n\r\n\r\n// const isCorrectLogin = (login) => {\r\n//   if(!login) return \"no input\";\r\n//   if(login !=='^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$')\r\n//     return \"This is not an email\"\r\n//   else\r\n//     return \"This is an email.\"\r\n\r\n// };\r\n\r\nfunction PopUpLogin(){\r\n    const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  return(\r\n    <>\r\n    <Button className=\"loginButton\" variant=\"primary\" onClick={handleShow}>\r\n      Login\r\n    </Button>\r\n    <div className = \"modal-dialog\">\r\n    <Modal className=\"logIn\"show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>LOGIN FORM</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body> <Login/> </Modal.Body>\r\n    </Modal>\r\n    </div>\r\n  </>\r\n  );\r\n\r\n};\r\n\r\n// Yup.addMethod(Yup.string(), 'checkEmailOrUsername', function(message = \"login\"){\r\n//     return this.test(\"checkEmailOrUsername\", message, function (val) {\r\n//       return /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/gi.test(val);\r\n//     })\r\n// });\r\n\r\nconst schema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(\"Email must be a valid email.\")\r\n        .required(\"No email provided.\"),\r\n    \r\n    password: Yup.string()\r\n        .required(\"No password provided.\")\r\n        .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n        .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\r\n        .matches(/^[a-zA-Z0-9!@#\\$%\\^\\&*\\)\\(+=._-]+$/, \"Password should not contain space.\")\r\n});\r\n\r\nconst Login = () => {\r\n\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  \r\n  const formik = useFormik({\r\n  initialValues:{ email: \"\", password: \"\" },\r\n  validationSchema: schema,\r\n  onSubmit: (values, { setSubmitting }) => {\r\n    setTimeout(() => {\r\n      console.log(\"Logging in\", values);\r\n      setSubmitting(false);\r\n    }, 500);\r\n  },\r\n});\r\n\r\nreturn (\r\n<div className=\"Form\">\r\n<Form onSubmit={formik.handleSubmit} autoComplete=\"Off\">\r\n  <Form.Label hidden = {true} htmlFor=\"email\">Email</Form.Label>\r\n    <Form.Control\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"text\"\r\n        placeholder=\"Enter your email\"\r\n        value={formik.values.email}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        className={formik.errors.email && formik.touched.email && \"error\"}\r\n    />\r\n    {formik.errors.email && formik.touched.email && (\r\n    <div className=\"input-feedback\">{formik.errors.email}</div>\r\n    )}\r\n    <p/>\r\n    <Form.Label hidden={true} htmlFor=\"password\">Password</Form.Label>\r\n    <div className=\"parent\">\r\n    <Form.Control \r\n        id=\"password\"\r\n        name=\"password\"\r\n        type={passwordShown ? \"text\" : \"password\"}\r\n        placeholder=\"Enter your password\"\r\n        value={formik.values.password}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        className={formik.errors.password && formik.touched.password && \"error\"}\r\n    /> <i className=\"child\" onClick={togglePasswordVisiblity}>{eye}</i>\r\n    </div>\r\n    {formik.errors.password && formik.touched.password && (\r\n    <div className=\"input-feedback\">{formik.errors.password}</div>\r\n    )}\r\n    <a href = \"\">Forgot Password?</a>\r\n    <p/>\r\n    <Button className=\"loginButton\" type=\"submit\" name=\"loginBtn\" disabled={formik.isSubmitting}>\r\n        Log In\r\n    </Button>\r\n    <p/>\r\n  \r\n</Form>\r\n</div>\r\n);\r\n};\r\n  export default PopUpLogin;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}