{"ast":null,"code":"/**\r\n * A Javascript implementation of AES Cipher Suites for TLS.\r\n *\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2009-2015 Digital Bazaar, Inc.\r\n *\r\n */\nvar forge = require('./forge');\n\nrequire('./aes');\n\nrequire('./tls');\n\nvar tls = module.exports = forge.tls;\n/**\r\n * Supported cipher suites.\r\n */\n\ntls.CipherSuites['TLS_RSA_WITH_AES_128_CBC_SHA'] = {\n  id: [0x00, 0x2f],\n  name: 'TLS_RSA_WITH_AES_128_CBC_SHA',\n  initSecurityParameters: function (sp) {\n    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\n    sp.cipher_type = tls.CipherType.block;\n    sp.enc_key_length = 16;\n    sp.block_length = 16;\n    sp.fixed_iv_length = 16;\n    sp.record_iv_length = 16;\n    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\n    sp.mac_length = 20;\n    sp.mac_key_length = 20;\n  },\n  initConnectionState: initConnectionState\n};\ntls.CipherSuites['TLS_RSA_WITH_AES_256_CBC_SHA'] = {\n  id: [0x00, 0x35],\n  name: 'TLS_RSA_WITH_AES_256_CBC_SHA',\n  initSecurityParameters: function (sp) {\n    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\n    sp.cipher_type = tls.CipherType.block;\n    sp.enc_key_length = 32;\n    sp.block_length = 16;\n    sp.fixed_iv_length = 16;\n    sp.record_iv_length = 16;\n    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\n    sp.mac_length = 20;\n    sp.mac_key_length = 20;\n  },\n  initConnectionState: initConnectionState\n};\n\nfunction initConnectionState(state, c, sp) {\n  var client = c.entity === forge.tls.ConnectionEnd.client; // cipher setup\n\n  state.read.cipherState = {\n    init: false,\n    cipher: forge.cipher.createDecipher('AES-CBC', client ? sp.keys.server_write_key : sp.keys.client_write_key),\n    iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV\n  };\n  state.write.cipherState = {\n    init: false,\n    cipher: forge.cipher.createCipher('AES-CBC', client ? sp.keys.client_write_key : sp.keys.server_write_key),\n    iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV\n  };\n  state.read.cipherFunction = decrypt_aes_cbc_sha1;\n  state.write.cipherFunction = encrypt_aes_cbc_sha1; // MAC setup\n\n  state.read.macLength = state.write.macLength = sp.mac_length;\n  state.read.macFunction = state.write.macFunction = tls.hmac_sha1;\n}\n/**\r\n * Encrypts the TLSCompressed record into a TLSCipherText record using AES\r\n * in CBC mode.\r\n *\r\n * @param record the TLSCompressed record to encrypt.\r\n * @param s the ConnectionState to use.\r\n *\r\n * @return true on success, false on failure.\r\n */\n\n\nfunction encrypt_aes_cbc_sha1(record, s) {\n  var rval = false; // append MAC to fragment, update sequence number\n\n  var mac = s.macFunction(s.macKey, s.sequenceNumber, record);\n  record.fragment.putBytes(mac);\n  s.updateSequenceNumber(); // TLS 1.1+ use an explicit IV every time to protect against CBC attacks\n\n  var iv;\n\n  if (record.version.minor === tls.Versions.TLS_1_0.minor) {\n    // use the pre-generated IV when initializing for TLS 1.0, otherwise use\n    // the residue from the previous encryption\n    iv = s.cipherState.init ? null : s.cipherState.iv;\n  } else {\n    iv = forge.random.getBytesSync(16);\n  }\n\n  s.cipherState.init = true; // start cipher\n\n  var cipher = s.cipherState.cipher;\n  cipher.start({\n    iv: iv\n  }); // TLS 1.1+ write IV into output\n\n  if (record.version.minor >= tls.Versions.TLS_1_1.minor) {\n    cipher.output.putBytes(iv);\n  } // do encryption (default padding is appropriate)\n\n\n  cipher.update(record.fragment);\n\n  if (cipher.finish(encrypt_aes_cbc_sha1_padding)) {\n    // set record fragment to encrypted output\n    record.fragment = cipher.output;\n    record.length = record.fragment.length();\n    rval = true;\n  }\n\n  return rval;\n}\n/**\r\n * Handles padding for aes_cbc_sha1 in encrypt mode.\r\n *\r\n * @param blockSize the block size.\r\n * @param input the input buffer.\r\n * @param decrypt true in decrypt mode, false in encrypt mode.\r\n *\r\n * @return true on success, false on failure.\r\n */\n\n\nfunction encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {\n  /* The encrypted data length (TLSCiphertext.length) is one more than the sum\r\n   of SecurityParameters.block_length, TLSCompressed.length,\r\n   SecurityParameters.mac_length, and padding_length.\r\n     The padding may be any length up to 255 bytes long, as long as it results in\r\n   the TLSCiphertext.length being an integral multiple of the block length.\r\n   Lengths longer than necessary might be desirable to frustrate attacks on a\r\n   protocol based on analysis of the lengths of exchanged messages. Each uint8\r\n   in the padding data vector must be filled with the padding length value.\r\n     The padding length should be such that the total size of the\r\n   GenericBlockCipher structure is a multiple of the cipher's block length.\r\n   Legal values range from zero to 255, inclusive. This length specifies the\r\n   length of the padding field exclusive of the padding_length field itself.\r\n     This is slightly different from PKCS#7 because the padding value is 1\r\n   less than the actual number of padding bytes if you include the\r\n   padding_length uint8 itself as a padding byte. */\n  if (!decrypt) {\n    // get the number of padding bytes required to reach the blockSize and\n    // subtract 1 for the padding value (to make room for the padding_length\n    // uint8)\n    var padding = blockSize - input.length() % blockSize;\n    input.fillWithByte(padding - 1, padding);\n  }\n\n  return true;\n}\n/**\r\n * Handles padding for aes_cbc_sha1 in decrypt mode.\r\n *\r\n * @param blockSize the block size.\r\n * @param output the output buffer.\r\n * @param decrypt true in decrypt mode, false in encrypt mode.\r\n *\r\n * @return true on success, false on failure.\r\n */\n\n\nfunction decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {\n  var rval = true;\n\n  if (decrypt) {\n    /* The last byte in the output specifies the number of padding bytes not\r\n      including itself. Each of the padding bytes has the same value as that\r\n      last byte (known as the padding_length). Here we check all padding\r\n      bytes to ensure they have the value of padding_length even if one of\r\n      them is bad in order to ward-off timing attacks. */\n    var len = output.length();\n    var paddingLength = output.last();\n\n    for (var i = len - 1 - paddingLength; i < len - 1; ++i) {\n      rval = rval && output.at(i) == paddingLength;\n    }\n\n    if (rval) {\n      // trim off padding bytes and last padding length byte\n      output.truncate(paddingLength + 1);\n    }\n  }\n\n  return rval;\n}\n/**\r\n * Decrypts a TLSCipherText record into a TLSCompressed record using\r\n * AES in CBC mode.\r\n *\r\n * @param record the TLSCipherText record to decrypt.\r\n * @param s the ConnectionState to use.\r\n *\r\n * @return true on success, false on failure.\r\n */\n\n\nfunction decrypt_aes_cbc_sha1(record, s) {\n  var rval = false;\n  var iv;\n\n  if (record.version.minor === tls.Versions.TLS_1_0.minor) {\n    // use pre-generated IV when initializing for TLS 1.0, otherwise use the\n    // residue from the previous decryption\n    iv = s.cipherState.init ? null : s.cipherState.iv;\n  } else {\n    // TLS 1.1+ use an explicit IV every time to protect against CBC attacks\n    // that is appended to the record fragment\n    iv = record.fragment.getBytes(16);\n  }\n\n  s.cipherState.init = true; // start cipher\n\n  var cipher = s.cipherState.cipher;\n  cipher.start({\n    iv: iv\n  }); // do decryption\n\n  cipher.update(record.fragment);\n  rval = cipher.finish(decrypt_aes_cbc_sha1_padding); // even if decryption fails, keep going to minimize timing attacks\n  // decrypted data:\n  // first (len - 20) bytes = application data\n  // last 20 bytes          = MAC\n\n  var macLen = s.macLength; // create a random MAC to check against should the mac length check fail\n  // Note: do this regardless of the failure to keep timing consistent\n\n  var mac = forge.random.getBytesSync(macLen); // get fragment and mac\n\n  var len = cipher.output.length();\n\n  if (len >= macLen) {\n    record.fragment = cipher.output.getBytes(len - macLen);\n    mac = cipher.output.getBytes(macLen);\n  } else {\n    // bad data, but get bytes anyway to try to keep timing consistent\n    record.fragment = cipher.output.getBytes();\n  }\n\n  record.fragment = forge.util.createBuffer(record.fragment);\n  record.length = record.fragment.length(); // see if data integrity checks out, update sequence number\n\n  var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);\n  s.updateSequenceNumber();\n  rval = compareMacs(s.macKey, mac, mac2) && rval;\n  return rval;\n}\n/**\r\n * Safely compare two MACs. This function will compare two MACs in a way\r\n * that protects against timing attacks.\r\n *\r\n * TODO: Expose elsewhere as a utility API.\r\n *\r\n * See: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\r\n *\r\n * @param key the MAC key to use.\r\n * @param mac1 as a binary-encoded string of bytes.\r\n * @param mac2 as a binary-encoded string of bytes.\r\n *\r\n * @return true if the MACs are the same, false if not.\r\n */\n\n\nfunction compareMacs(key, mac1, mac2) {\n  var hmac = forge.hmac.create();\n  hmac.start('SHA1', key);\n  hmac.update(mac1);\n  mac1 = hmac.digest().getBytes();\n  hmac.start(null, null);\n  hmac.update(mac2);\n  mac2 = hmac.digest().getBytes();\n  return mac1 === mac2;\n}","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/node_modules/node-forge/lib/aesCipherSuites.js"],"names":["forge","require","tls","module","exports","CipherSuites","id","name","initSecurityParameters","sp","bulk_cipher_algorithm","BulkCipherAlgorithm","aes","cipher_type","CipherType","block","enc_key_length","block_length","fixed_iv_length","record_iv_length","mac_algorithm","MACAlgorithm","hmac_sha1","mac_length","mac_key_length","initConnectionState","state","c","client","entity","ConnectionEnd","read","cipherState","init","cipher","createDecipher","keys","server_write_key","client_write_key","iv","server_write_IV","client_write_IV","write","createCipher","cipherFunction","decrypt_aes_cbc_sha1","encrypt_aes_cbc_sha1","macLength","macFunction","record","s","rval","mac","macKey","sequenceNumber","fragment","putBytes","updateSequenceNumber","version","minor","Versions","TLS_1_0","random","getBytesSync","start","TLS_1_1","output","update","finish","encrypt_aes_cbc_sha1_padding","length","blockSize","input","decrypt","padding","fillWithByte","decrypt_aes_cbc_sha1_padding","len","paddingLength","last","i","at","truncate","getBytes","macLen","util","createBuffer","mac2","compareMacs","key","mac1","hmac","create","digest"],"mappings":"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","sourcesContent":["/**\r\n * A Javascript implementation of AES Cipher Suites for TLS.\r\n *\r\n * @author Dave Longley\r\n *\r\n * Copyright (c) 2009-2015 Digital Bazaar, Inc.\r\n *\r\n */\r\nvar forge = require('./forge');\r\nrequire('./aes');\r\nrequire('./tls');\r\n\r\nvar tls = module.exports = forge.tls;\r\n\r\n/**\r\n * Supported cipher suites.\r\n */\r\ntls.CipherSuites['TLS_RSA_WITH_AES_128_CBC_SHA'] = {\r\n  id: [0x00, 0x2f],\r\n  name: 'TLS_RSA_WITH_AES_128_CBC_SHA',\r\n  initSecurityParameters: function(sp) {\r\n    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\r\n    sp.cipher_type = tls.CipherType.block;\r\n    sp.enc_key_length = 16;\r\n    sp.block_length = 16;\r\n    sp.fixed_iv_length = 16;\r\n    sp.record_iv_length = 16;\r\n    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\r\n    sp.mac_length = 20;\r\n    sp.mac_key_length = 20;\r\n  },\r\n  initConnectionState: initConnectionState\r\n};\r\ntls.CipherSuites['TLS_RSA_WITH_AES_256_CBC_SHA'] = {\r\n  id: [0x00, 0x35],\r\n  name: 'TLS_RSA_WITH_AES_256_CBC_SHA',\r\n  initSecurityParameters: function(sp) {\r\n    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\r\n    sp.cipher_type = tls.CipherType.block;\r\n    sp.enc_key_length = 32;\r\n    sp.block_length = 16;\r\n    sp.fixed_iv_length = 16;\r\n    sp.record_iv_length = 16;\r\n    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\r\n    sp.mac_length = 20;\r\n    sp.mac_key_length = 20;\r\n  },\r\n  initConnectionState: initConnectionState\r\n};\r\n\r\nfunction initConnectionState(state, c, sp) {\r\n  var client = (c.entity === forge.tls.ConnectionEnd.client);\r\n\r\n  // cipher setup\r\n  state.read.cipherState = {\r\n    init: false,\r\n    cipher: forge.cipher.createDecipher('AES-CBC', client ?\r\n      sp.keys.server_write_key : sp.keys.client_write_key),\r\n    iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV\r\n  };\r\n  state.write.cipherState = {\r\n    init: false,\r\n    cipher: forge.cipher.createCipher('AES-CBC', client ?\r\n      sp.keys.client_write_key : sp.keys.server_write_key),\r\n    iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV\r\n  };\r\n  state.read.cipherFunction = decrypt_aes_cbc_sha1;\r\n  state.write.cipherFunction = encrypt_aes_cbc_sha1;\r\n\r\n  // MAC setup\r\n  state.read.macLength = state.write.macLength = sp.mac_length;\r\n  state.read.macFunction = state.write.macFunction = tls.hmac_sha1;\r\n}\r\n\r\n/**\r\n * Encrypts the TLSCompressed record into a TLSCipherText record using AES\r\n * in CBC mode.\r\n *\r\n * @param record the TLSCompressed record to encrypt.\r\n * @param s the ConnectionState to use.\r\n *\r\n * @return true on success, false on failure.\r\n */\r\nfunction encrypt_aes_cbc_sha1(record, s) {\r\n  var rval = false;\r\n\r\n  // append MAC to fragment, update sequence number\r\n  var mac = s.macFunction(s.macKey, s.sequenceNumber, record);\r\n  record.fragment.putBytes(mac);\r\n  s.updateSequenceNumber();\r\n\r\n  // TLS 1.1+ use an explicit IV every time to protect against CBC attacks\r\n  var iv;\r\n  if(record.version.minor === tls.Versions.TLS_1_0.minor) {\r\n    // use the pre-generated IV when initializing for TLS 1.0, otherwise use\r\n    // the residue from the previous encryption\r\n    iv = s.cipherState.init ? null : s.cipherState.iv;\r\n  } else {\r\n    iv = forge.random.getBytesSync(16);\r\n  }\r\n\r\n  s.cipherState.init = true;\r\n\r\n  // start cipher\r\n  var cipher = s.cipherState.cipher;\r\n  cipher.start({iv: iv});\r\n\r\n  // TLS 1.1+ write IV into output\r\n  if(record.version.minor >= tls.Versions.TLS_1_1.minor) {\r\n    cipher.output.putBytes(iv);\r\n  }\r\n\r\n  // do encryption (default padding is appropriate)\r\n  cipher.update(record.fragment);\r\n  if(cipher.finish(encrypt_aes_cbc_sha1_padding)) {\r\n    // set record fragment to encrypted output\r\n    record.fragment = cipher.output;\r\n    record.length = record.fragment.length();\r\n    rval = true;\r\n  }\r\n\r\n  return rval;\r\n}\r\n\r\n/**\r\n * Handles padding for aes_cbc_sha1 in encrypt mode.\r\n *\r\n * @param blockSize the block size.\r\n * @param input the input buffer.\r\n * @param decrypt true in decrypt mode, false in encrypt mode.\r\n *\r\n * @return true on success, false on failure.\r\n */\r\nfunction encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {\r\n  /* The encrypted data length (TLSCiphertext.length) is one more than the sum\r\n   of SecurityParameters.block_length, TLSCompressed.length,\r\n   SecurityParameters.mac_length, and padding_length.\r\n\r\n   The padding may be any length up to 255 bytes long, as long as it results in\r\n   the TLSCiphertext.length being an integral multiple of the block length.\r\n   Lengths longer than necessary might be desirable to frustrate attacks on a\r\n   protocol based on analysis of the lengths of exchanged messages. Each uint8\r\n   in the padding data vector must be filled with the padding length value.\r\n\r\n   The padding length should be such that the total size of the\r\n   GenericBlockCipher structure is a multiple of the cipher's block length.\r\n   Legal values range from zero to 255, inclusive. This length specifies the\r\n   length of the padding field exclusive of the padding_length field itself.\r\n\r\n   This is slightly different from PKCS#7 because the padding value is 1\r\n   less than the actual number of padding bytes if you include the\r\n   padding_length uint8 itself as a padding byte. */\r\n  if(!decrypt) {\r\n    // get the number of padding bytes required to reach the blockSize and\r\n    // subtract 1 for the padding value (to make room for the padding_length\r\n    // uint8)\r\n    var padding = blockSize - (input.length() % blockSize);\r\n    input.fillWithByte(padding - 1, padding);\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Handles padding for aes_cbc_sha1 in decrypt mode.\r\n *\r\n * @param blockSize the block size.\r\n * @param output the output buffer.\r\n * @param decrypt true in decrypt mode, false in encrypt mode.\r\n *\r\n * @return true on success, false on failure.\r\n */\r\nfunction decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {\r\n  var rval = true;\r\n  if(decrypt) {\r\n    /* The last byte in the output specifies the number of padding bytes not\r\n      including itself. Each of the padding bytes has the same value as that\r\n      last byte (known as the padding_length). Here we check all padding\r\n      bytes to ensure they have the value of padding_length even if one of\r\n      them is bad in order to ward-off timing attacks. */\r\n    var len = output.length();\r\n    var paddingLength = output.last();\r\n    for(var i = len - 1 - paddingLength; i < len - 1; ++i) {\r\n      rval = rval && (output.at(i) == paddingLength);\r\n    }\r\n    if(rval) {\r\n      // trim off padding bytes and last padding length byte\r\n      output.truncate(paddingLength + 1);\r\n    }\r\n  }\r\n  return rval;\r\n}\r\n\r\n/**\r\n * Decrypts a TLSCipherText record into a TLSCompressed record using\r\n * AES in CBC mode.\r\n *\r\n * @param record the TLSCipherText record to decrypt.\r\n * @param s the ConnectionState to use.\r\n *\r\n * @return true on success, false on failure.\r\n */\r\nfunction decrypt_aes_cbc_sha1(record, s) {\r\n  var rval = false;\r\n\r\n  var iv;\r\n  if(record.version.minor === tls.Versions.TLS_1_0.minor) {\r\n    // use pre-generated IV when initializing for TLS 1.0, otherwise use the\r\n    // residue from the previous decryption\r\n    iv = s.cipherState.init ? null : s.cipherState.iv;\r\n  } else {\r\n    // TLS 1.1+ use an explicit IV every time to protect against CBC attacks\r\n    // that is appended to the record fragment\r\n    iv = record.fragment.getBytes(16);\r\n  }\r\n\r\n  s.cipherState.init = true;\r\n\r\n  // start cipher\r\n  var cipher = s.cipherState.cipher;\r\n  cipher.start({iv: iv});\r\n\r\n  // do decryption\r\n  cipher.update(record.fragment);\r\n  rval = cipher.finish(decrypt_aes_cbc_sha1_padding);\r\n\r\n  // even if decryption fails, keep going to minimize timing attacks\r\n\r\n  // decrypted data:\r\n  // first (len - 20) bytes = application data\r\n  // last 20 bytes          = MAC\r\n  var macLen = s.macLength;\r\n\r\n  // create a random MAC to check against should the mac length check fail\r\n  // Note: do this regardless of the failure to keep timing consistent\r\n  var mac = forge.random.getBytesSync(macLen);\r\n\r\n  // get fragment and mac\r\n  var len = cipher.output.length();\r\n  if(len >= macLen) {\r\n    record.fragment = cipher.output.getBytes(len - macLen);\r\n    mac = cipher.output.getBytes(macLen);\r\n  } else {\r\n    // bad data, but get bytes anyway to try to keep timing consistent\r\n    record.fragment = cipher.output.getBytes();\r\n  }\r\n  record.fragment = forge.util.createBuffer(record.fragment);\r\n  record.length = record.fragment.length();\r\n\r\n  // see if data integrity checks out, update sequence number\r\n  var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);\r\n  s.updateSequenceNumber();\r\n  rval = compareMacs(s.macKey, mac, mac2) && rval;\r\n  return rval;\r\n}\r\n\r\n/**\r\n * Safely compare two MACs. This function will compare two MACs in a way\r\n * that protects against timing attacks.\r\n *\r\n * TODO: Expose elsewhere as a utility API.\r\n *\r\n * See: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\r\n *\r\n * @param key the MAC key to use.\r\n * @param mac1 as a binary-encoded string of bytes.\r\n * @param mac2 as a binary-encoded string of bytes.\r\n *\r\n * @return true if the MACs are the same, false if not.\r\n */\r\nfunction compareMacs(key, mac1, mac2) {\r\n  var hmac = forge.hmac.create();\r\n\r\n  hmac.start('SHA1', key);\r\n  hmac.update(mac1);\r\n  mac1 = hmac.digest().getBytes();\r\n\r\n  hmac.start(null, null);\r\n  hmac.update(mac2);\r\n  mac2 = hmac.digest().getBytes();\r\n\r\n  return mac1 === mac2;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}