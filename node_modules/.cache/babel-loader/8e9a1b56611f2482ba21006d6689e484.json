{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\n\nconst querystring = require(\"querystring\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\r\n * Implements the OAuth 2.0 token exchange based on\r\n * https://tools.ietf.org/html/rfc8693\r\n */\n\n\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n  /**\r\n   * Initializes an STS credentials instance.\r\n   * @param tokenExchangeEndpoint The token exchange endpoint.\r\n   * @param clientAuthentication The client authentication credentials if\r\n   *   available.\r\n   */\n  constructor(tokenExchangeEndpoint, clientAuthentication) {\n    super(clientAuthentication);\n    this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    this.transporter = new transporters_1.DefaultTransporter();\n  }\n  /**\r\n   * Exchanges the provided token for another type of token based on the\r\n   * rfc8693 spec.\r\n   * @param stsCredentialsOptions The token exchange options used to populate\r\n   *   the token exchange request.\r\n   * @param additionalHeaders Optional additional headers to pass along the\r\n   *   request.\r\n   * @param options Optional additional GCP-specific non-spec defined options\r\n   *   to send with the request.\r\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\r\n   * @return A promise that resolves with the token exchange response containing\r\n   *   the requested token and its expiration time.\r\n   */\n\n\n  async exchangeToken(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    var _a, _b, _c;\n\n    const values = {\n      grant_type: stsCredentialsOptions.grantType,\n      resource: stsCredentialsOptions.resource,\n      audience: stsCredentialsOptions.audience,\n      scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n      requested_token_type: stsCredentialsOptions.requestedTokenType,\n      subject_token: stsCredentialsOptions.subjectToken,\n      subject_token_type: stsCredentialsOptions.subjectTokenType,\n      actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n      actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n      // Non-standard GCP-specific options.\n      options: options && JSON.stringify(options)\n    }; // Remove undefined fields.\n\n    Object.keys(values).forEach(key => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (typeof values[key] === 'undefined') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        delete values[key];\n      }\n    });\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }; // Inject additional STS headers if available.\n\n    Object.assign(headers, additionalHeaders || {});\n    const opts = {\n      url: this.tokenExchangeEndpoint,\n      method: 'POST',\n      headers,\n      data: querystring.stringify(values),\n      responseType: 'json'\n    }; // Apply OAuth client authentication.\n\n    this.applyClientAuthenticationOptions(opts);\n\n    try {\n      const response = await this.transporter.request(opts); // Successful response.\n\n      const stsSuccessfulResponse = response.data;\n      stsSuccessfulResponse.res = response;\n      return stsSuccessfulResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error.response) {\n        throw oauth2common_1.getErrorFromOAuthErrorResponse(error.response.data, // Preserve other fields from the original error.\n        error);\n      } // Request could fail before the server responds.\n\n\n      throw error;\n    }\n  }\n\n}\n\nexports.StsCredentials = StsCredentials;","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/node_modules/google-auth-library/build/src/auth/stscredentials.js"],"names":["Object","defineProperty","exports","value","StsCredentials","querystring","require","transporters_1","oauth2common_1","OAuthClientAuthHandler","constructor","tokenExchangeEndpoint","clientAuthentication","transporter","DefaultTransporter","exchangeToken","stsCredentialsOptions","additionalHeaders","options","_a","_b","_c","values","grant_type","grantType","resource","audience","scope","join","requested_token_type","requestedTokenType","subject_token","subjectToken","subject_token_type","subjectTokenType","actor_token","actingParty","actorToken","actor_token_type","actorTokenType","JSON","stringify","keys","forEach","key","headers","assign","opts","url","method","data","responseType","applyClientAuthenticationOptions","response","request","stsSuccessfulResponse","res","error","getErrorFromOAuthErrorResponse"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,gBAAD,CAA9B;AACA;AACA;AACA;AACA;;;AACA,MAAMF,cAAN,SAA6BI,cAAc,CAACC,sBAA5C,CAAmE;AAC/D;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,qBAAD,EAAwBC,oBAAxB,EAA8C;AACrD,UAAMA,oBAAN;AACA,SAAKD,qBAAL,GAA6BA,qBAA7B;AACA,SAAKE,WAAL,GAAmB,IAAIN,cAAc,CAACO,kBAAnB,EAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACuB,QAAbC,aAAa,CAACC,qBAAD,EAAwBC,iBAAxB,EACnB;AACAC,EAAAA,OAFmB,EAEV;AACL,QAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;AACA,UAAMC,MAAM,GAAG;AACXC,MAAAA,UAAU,EAAEP,qBAAqB,CAACQ,SADvB;AAEXC,MAAAA,QAAQ,EAAET,qBAAqB,CAACS,QAFrB;AAGXC,MAAAA,QAAQ,EAAEV,qBAAqB,CAACU,QAHrB;AAIXC,MAAAA,KAAK,EAAE,CAACR,EAAE,GAAGH,qBAAqB,CAACW,KAA5B,MAAuC,IAAvC,IAA+CR,EAAE,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,EAAE,CAACS,IAAH,CAAQ,GAAR,CAJpE;AAKXC,MAAAA,oBAAoB,EAAEb,qBAAqB,CAACc,kBALjC;AAMXC,MAAAA,aAAa,EAAEf,qBAAqB,CAACgB,YAN1B;AAOXC,MAAAA,kBAAkB,EAAEjB,qBAAqB,CAACkB,gBAP/B;AAQXC,MAAAA,WAAW,EAAE,CAACf,EAAE,GAAGJ,qBAAqB,CAACoB,WAA5B,MAA6C,IAA7C,IAAqDhB,EAAE,KAAK,KAAK,CAAjE,GAAqE,KAAK,CAA1E,GAA8EA,EAAE,CAACiB,UARnF;AASXC,MAAAA,gBAAgB,EAAE,CAACjB,EAAE,GAAGL,qBAAqB,CAACoB,WAA5B,MAA6C,IAA7C,IAAqDf,EAAE,KAAK,KAAK,CAAjE,GAAqE,KAAK,CAA1E,GAA8EA,EAAE,CAACkB,cATxF;AAUX;AACArB,MAAAA,OAAO,EAAEA,OAAO,IAAIsB,IAAI,CAACC,SAAL,CAAevB,OAAf;AAXT,KAAf,CAFK,CAeL;;AACAlB,IAAAA,MAAM,CAAC0C,IAAP,CAAYpB,MAAZ,EAAoBqB,OAApB,CAA4BC,GAAG,IAAI;AAC/B;AACA,UAAI,OAAOtB,MAAM,CAACsB,GAAD,CAAb,KAAuB,WAA3B,EAAwC;AACpC;AACA,eAAOtB,MAAM,CAACsB,GAAD,CAAb;AACH;AACJ,KAND;AAOA,UAAMC,OAAO,GAAG;AACZ,sBAAgB;AADJ,KAAhB,CAvBK,CA0BL;;AACA7C,IAAAA,MAAM,CAAC8C,MAAP,CAAcD,OAAd,EAAuB5B,iBAAiB,IAAI,EAA5C;AACA,UAAM8B,IAAI,GAAG;AACTC,MAAAA,GAAG,EAAE,KAAKrC,qBADD;AAETsC,MAAAA,MAAM,EAAE,MAFC;AAGTJ,MAAAA,OAHS;AAITK,MAAAA,IAAI,EAAE7C,WAAW,CAACoC,SAAZ,CAAsBnB,MAAtB,CAJG;AAKT6B,MAAAA,YAAY,EAAE;AALL,KAAb,CA5BK,CAmCL;;AACA,SAAKC,gCAAL,CAAsCL,IAAtC;;AACA,QAAI;AACA,YAAMM,QAAQ,GAAG,MAAM,KAAKxC,WAAL,CAAiByC,OAAjB,CAAyBP,IAAzB,CAAvB,CADA,CAEA;;AACA,YAAMQ,qBAAqB,GAAGF,QAAQ,CAACH,IAAvC;AACAK,MAAAA,qBAAqB,CAACC,GAAtB,GAA4BH,QAA5B;AACA,aAAOE,qBAAP;AACH,KAND,CAOA,OAAOE,KAAP,EAAc;AACV;AACA,UAAIA,KAAK,CAACJ,QAAV,EAAoB;AAChB,cAAM7C,cAAc,CAACkD,8BAAf,CAA8CD,KAAK,CAACJ,QAAN,CAAeH,IAA7D,EACN;AACAO,QAAAA,KAFM,CAAN;AAGH,OANS,CAOV;;;AACA,YAAMA,KAAN;AACH;AACJ;;AAjF8D;;AAmFnEvD,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\r\n// Copyright 2021 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StsCredentials = void 0;\r\nconst querystring = require(\"querystring\");\r\nconst transporters_1 = require(\"../transporters\");\r\nconst oauth2common_1 = require(\"./oauth2common\");\r\n/**\r\n * Implements the OAuth 2.0 token exchange based on\r\n * https://tools.ietf.org/html/rfc8693\r\n */\r\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\r\n    /**\r\n     * Initializes an STS credentials instance.\r\n     * @param tokenExchangeEndpoint The token exchange endpoint.\r\n     * @param clientAuthentication The client authentication credentials if\r\n     *   available.\r\n     */\r\n    constructor(tokenExchangeEndpoint, clientAuthentication) {\r\n        super(clientAuthentication);\r\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\r\n        this.transporter = new transporters_1.DefaultTransporter();\r\n    }\r\n    /**\r\n     * Exchanges the provided token for another type of token based on the\r\n     * rfc8693 spec.\r\n     * @param stsCredentialsOptions The token exchange options used to populate\r\n     *   the token exchange request.\r\n     * @param additionalHeaders Optional additional headers to pass along the\r\n     *   request.\r\n     * @param options Optional additional GCP-specific non-spec defined options\r\n     *   to send with the request.\r\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\r\n     * @return A promise that resolves with the token exchange response containing\r\n     *   the requested token and its expiration time.\r\n     */\r\n    async exchangeToken(stsCredentialsOptions, additionalHeaders, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    options) {\r\n        var _a, _b, _c;\r\n        const values = {\r\n            grant_type: stsCredentialsOptions.grantType,\r\n            resource: stsCredentialsOptions.resource,\r\n            audience: stsCredentialsOptions.audience,\r\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\r\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\r\n            subject_token: stsCredentialsOptions.subjectToken,\r\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\r\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\r\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\r\n            // Non-standard GCP-specific options.\r\n            options: options && JSON.stringify(options),\r\n        };\r\n        // Remove undefined fields.\r\n        Object.keys(values).forEach(key => {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            if (typeof values[key] === 'undefined') {\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                delete values[key];\r\n            }\r\n        });\r\n        const headers = {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        };\r\n        // Inject additional STS headers if available.\r\n        Object.assign(headers, additionalHeaders || {});\r\n        const opts = {\r\n            url: this.tokenExchangeEndpoint,\r\n            method: 'POST',\r\n            headers,\r\n            data: querystring.stringify(values),\r\n            responseType: 'json',\r\n        };\r\n        // Apply OAuth client authentication.\r\n        this.applyClientAuthenticationOptions(opts);\r\n        try {\r\n            const response = await this.transporter.request(opts);\r\n            // Successful response.\r\n            const stsSuccessfulResponse = response.data;\r\n            stsSuccessfulResponse.res = response;\r\n            return stsSuccessfulResponse;\r\n        }\r\n        catch (error) {\r\n            // Translate error to OAuthError.\r\n            if (error.response) {\r\n                throw oauth2common_1.getErrorFromOAuthErrorResponse(error.response.data, \r\n                // Preserve other fields from the original error.\r\n                error);\r\n            }\r\n            // Request could fail before the server responds.\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nexports.StsCredentials = StsCredentials;\r\n//# sourceMappingURL=stscredentials.js.map"]},"metadata":{},"sourceType":"script"}