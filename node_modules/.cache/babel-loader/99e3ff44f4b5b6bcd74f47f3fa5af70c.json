{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2018 Google LLC\r\n *\r\n * Distributed under MIT license.\r\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleToken = void 0;\n\nconst fs = require(\"fs\");\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jws = require(\"jws\");\n\nconst path = require(\"path\");\n\nconst util_1 = require(\"util\");\n\nconst readFile = fs.readFile ? util_1.promisify(fs.readFile) : async () => {\n  // if running in the web-browser, fs.readFile may not have been shimmed.\n  throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n};\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\nclass ErrorWithCode extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n\n}\n\nlet getPem;\n\nclass GoogleToken {\n  /**\r\n   * Create a GoogleToken.\r\n   *\r\n   * @param options  Configuration object.\r\n   */\n  constructor(options) {\n    this.configure(options);\n  }\n\n  get accessToken() {\n    return this.rawToken ? this.rawToken.access_token : undefined;\n  }\n\n  get idToken() {\n    return this.rawToken ? this.rawToken.id_token : undefined;\n  }\n\n  get tokenType() {\n    return this.rawToken ? this.rawToken.token_type : undefined;\n  }\n\n  get refreshToken() {\n    return this.rawToken ? this.rawToken.refresh_token : undefined;\n  }\n  /**\r\n   * Returns whether the token has expired.\r\n   *\r\n   * @return true if the token has expired, false otherwise.\r\n   */\n\n\n  hasExpired() {\n    const now = new Date().getTime();\n\n    if (this.rawToken && this.expiresAt) {\n      return now >= this.expiresAt;\n    } else {\n      return true;\n    }\n  }\n  /**\r\n   * Returns whether the token will expire within eagerRefreshThresholdMillis\r\n   *\r\n   * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\r\n   */\n\n\n  isTokenExpiring() {\n    var _a;\n\n    const now = new Date().getTime();\n    const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n\n    if (this.rawToken && this.expiresAt) {\n      return this.expiresAt <= now + eagerRefreshThresholdMillis;\n    } else {\n      return true;\n    }\n  }\n\n  getToken(callback, opts = {}) {\n    if (typeof callback === 'object') {\n      opts = callback;\n      callback = undefined;\n    }\n\n    opts = Object.assign({\n      forceRefresh: false\n    }, opts);\n\n    if (callback) {\n      const cb = callback;\n      this.getTokenAsync(opts).then(t => cb(null, t), callback);\n      return;\n    }\n\n    return this.getTokenAsync(opts);\n  }\n  /**\r\n   * Given a keyFile, extract the key and client email if available\r\n   * @param keyFile Path to a json, pem, or p12 file that contains the key.\r\n   * @returns an object with privateKey and clientEmail properties\r\n   */\n\n\n  async getCredentials(keyFile) {\n    const ext = path.extname(keyFile);\n\n    switch (ext) {\n      case '.json':\n        {\n          const key = await readFile(keyFile, 'utf8');\n          const body = JSON.parse(key);\n          const privateKey = body.private_key;\n          const clientEmail = body.client_email;\n\n          if (!privateKey || !clientEmail) {\n            throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n          }\n\n          return {\n            privateKey,\n            clientEmail\n          };\n        }\n\n      case '.der':\n      case '.crt':\n      case '.pem':\n        {\n          const privateKey = await readFile(keyFile, 'utf8');\n          return {\n            privateKey\n          };\n        }\n\n      case '.p12':\n      case '.pfx':\n        {\n          // NOTE:  The loading of `google-p12-pem` is deferred for performance\n          // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n          // bit time to overall module loading, and is likely not frequently\n          // used.  In a future release, p12 support will be entirely removed.\n          if (!getPem) {\n            getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n          }\n\n          const privateKey = await getPem(keyFile);\n          return {\n            privateKey\n          };\n        }\n\n      default:\n        throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n    }\n  }\n\n  async getTokenAsync(opts) {\n    if (this.inFlightRequest && !opts.forceRefresh) {\n      return this.inFlightRequest;\n    }\n\n    try {\n      return await (this.inFlightRequest = this.getTokenAsyncInner(opts));\n    } finally {\n      this.inFlightRequest = undefined;\n    }\n  }\n\n  async getTokenAsyncInner(opts) {\n    if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n      return Promise.resolve(this.rawToken);\n    }\n\n    if (!this.key && !this.keyFile) {\n      throw new Error('No key or keyFile set.');\n    }\n\n    if (!this.key && this.keyFile) {\n      const creds = await this.getCredentials(this.keyFile);\n      this.key = creds.privateKey;\n      this.iss = creds.clientEmail || this.iss;\n\n      if (!creds.clientEmail) {\n        this.ensureEmail();\n      }\n    }\n\n    return this.requestToken();\n  }\n\n  ensureEmail() {\n    if (!this.iss) {\n      throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n    }\n  }\n\n  revokeToken(callback) {\n    if (callback) {\n      this.revokeTokenAsync().then(() => callback(), callback);\n      return;\n    }\n\n    return this.revokeTokenAsync();\n  }\n\n  async revokeTokenAsync() {\n    if (!this.accessToken) {\n      throw new Error('No token to revoke.');\n    }\n\n    const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n    await gaxios_1.request({\n      url\n    });\n    this.configure({\n      email: this.iss,\n      sub: this.sub,\n      key: this.key,\n      keyFile: this.keyFile,\n      scope: this.scope,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\r\n   * Configure the GoogleToken for re-use.\r\n   * @param  {object} options Configuration object.\r\n   */\n\n\n  configure(options = {}) {\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.rawToken = undefined;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n\n    if (typeof options.scope === 'object') {\n      this.scope = options.scope.join(' ');\n    } else {\n      this.scope = options.scope;\n    }\n\n    this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n  }\n  /**\r\n   * Request the token from Google.\r\n   */\n\n\n  async requestToken() {\n    const iat = Math.floor(new Date().getTime() / 1000);\n    const additionalClaims = this.additionalClaims || {};\n    const payload = Object.assign({\n      iss: this.iss,\n      scope: this.scope,\n      aud: GOOGLE_TOKEN_URL,\n      exp: iat + 3600,\n      iat,\n      sub: this.sub\n    }, additionalClaims);\n    const signedJWT = jws.sign({\n      header: {\n        alg: 'RS256'\n      },\n      payload,\n      secret: this.key\n    });\n\n    try {\n      const r = await gaxios_1.request({\n        method: 'POST',\n        url: GOOGLE_TOKEN_URL,\n        data: {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: signedJWT\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        responseType: 'json'\n      });\n      this.rawToken = r.data;\n      this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\n      return this.rawToken;\n    } catch (e) {\n      this.rawToken = undefined;\n      this.tokenExpires = undefined;\n      const body = e.response && e.response.data ? e.response.data : {};\n\n      if (body.error) {\n        const desc = body.error_description ? `: ${body.error_description}` : '';\n        e.message = `${body.error}${desc}`;\n      }\n\n      throw e;\n    }\n  }\n\n}\n\nexports.GoogleToken = GoogleToken;","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/node_modules/gtoken/build/src/index.js"],"names":["Object","defineProperty","exports","value","GoogleToken","fs","require","gaxios_1","jws","path","util_1","readFile","promisify","ErrorWithCode","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","Error","constructor","message","code","getPem","options","configure","accessToken","rawToken","access_token","undefined","idToken","id_token","tokenType","token_type","refreshToken","refresh_token","hasExpired","now","Date","getTime","expiresAt","isTokenExpiring","_a","eagerRefreshThresholdMillis","getToken","callback","opts","assign","forceRefresh","cb","getTokenAsync","then","t","getCredentials","keyFile","ext","extname","key","body","JSON","parse","privateKey","private_key","clientEmail","client_email","Promise","resolve","inFlightRequest","getTokenAsyncInner","creds","iss","ensureEmail","requestToken","revokeToken","revokeTokenAsync","url","request","email","sub","scope","additionalClaims","join","iat","Math","floor","payload","aud","exp","signedJWT","sign","header","alg","secret","r","method","data","grant_type","assertion","headers","responseType","expires_in","e","tokenExpires","response","error","desc","error_description"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2018 Google LLC\r\n *\r\n * Distributed under MIT license.\r\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GoogleToken = void 0;\r\nconst fs = require(\"fs\");\r\nconst gaxios_1 = require(\"gaxios\");\r\nconst jws = require(\"jws\");\r\nconst path = require(\"path\");\r\nconst util_1 = require(\"util\");\r\nconst readFile = fs.readFile\r\n    ? util_1.promisify(fs.readFile)\r\n    : async () => {\r\n        // if running in the web-browser, fs.readFile may not have been shimmed.\r\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\r\n    };\r\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\r\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\r\nclass ErrorWithCode extends Error {\r\n    constructor(message, code) {\r\n        super(message);\r\n        this.code = code;\r\n    }\r\n}\r\nlet getPem;\r\nclass GoogleToken {\r\n    /**\r\n     * Create a GoogleToken.\r\n     *\r\n     * @param options  Configuration object.\r\n     */\r\n    constructor(options) {\r\n        this.configure(options);\r\n    }\r\n    get accessToken() {\r\n        return this.rawToken ? this.rawToken.access_token : undefined;\r\n    }\r\n    get idToken() {\r\n        return this.rawToken ? this.rawToken.id_token : undefined;\r\n    }\r\n    get tokenType() {\r\n        return this.rawToken ? this.rawToken.token_type : undefined;\r\n    }\r\n    get refreshToken() {\r\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\r\n    }\r\n    /**\r\n     * Returns whether the token has expired.\r\n     *\r\n     * @return true if the token has expired, false otherwise.\r\n     */\r\n    hasExpired() {\r\n        const now = new Date().getTime();\r\n        if (this.rawToken && this.expiresAt) {\r\n            return now >= this.expiresAt;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether the token will expire within eagerRefreshThresholdMillis\r\n     *\r\n     * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\r\n     */\r\n    isTokenExpiring() {\r\n        var _a;\r\n        const now = new Date().getTime();\r\n        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\r\n        if (this.rawToken && this.expiresAt) {\r\n            return this.expiresAt <= now + eagerRefreshThresholdMillis;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    getToken(callback, opts = {}) {\r\n        if (typeof callback === 'object') {\r\n            opts = callback;\r\n            callback = undefined;\r\n        }\r\n        opts = Object.assign({\r\n            forceRefresh: false,\r\n        }, opts);\r\n        if (callback) {\r\n            const cb = callback;\r\n            this.getTokenAsync(opts).then(t => cb(null, t), callback);\r\n            return;\r\n        }\r\n        return this.getTokenAsync(opts);\r\n    }\r\n    /**\r\n     * Given a keyFile, extract the key and client email if available\r\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\r\n     * @returns an object with privateKey and clientEmail properties\r\n     */\r\n    async getCredentials(keyFile) {\r\n        const ext = path.extname(keyFile);\r\n        switch (ext) {\r\n            case '.json': {\r\n                const key = await readFile(keyFile, 'utf8');\r\n                const body = JSON.parse(key);\r\n                const privateKey = body.private_key;\r\n                const clientEmail = body.client_email;\r\n                if (!privateKey || !clientEmail) {\r\n                    throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\r\n                }\r\n                return { privateKey, clientEmail };\r\n            }\r\n            case '.der':\r\n            case '.crt':\r\n            case '.pem': {\r\n                const privateKey = await readFile(keyFile, 'utf8');\r\n                return { privateKey };\r\n            }\r\n            case '.p12':\r\n            case '.pfx': {\r\n                // NOTE:  The loading of `google-p12-pem` is deferred for performance\r\n                // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\r\n                // bit time to overall module loading, and is likely not frequently\r\n                // used.  In a future release, p12 support will be entirely removed.\r\n                if (!getPem) {\r\n                    getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\r\n                }\r\n                const privateKey = await getPem(keyFile);\r\n                return { privateKey };\r\n            }\r\n            default:\r\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\r\n                    'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\r\n        }\r\n    }\r\n    async getTokenAsync(opts) {\r\n        if (this.inFlightRequest && !opts.forceRefresh) {\r\n            return this.inFlightRequest;\r\n        }\r\n        try {\r\n            return await (this.inFlightRequest = this.getTokenAsyncInner(opts));\r\n        }\r\n        finally {\r\n            this.inFlightRequest = undefined;\r\n        }\r\n    }\r\n    async getTokenAsyncInner(opts) {\r\n        if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\r\n            return Promise.resolve(this.rawToken);\r\n        }\r\n        if (!this.key && !this.keyFile) {\r\n            throw new Error('No key or keyFile set.');\r\n        }\r\n        if (!this.key && this.keyFile) {\r\n            const creds = await this.getCredentials(this.keyFile);\r\n            this.key = creds.privateKey;\r\n            this.iss = creds.clientEmail || this.iss;\r\n            if (!creds.clientEmail) {\r\n                this.ensureEmail();\r\n            }\r\n        }\r\n        return this.requestToken();\r\n    }\r\n    ensureEmail() {\r\n        if (!this.iss) {\r\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\r\n        }\r\n    }\r\n    revokeToken(callback) {\r\n        if (callback) {\r\n            this.revokeTokenAsync().then(() => callback(), callback);\r\n            return;\r\n        }\r\n        return this.revokeTokenAsync();\r\n    }\r\n    async revokeTokenAsync() {\r\n        if (!this.accessToken) {\r\n            throw new Error('No token to revoke.');\r\n        }\r\n        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\r\n        await gaxios_1.request({ url });\r\n        this.configure({\r\n            email: this.iss,\r\n            sub: this.sub,\r\n            key: this.key,\r\n            keyFile: this.keyFile,\r\n            scope: this.scope,\r\n            additionalClaims: this.additionalClaims,\r\n        });\r\n    }\r\n    /**\r\n     * Configure the GoogleToken for re-use.\r\n     * @param  {object} options Configuration object.\r\n     */\r\n    configure(options = {}) {\r\n        this.keyFile = options.keyFile;\r\n        this.key = options.key;\r\n        this.rawToken = undefined;\r\n        this.iss = options.email || options.iss;\r\n        this.sub = options.sub;\r\n        this.additionalClaims = options.additionalClaims;\r\n        if (typeof options.scope === 'object') {\r\n            this.scope = options.scope.join(' ');\r\n        }\r\n        else {\r\n            this.scope = options.scope;\r\n        }\r\n        this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\r\n    }\r\n    /**\r\n     * Request the token from Google.\r\n     */\r\n    async requestToken() {\r\n        const iat = Math.floor(new Date().getTime() / 1000);\r\n        const additionalClaims = this.additionalClaims || {};\r\n        const payload = Object.assign({\r\n            iss: this.iss,\r\n            scope: this.scope,\r\n            aud: GOOGLE_TOKEN_URL,\r\n            exp: iat + 3600,\r\n            iat,\r\n            sub: this.sub,\r\n        }, additionalClaims);\r\n        const signedJWT = jws.sign({\r\n            header: { alg: 'RS256' },\r\n            payload,\r\n            secret: this.key,\r\n        });\r\n        try {\r\n            const r = await gaxios_1.request({\r\n                method: 'POST',\r\n                url: GOOGLE_TOKEN_URL,\r\n                data: {\r\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n                    assertion: signedJWT,\r\n                },\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n                responseType: 'json',\r\n            });\r\n            this.rawToken = r.data;\r\n            this.expiresAt =\r\n                r.data.expires_in === null || r.data.expires_in === undefined\r\n                    ? undefined\r\n                    : (iat + r.data.expires_in) * 1000;\r\n            return this.rawToken;\r\n        }\r\n        catch (e) {\r\n            this.rawToken = undefined;\r\n            this.tokenExpires = undefined;\r\n            const body = e.response && e.response.data ? e.response.data : {};\r\n            if (body.error) {\r\n                const desc = body.error_description\r\n                    ? `: ${body.error_description}`\r\n                    : '';\r\n                e.message = `${body.error}${desc}`;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n}\r\nexports.GoogleToken = GoogleToken;\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}