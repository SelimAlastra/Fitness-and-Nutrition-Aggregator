{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst net_1 = __importDefault(require(\"net\"));\n\nconst tls_1 = __importDefault(require(\"tls\"));\n\nconst url_1 = __importDefault(require(\"url\"));\n\nconst assert_1 = __importDefault(require(\"assert\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst agent_base_1 = require(\"agent-base\");\n\nconst parse_proxy_response_1 = __importDefault(require(\"./parse-proxy-response\"));\n\nconst debug = debug_1.default('https-proxy-agent:agent');\n/**\r\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\r\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\r\n *\r\n * Outgoing HTTP requests are first tunneled through the proxy server using the\r\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\r\n * and then the proxy server connects to the destination target and issues the\r\n * HTTP request from the proxy server.\r\n *\r\n * `https:` requests have their socket connection upgraded to TLS once\r\n * the connection to the proxy server has been established.\r\n *\r\n * @api public\r\n */\n\nclass HttpsProxyAgent extends agent_base_1.Agent {\n  constructor(_opts) {\n    let opts;\n\n    if (typeof _opts === 'string') {\n      opts = url_1.default.parse(_opts);\n    } else {\n      opts = _opts;\n    }\n\n    if (!opts) {\n      throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n    }\n\n    debug('creating new HttpsProxyAgent instance: %o', opts);\n    super(opts);\n    const proxy = Object.assign({}, opts); // If `true`, then connect to the proxy server over TLS.\n    // Defaults to `false`.\n\n    this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol); // Prefer `hostname` over `host`, and set the `port` if needed.\n\n    proxy.host = proxy.hostname || proxy.host;\n\n    if (typeof proxy.port === 'string') {\n      proxy.port = parseInt(proxy.port, 10);\n    }\n\n    if (!proxy.port && proxy.host) {\n      proxy.port = this.secureProxy ? 443 : 80;\n    } // ALPN is supported by Node.js >= v5.\n    // attempt to negotiate http/1.1 for proxy servers that support http/2\n\n\n    if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n      proxy.ALPNProtocols = ['http 1.1'];\n    }\n\n    if (proxy.host && proxy.path) {\n      // If both a `host` and `path` are specified then it's most likely\n      // the result of a `url.parse()` call... we need to remove the\n      // `path` portion so that `net.connect()` doesn't attempt to open\n      // that as a Unix socket file.\n      delete proxy.path;\n      delete proxy.pathname;\n    }\n\n    this.proxy = proxy;\n  }\n  /**\r\n   * Called when the node-core HTTP client library is creating a\r\n   * new HTTP request.\r\n   *\r\n   * @api protected\r\n   */\n\n\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        proxy,\n        secureProxy\n      } = this; // Create a socket connection to the proxy server.\n\n      let socket;\n\n      if (secureProxy) {\n        debug('Creating `tls.Socket`: %o', proxy);\n        socket = tls_1.default.connect(proxy);\n      } else {\n        debug('Creating `net.Socket`: %o', proxy);\n        socket = net_1.default.connect(proxy);\n      }\n\n      const headers = Object.assign({}, proxy.headers);\n      const hostname = `${opts.host}:${opts.port}`;\n      let payload = `CONNECT ${hostname} HTTP/1.1\\r\\n`; // Inject the `Proxy-Authorization` header if necessary.\n\n      if (proxy.auth) {\n        headers['Proxy-Authorization'] = `Basic ${Buffer.from(proxy.auth).toString('base64')}`;\n      } // The `Host` header should only include the port\n      // number when it is not the default port.\n\n\n      let {\n        host,\n        port,\n        secureEndpoint\n      } = opts;\n\n      if (!isDefaultPort(port, secureEndpoint)) {\n        host += `:${port}`;\n      }\n\n      headers.Host = host;\n      headers.Connection = 'close';\n\n      for (const name of Object.keys(headers)) {\n        payload += `${name}: ${headers[name]}\\r\\n`;\n      }\n\n      const proxyResponsePromise = parse_proxy_response_1.default(socket);\n      socket.write(`${payload}\\r\\n`);\n      const {\n        statusCode,\n        buffered\n      } = yield proxyResponsePromise;\n\n      if (statusCode === 200) {\n        req.once('socket', resume);\n\n        if (opts.secureEndpoint) {\n          const servername = opts.servername || opts.host;\n\n          if (!servername) {\n            throw new Error('Could not determine \"servername\"');\n          } // The proxy is connecting to a TLS server, so upgrade\n          // this socket connection to a TLS connection.\n\n\n          debug('Upgrading socket connection to TLS');\n          return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n            socket,\n            servername\n          }));\n        }\n\n        return socket;\n      } // Some other status code that's not 200... need to re-play the HTTP\n      // header \"data\" events onto the socket once the HTTP machinery is\n      // attached so that the node core `http` can parse and handle the\n      // error status code.\n      // Close the original socket, and a new \"fake\" socket is returned\n      // instead, so that the proxy doesn't get the HTTP request\n      // written to it (which may contain `Authorization` headers or other\n      // sensitive data).\n      //\n      // See: https://hackerone.com/reports/541502\n\n\n      socket.destroy();\n      const fakeSocket = new net_1.default.Socket();\n      fakeSocket.readable = true; // Need to wait for the \"socket\" event to re-play the \"data\" events.\n\n      req.once('socket', s => {\n        debug('replaying proxy buffer for failed request');\n        assert_1.default(s.listenerCount('data') > 0); // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n        // this point the HTTP module machinery has been hooked up for\n        // the user.\n\n        s.push(buffered);\n        s.push(null);\n      });\n      return fakeSocket;\n    });\n  }\n\n}\n\nexports.default = HttpsProxyAgent;\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction isDefaultPort(port, secure) {\n  return Boolean(!secure && port === 80 || secure && port === 443);\n}\n\nfunction isHTTPS(protocol) {\n  return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\n\nfunction omit(obj, ...keys) {\n  const ret = {};\n  let key;\n\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n\n  return ret;\n}","map":{"version":3,"sources":["../src/agent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst net_1 = __importDefault(require(\"net\"));\r\nconst tls_1 = __importDefault(require(\"tls\"));\r\nconst url_1 = __importDefault(require(\"url\"));\r\nconst assert_1 = __importDefault(require(\"assert\"));\r\nconst debug_1 = __importDefault(require(\"debug\"));\r\nconst agent_base_1 = require(\"agent-base\");\r\nconst parse_proxy_response_1 = __importDefault(require(\"./parse-proxy-response\"));\r\nconst debug = debug_1.default('https-proxy-agent:agent');\r\n/**\r\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\r\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\r\n *\r\n * Outgoing HTTP requests are first tunneled through the proxy server using the\r\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\r\n * and then the proxy server connects to the destination target and issues the\r\n * HTTP request from the proxy server.\r\n *\r\n * `https:` requests have their socket connection upgraded to TLS once\r\n * the connection to the proxy server has been established.\r\n *\r\n * @api public\r\n */\r\nclass HttpsProxyAgent extends agent_base_1.Agent {\r\n    constructor(_opts) {\r\n        let opts;\r\n        if (typeof _opts === 'string') {\r\n            opts = url_1.default.parse(_opts);\r\n        }\r\n        else {\r\n            opts = _opts;\r\n        }\r\n        if (!opts) {\r\n            throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\r\n        }\r\n        debug('creating new HttpsProxyAgent instance: %o', opts);\r\n        super(opts);\r\n        const proxy = Object.assign({}, opts);\r\n        // If `true`, then connect to the proxy server over TLS.\r\n        // Defaults to `false`.\r\n        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\r\n        // Prefer `hostname` over `host`, and set the `port` if needed.\r\n        proxy.host = proxy.hostname || proxy.host;\r\n        if (typeof proxy.port === 'string') {\r\n            proxy.port = parseInt(proxy.port, 10);\r\n        }\r\n        if (!proxy.port && proxy.host) {\r\n            proxy.port = this.secureProxy ? 443 : 80;\r\n        }\r\n        // ALPN is supported by Node.js >= v5.\r\n        // attempt to negotiate http/1.1 for proxy servers that support http/2\r\n        if (this.secureProxy && !('ALPNProtocols' in proxy)) {\r\n            proxy.ALPNProtocols = ['http 1.1'];\r\n        }\r\n        if (proxy.host && proxy.path) {\r\n            // If both a `host` and `path` are specified then it's most likely\r\n            // the result of a `url.parse()` call... we need to remove the\r\n            // `path` portion so that `net.connect()` doesn't attempt to open\r\n            // that as a Unix socket file.\r\n            delete proxy.path;\r\n            delete proxy.pathname;\r\n        }\r\n        this.proxy = proxy;\r\n    }\r\n    /**\r\n     * Called when the node-core HTTP client library is creating a\r\n     * new HTTP request.\r\n     *\r\n     * @api protected\r\n     */\r\n    callback(req, opts) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { proxy, secureProxy } = this;\r\n            // Create a socket connection to the proxy server.\r\n            let socket;\r\n            if (secureProxy) {\r\n                debug('Creating `tls.Socket`: %o', proxy);\r\n                socket = tls_1.default.connect(proxy);\r\n            }\r\n            else {\r\n                debug('Creating `net.Socket`: %o', proxy);\r\n                socket = net_1.default.connect(proxy);\r\n            }\r\n            const headers = Object.assign({}, proxy.headers);\r\n            const hostname = `${opts.host}:${opts.port}`;\r\n            let payload = `CONNECT ${hostname} HTTP/1.1\\r\\n`;\r\n            // Inject the `Proxy-Authorization` header if necessary.\r\n            if (proxy.auth) {\r\n                headers['Proxy-Authorization'] = `Basic ${Buffer.from(proxy.auth).toString('base64')}`;\r\n            }\r\n            // The `Host` header should only include the port\r\n            // number when it is not the default port.\r\n            let { host, port, secureEndpoint } = opts;\r\n            if (!isDefaultPort(port, secureEndpoint)) {\r\n                host += `:${port}`;\r\n            }\r\n            headers.Host = host;\r\n            headers.Connection = 'close';\r\n            for (const name of Object.keys(headers)) {\r\n                payload += `${name}: ${headers[name]}\\r\\n`;\r\n            }\r\n            const proxyResponsePromise = parse_proxy_response_1.default(socket);\r\n            socket.write(`${payload}\\r\\n`);\r\n            const { statusCode, buffered } = yield proxyResponsePromise;\r\n            if (statusCode === 200) {\r\n                req.once('socket', resume);\r\n                if (opts.secureEndpoint) {\r\n                    const servername = opts.servername || opts.host;\r\n                    if (!servername) {\r\n                        throw new Error('Could not determine \"servername\"');\r\n                    }\r\n                    // The proxy is connecting to a TLS server, so upgrade\r\n                    // this socket connection to a TLS connection.\r\n                    debug('Upgrading socket connection to TLS');\r\n                    return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), { socket,\r\n                        servername }));\r\n                }\r\n                return socket;\r\n            }\r\n            // Some other status code that's not 200... need to re-play the HTTP\r\n            // header \"data\" events onto the socket once the HTTP machinery is\r\n            // attached so that the node core `http` can parse and handle the\r\n            // error status code.\r\n            // Close the original socket, and a new \"fake\" socket is returned\r\n            // instead, so that the proxy doesn't get the HTTP request\r\n            // written to it (which may contain `Authorization` headers or other\r\n            // sensitive data).\r\n            //\r\n            // See: https://hackerone.com/reports/541502\r\n            socket.destroy();\r\n            const fakeSocket = new net_1.default.Socket();\r\n            fakeSocket.readable = true;\r\n            // Need to wait for the \"socket\" event to re-play the \"data\" events.\r\n            req.once('socket', (s) => {\r\n                debug('replaying proxy buffer for failed request');\r\n                assert_1.default(s.listenerCount('data') > 0);\r\n                // Replay the \"buffered\" Buffer onto the fake `socket`, since at\r\n                // this point the HTTP module machinery has been hooked up for\r\n                // the user.\r\n                s.push(buffered);\r\n                s.push(null);\r\n            });\r\n            return fakeSocket;\r\n        });\r\n    }\r\n}\r\nexports.default = HttpsProxyAgent;\r\nfunction resume(socket) {\r\n    socket.resume();\r\n}\r\nfunction isDefaultPort(port, secure) {\r\n    return Boolean((!secure && port === 80) || (secure && port === 443));\r\n}\r\nfunction isHTTPS(protocol) {\r\n    return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\r\n}\r\nfunction omit(obj, ...keys) {\r\n    const ret = {};\r\n    let key;\r\n    for (key in obj) {\r\n        if (!keys.includes(key)) {\r\n            ret[key] = obj[key];\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n//# sourceMappingURL=agent.js.map"]},"metadata":{},"sourceType":"script"}