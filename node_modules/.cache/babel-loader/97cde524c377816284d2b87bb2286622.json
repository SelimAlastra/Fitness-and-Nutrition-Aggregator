{"ast":null,"code":"/**\r\n * Password-based encryption functions.\r\n *\r\n * @author Dave Longley\r\n * @author Stefan Siegl <stesie@brokenpipe.de>\r\n *\r\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n *\r\n * An EncryptedPrivateKeyInfo:\r\n *\r\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\r\n *   encryptedData        EncryptedData }\r\n *\r\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\r\n *\r\n * EncryptedData ::= OCTET STRING\r\n */\nvar forge = require('./forge');\n\nrequire('./aes');\n\nrequire('./asn1');\n\nrequire('./des');\n\nrequire('./md');\n\nrequire('./oids');\n\nrequire('./pbkdf2');\n\nrequire('./pem');\n\nrequire('./random');\n\nrequire('./rc2');\n\nrequire('./rsa');\n\nrequire('./util');\n\nif (typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n} // shortcut for asn.1 API\n\n\nvar asn1 = forge.asn1;\n/* Password-based encryption implementation. */\n\nvar pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids; // validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\n\nvar encryptedPrivateKeyValidator = {\n  name: 'EncryptedPrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encryptionOid'\n    }, {\n      name: 'AlgorithmIdentifier.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'encryptionParams'\n    }]\n  }, {\n    // encryptedData\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encryptedData'\n  }]\n}; // validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\n\nvar PBES2AlgorithmsValidator = {\n  name: 'PBES2Algorithms',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PBES2Algorithms.keyDerivationFunc',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'kdfOid'\n    }, {\n      name: 'PBES2Algorithms.params',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'PBES2Algorithms.params.salt',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'kdfSalt'\n      }, {\n        name: 'PBES2Algorithms.params.iterationCount',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'kdfIterationCount'\n      }, {\n        name: 'PBES2Algorithms.params.keyLength',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        optional: true,\n        capture: 'keyLength'\n      }, {\n        // prf\n        name: 'PBES2Algorithms.params.prf',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        optional: true,\n        value: [{\n          name: 'PBES2Algorithms.params.prf.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'prfOid'\n        }]\n      }]\n    }]\n  }, {\n    name: 'PBES2Algorithms.encryptionScheme',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.encryptionScheme.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encOid'\n    }, {\n      name: 'PBES2Algorithms.encryptionScheme.iv',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'encIv'\n    }]\n  }]\n};\nvar pkcs12PbeParamsValidator = {\n  name: 'pkcs-12PbeParams',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'pkcs-12PbeParams.salt',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'salt'\n  }, {\n    name: 'pkcs-12PbeParams.iterations',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'iterations'\n  }]\n};\n/**\r\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\r\n *\r\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\r\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\r\n *\r\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\r\n *\r\n * PBES2-params ::= SEQUENCE {\r\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\r\n * }\r\n *\r\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\r\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\r\n *\r\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\r\n *\r\n * PBKDF2-params ::= SEQUENCE {\r\n *   salt CHOICE {\r\n *     specified OCTET STRING,\r\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\r\n *   },\r\n *   iterationCount INTEGER (1..MAX),\r\n *   keyLength INTEGER (1..MAX) OPTIONAL,\r\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\r\n * }\r\n *\r\n * @param obj the ASN.1 PrivateKeyInfo object.\r\n * @param password the password to encrypt with.\r\n * @param options:\r\n *          algorithm the encryption algorithm to use\r\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\r\n *          count the iteration count to use.\r\n *          saltSize the salt size to use.\r\n *          prfAlgorithm the PRF message digest algorithm to use\r\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\r\n *\r\n * @return the ASN.1 EncryptedPrivateKeyInfo.\r\n */\n\npki.encryptPrivateKeyInfo = function (obj, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || 'aes128';\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1'; // generate PBE params\n\n  var salt = forge.random.getBytesSync(options.saltSize);\n  var count = options.count;\n  var countBytes = asn1.integerToDer(count);\n  var dkLen;\n  var encryptionAlgorithm;\n  var encryptedData;\n\n  if (options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\n    // do PBES2\n    var ivLen, encOid, cipherFn;\n\n    switch (options.algorithm) {\n      case 'aes128':\n        dkLen = 16;\n        ivLen = 16;\n        encOid = oids['aes128-CBC'];\n        cipherFn = forge.aes.createEncryptionCipher;\n        break;\n\n      case 'aes192':\n        dkLen = 24;\n        ivLen = 16;\n        encOid = oids['aes192-CBC'];\n        cipherFn = forge.aes.createEncryptionCipher;\n        break;\n\n      case 'aes256':\n        dkLen = 32;\n        ivLen = 16;\n        encOid = oids['aes256-CBC'];\n        cipherFn = forge.aes.createEncryptionCipher;\n        break;\n\n      case 'des':\n        dkLen = 8;\n        ivLen = 8;\n        encOid = oids['desCBC'];\n        cipherFn = forge.des.createEncryptionCipher;\n        break;\n\n      default:\n        var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n        error.algorithm = options.algorithm;\n        throw error;\n    } // get PRF message digest\n\n\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm); // encrypt private key using pbe SHA-1 and AES/DES\n\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = forge.random.getBytesSync(ivLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes(); // get PBKDF2-params\n\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBES2']).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// keyDerivationFunc\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()), // PBKDF2-params\n    params]), // encryptionScheme\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(encOid).getBytes()), // iv\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)])])]);\n  } else if (options.algorithm === '3des') {\n    // Do PKCS12 PBE\n    dkLen = 24;\n    var saltBytes = new forge.util.ByteBuffer(salt);\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n    var cipher = forge.des.createEncryptionCipher(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()), // pkcs-12PbeParams\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// salt\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt), // iteration count\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())])]);\n  } else {\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n    error.algorithm = options.algorithm;\n    throw error;\n  } // EncryptedPrivateKeyInfo\n\n\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// encryptionAlgorithm\n  encryptionAlgorithm, // encryptedData\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)]);\n  return rval;\n};\n/**\r\n * Decrypts a ASN.1 PrivateKeyInfo object.\r\n *\r\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\r\n * @param password the password to decrypt with.\r\n *\r\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\r\n */\n\n\npki.decryptPrivateKeyInfo = function (obj, password) {\n  var rval = null; // get PBE params\n\n  var capture = {};\n  var errors = [];\n\n  if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read encrypted private key. ' + 'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  } // get cipher\n\n\n  var oid = asn1.derToOid(capture.encryptionOid);\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password); // get encrypted data\n\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\n  cipher.update(encrypted);\n\n  if (cipher.finish()) {\n    rval = asn1.fromDer(cipher.output);\n  }\n\n  return rval;\n};\n/**\r\n * Converts a EncryptedPrivateKeyInfo to PEM format.\r\n *\r\n * @param epki the EncryptedPrivateKeyInfo.\r\n * @param maxline the maximum characters per line, defaults to 64.\r\n *\r\n * @return the PEM-formatted encrypted private key.\r\n */\n\n\npki.encryptedPrivateKeyToPem = function (epki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'ENCRYPTED PRIVATE KEY',\n    body: asn1.toDer(epki).getBytes()\n  };\n  return forge.pem.encode(msg, {\n    maxline: maxline\n  });\n};\n/**\r\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\r\n * is not performed.\r\n *\r\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\r\n *\r\n * @return the ASN.1 EncryptedPrivateKeyInfo.\r\n */\n\n\npki.encryptedPrivateKeyFromPem = function (pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if (msg.type !== 'ENCRYPTED PRIVATE KEY') {\n    var error = new Error('Could not convert encrypted private key from PEM; ' + 'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert encrypted private key from PEM; ' + 'PEM is encrypted.');\n  } // convert DER to ASN.1 object\n\n\n  return asn1.fromDer(msg.body);\n};\n/**\r\n * Encrypts an RSA private key. By default, the key will be wrapped in\r\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\r\n * This is the standard, preferred way to encrypt a private key.\r\n *\r\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\r\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\r\n * private key encryption), set the 'legacy' option to true. Note: Using this\r\n * option will cause the iteration count to be forced to 1.\r\n *\r\n * Note: The 'des' algorithm is supported, but it is not considered to be\r\n * secure because it only uses a single 56-bit key. If possible, it is highly\r\n * recommended that a different algorithm be used.\r\n *\r\n * @param rsaKey the RSA key to encrypt.\r\n * @param password the password to use.\r\n * @param options:\r\n *          algorithm: the encryption algorithm to use\r\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\r\n *          count: the iteration count to use.\r\n *          saltSize: the salt size to use.\r\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\r\n *            headers (DEK-Info) private key.\r\n *\r\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\r\n */\n\n\npki.encryptRsaPrivateKey = function (rsaKey, password, options) {\n  // standard PKCS#8\n  options = options || {};\n\n  if (!options.legacy) {\n    // encrypt PrivateKeyInfo\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\n    return pki.encryptedPrivateKeyToPem(rval);\n  } // legacy non-PKCS#8\n\n\n  var algorithm;\n  var iv;\n  var dkLen;\n  var cipherFn;\n\n  switch (options.algorithm) {\n    case 'aes128':\n      algorithm = 'AES-128-CBC';\n      dkLen = 16;\n      iv = forge.random.getBytesSync(16);\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n\n    case 'aes192':\n      algorithm = 'AES-192-CBC';\n      dkLen = 24;\n      iv = forge.random.getBytesSync(16);\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n\n    case 'aes256':\n      algorithm = 'AES-256-CBC';\n      dkLen = 32;\n      iv = forge.random.getBytesSync(16);\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n\n    case '3des':\n      algorithm = 'DES-EDE3-CBC';\n      dkLen = 24;\n      iv = forge.random.getBytesSync(8);\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n\n    case 'des':\n      algorithm = 'DES-CBC';\n      dkLen = 8;\n      iv = forge.random.getBytesSync(8);\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n\n    default:\n      var error = new Error('Could not encrypt RSA private key; unsupported ' + 'encryption algorithm \"' + options.algorithm + '\".');\n      error.algorithm = options.algorithm;\n      throw error;\n  } // encrypt private key using OpenSSL legacy key derivation\n\n\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n  cipher.finish();\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    procType: {\n      version: '4',\n      type: 'ENCRYPTED'\n    },\n    dekInfo: {\n      algorithm: algorithm,\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\n    },\n    body: cipher.output.getBytes()\n  };\n  return forge.pem.encode(msg);\n};\n/**\r\n * Decrypts an RSA private key.\r\n *\r\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\r\n * @param password the password to use.\r\n *\r\n * @return the RSA key on success, null on failure.\r\n */\n\n\npki.decryptRsaPrivateKey = function (pem, password) {\n  var rval = null;\n  var msg = forge.pem.decode(pem)[0];\n\n  if (msg.type !== 'ENCRYPTED PRIVATE KEY' && msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM header type ' + 'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n    error.headerType = error;\n    throw error;\n  }\n\n  if (msg.procType && msg.procType.type === 'ENCRYPTED') {\n    var dkLen;\n    var cipherFn;\n\n    switch (msg.dekInfo.algorithm) {\n      case 'DES-CBC':\n        dkLen = 8;\n        cipherFn = forge.des.createDecryptionCipher;\n        break;\n\n      case 'DES-EDE3-CBC':\n        dkLen = 24;\n        cipherFn = forge.des.createDecryptionCipher;\n        break;\n\n      case 'AES-128-CBC':\n        dkLen = 16;\n        cipherFn = forge.aes.createDecryptionCipher;\n        break;\n\n      case 'AES-192-CBC':\n        dkLen = 24;\n        cipherFn = forge.aes.createDecryptionCipher;\n        break;\n\n      case 'AES-256-CBC':\n        dkLen = 32;\n        cipherFn = forge.aes.createDecryptionCipher;\n        break;\n\n      case 'RC2-40-CBC':\n        dkLen = 5;\n\n        cipherFn = function (key) {\n          return forge.rc2.createDecryptionCipher(key, 40);\n        };\n\n        break;\n\n      case 'RC2-64-CBC':\n        dkLen = 8;\n\n        cipherFn = function (key) {\n          return forge.rc2.createDecryptionCipher(key, 64);\n        };\n\n        break;\n\n      case 'RC2-128-CBC':\n        dkLen = 16;\n\n        cipherFn = function (key) {\n          return forge.rc2.createDecryptionCipher(key, 128);\n        };\n\n        break;\n\n      default:\n        var error = new Error('Could not decrypt private key; unsupported ' + 'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n        error.algorithm = msg.dekInfo.algorithm;\n        throw error;\n    } // use OpenSSL legacy key derivation\n\n\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(forge.util.createBuffer(msg.body));\n\n    if (cipher.finish()) {\n      rval = cipher.output.getBytes();\n    } else {\n      return rval;\n    }\n  } else {\n    rval = msg.body;\n  }\n\n  if (msg.type === 'ENCRYPTED PRIVATE KEY') {\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n  } else {\n    // decryption already performed above\n    rval = asn1.fromDer(rval);\n  }\n\n  if (rval !== null) {\n    rval = pki.privateKeyFromAsn1(rval);\n  }\n\n  return rval;\n};\n/**\r\n * Derives a PKCS#12 key.\r\n *\r\n * @param password the password to derive the key material from, null or\r\n *          undefined for none.\r\n * @param salt the salt, as a ByteBuffer, to use.\r\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\r\n * @param iter the iteration count.\r\n * @param n the number of bytes to derive from the password.\r\n * @param md the message digest to use, defaults to SHA-1.\r\n *\r\n * @return a ByteBuffer with the bytes derived from the password.\r\n */\n\n\npki.pbe.generatePkcs12Key = function (password, salt, id, iter, n, md) {\n  var j, l;\n\n  if (typeof md === 'undefined' || md === null) {\n    if (!('sha1' in forge.md)) {\n      throw new Error('\"sha1\" hash algorithm unavailable.');\n    }\n\n    md = forge.md.sha1.create();\n  }\n\n  var u = md.digestLength;\n  var v = md.blockLength;\n  var result = new forge.util.ByteBuffer();\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\n\n  var passBuf = new forge.util.ByteBuffer();\n\n  if (password !== null && password !== undefined) {\n    for (l = 0; l < password.length; l++) {\n      passBuf.putInt16(password.charCodeAt(l));\n    }\n\n    passBuf.putInt16(0);\n  }\n  /* Length of salt and password in BYTES. */\n\n\n  var p = passBuf.length();\n  var s = salt.length();\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\r\n        v copies of ID. */\n\n  var D = new forge.util.ByteBuffer();\n  D.fillWithByte(id, v);\n  /* 2. Concatenate copies of the salt together to create a string S of length\r\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\r\n        to create S).\r\n        Note that if the salt is the empty string, then so is S. */\n\n  var Slen = v * Math.ceil(s / v);\n  var S = new forge.util.ByteBuffer();\n\n  for (l = 0; l < Slen; l++) {\n    S.putByte(salt.at(l % s));\n  }\n  /* 3. Concatenate copies of the password together to create a string P of\r\n        length v * ceil(p / v) bytes (the final copy of the password may be\r\n        truncated to create P).\r\n        Note that if the password is the empty string, then so is P. */\n\n\n  var Plen = v * Math.ceil(p / v);\n  var P = new forge.util.ByteBuffer();\n\n  for (l = 0; l < Plen; l++) {\n    P.putByte(passBuf.at(l % p));\n  }\n  /* 4. Set I=S||P to be the concatenation of S and P. */\n\n\n  var I = S;\n  I.putBuffer(P);\n  /* 5. Set c=ceil(n / u). */\n\n  var c = Math.ceil(n / u);\n  /* 6. For i=1, 2, ..., c, do the following: */\n\n  for (var i = 1; i <= c; i++) {\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\n    var buf = new forge.util.ByteBuffer();\n    buf.putBytes(D.bytes());\n    buf.putBytes(I.bytes());\n\n    for (var round = 0; round < iter; round++) {\n      md.start();\n      md.update(buf.getBytes());\n      buf = md.digest();\n    }\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\r\n          final copy of Ai may be truncated to create B). */\n\n\n    var B = new forge.util.ByteBuffer();\n\n    for (l = 0; l < v; l++) {\n      B.putByte(buf.at(l % u));\n    }\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\r\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\r\n          Ij=(Ij+B+1) mod 2v for each j.  */\n\n\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\n    var Inew = new forge.util.ByteBuffer();\n\n    for (j = 0; j < k; j++) {\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n      var x = 0x1ff;\n\n      for (l = B.length() - 1; l >= 0; l--) {\n        x = x >> 8;\n        x += B.at(l) + chunk.at(l);\n        chunk.setAt(l, x & 0xff);\n      }\n\n      Inew.putBuffer(chunk);\n    }\n\n    I = Inew;\n    /* Add Ai to A. */\n\n    result.putBuffer(buf);\n  }\n\n  result.truncate(result.length() - n);\n  return result;\n};\n/**\r\n * Get new Forge cipher object instance.\r\n *\r\n * @param oid the OID (in string notation).\r\n * @param params the ASN.1 params object.\r\n * @param password the password to decrypt with.\r\n *\r\n * @return new cipher object instance.\r\n */\n\n\npki.pbe.getCipher = function (oid, params, password) {\n  switch (oid) {\n    case pki.oids['pkcs5PBES2']:\n      return pki.pbe.getCipherForPBES2(oid, params, password);\n\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n\n    default:\n      var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\n      error.oid = oid;\n      error.supportedOids = ['pkcs5PBES2', 'pbeWithSHAAnd3-KeyTripleDES-CBC', 'pbewithSHAAnd40BitRC2-CBC'];\n      throw error;\n  }\n};\n/**\r\n * Get new Forge cipher object instance according to PBES2 params block.\r\n *\r\n * The returned cipher instance is already started using the IV\r\n * from PBES2 parameter block.\r\n *\r\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\r\n * @param params the ASN.1 PBES2-params object.\r\n * @param password the password to decrypt with.\r\n *\r\n * @return new cipher object instance.\r\n */\n\n\npki.pbe.getCipherForPBES2 = function (oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n\n  if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  } // check oids\n\n\n  oid = asn1.derToOid(capture.kdfOid);\n\n  if (oid !== pki.oids['pkcs5PBKDF2']) {\n    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported key derivation function OID.');\n    error.oid = oid;\n    error.supportedOids = ['pkcs5PBKDF2'];\n    throw error;\n  }\n\n  oid = asn1.derToOid(capture.encOid);\n\n  if (oid !== pki.oids['aes128-CBC'] && oid !== pki.oids['aes192-CBC'] && oid !== pki.oids['aes256-CBC'] && oid !== pki.oids['des-EDE3-CBC'] && oid !== pki.oids['desCBC']) {\n    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported encryption scheme OID.');\n    error.oid = oid;\n    error.supportedOids = ['aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\n    throw error;\n  } // set PBE params\n\n\n  var salt = capture.kdfSalt;\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\n  count = count.getInt(count.length() << 3);\n  var dkLen;\n  var cipherFn;\n\n  switch (pki.oids[oid]) {\n    case 'aes128-CBC':\n      dkLen = 16;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n\n    case 'aes192-CBC':\n      dkLen = 24;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n\n    case 'aes256-CBC':\n      dkLen = 32;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n\n    case 'des-EDE3-CBC':\n      dkLen = 24;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n\n    case 'desCBC':\n      dkLen = 8;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n  } // get PRF message digest\n\n\n  var md = prfOidToMessageDigest(capture.prfOid); // decrypt private key using pbe with chosen PRF and AES/DES\n\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n  var iv = capture.encIv;\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  return cipher;\n};\n/**\r\n * Get new Forge cipher object instance for PKCS#12 PBE.\r\n *\r\n * The returned cipher instance is already started using the key & IV\r\n * derived from the provided password and PKCS#12 PBE salt.\r\n *\r\n * @param oid The PKCS#12 PBE OID (in string notation).\r\n * @param params The ASN.1 PKCS#12 PBE-params object.\r\n * @param password The password to decrypt with.\r\n *\r\n * @return the new cipher object instance.\r\n */\n\n\npki.pbe.getCipherForPKCS12PBE = function (oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n\n  if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var salt = forge.util.createBuffer(capture.salt);\n  var count = forge.util.createBuffer(capture.iterations);\n  count = count.getInt(count.length() << 3);\n  var dkLen, dIvLen, cipherFn;\n\n  switch (oid) {\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n      dkLen = 24;\n      dIvLen = 8;\n      cipherFn = forge.des.startDecrypting;\n      break;\n\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      dkLen = 5;\n      dIvLen = 8;\n\n      cipherFn = function (key, iv) {\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\n        cipher.start(iv, null);\n        return cipher;\n      };\n\n      break;\n\n    default:\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\n      error.oid = oid;\n      throw error;\n  } // get PRF message digest\n\n\n  var md = prfOidToMessageDigest(capture.prfOid);\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n  md.start();\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n  return cipherFn(key, iv);\n};\n/**\r\n * OpenSSL's legacy key derivation function.\r\n *\r\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\r\n *\r\n * @param password the password to derive the key from.\r\n * @param salt the salt to use, null for none.\r\n * @param dkLen the number of bytes needed for the derived key.\r\n * @param [options] the options to use:\r\n *          [md] an optional message digest object to use.\r\n */\n\n\npki.pbe.opensslDeriveBytes = function (password, salt, dkLen, md) {\n  if (typeof md === 'undefined' || md === null) {\n    if (!('md5' in forge.md)) {\n      throw new Error('\"md5\" hash algorithm unavailable.');\n    }\n\n    md = forge.md.md5.create();\n  }\n\n  if (salt === null) {\n    salt = '';\n  }\n\n  var digests = [hash(md, password + salt)];\n\n  for (var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n    digests.push(hash(md, digests[i - 1] + password + salt));\n  }\n\n  return digests.join('').substr(0, dkLen);\n};\n\nfunction hash(md, bytes) {\n  return md.start().update(bytes).digest().getBytes();\n}\n\nfunction prfOidToMessageDigest(prfOid) {\n  // get PRF algorithm, default to SHA-1\n  var prfAlgorithm;\n\n  if (!prfOid) {\n    prfAlgorithm = 'hmacWithSHA1';\n  } else {\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n\n    if (!prfAlgorithm) {\n      var error = new Error('Unsupported PRF OID.');\n      error.oid = prfOid;\n      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];\n      throw error;\n    }\n  }\n\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\n\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n  var factory = forge.md;\n\n  switch (prfAlgorithm) {\n    case 'hmacWithSHA224':\n      factory = forge.md.sha512;\n\n    case 'hmacWithSHA1':\n    case 'hmacWithSHA256':\n    case 'hmacWithSHA384':\n    case 'hmacWithSHA512':\n      prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n      break;\n\n    default:\n      var error = new Error('Unsupported PRF algorithm.');\n      error.algorithm = prfAlgorithm;\n      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];\n      throw error;\n  }\n\n  if (!factory || !(prfAlgorithm in factory)) {\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\n  }\n\n  return factory[prfAlgorithm].create();\n}\n\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// salt\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt), // iteration count\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())]); // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n\n  if (prfAlgorithm !== 'hmacWithSHA1') {\n    params.value.push( // key length\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(dkLen.toString(16))), // AlgorithmIdentifier\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()), // parameters (null)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]));\n  }\n\n  return params;\n}","map":{"version":3,"sources":["C:/Users/ibott/MajorGroupProject/node_modules/node-forge/lib/pbe.js"],"names":["forge","require","BigInteger","jsbn","asn1","pki","module","exports","pbe","oids","encryptedPrivateKeyValidator","name","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","OID","capture","captureAsn1","OCTETSTRING","PBES2AlgorithmsValidator","INTEGER","optional","pkcs12PbeParamsValidator","encryptPrivateKeyInfo","obj","password","options","saltSize","count","algorithm","prfAlgorithm","salt","random","getBytesSync","countBytes","integerToDer","dkLen","encryptionAlgorithm","encryptedData","indexOf","ivLen","encOid","cipherFn","aes","createEncryptionCipher","des","error","Error","toUpperCase","md","prfAlgorithmToMessageDigest","dk","pkcs5","pbkdf2","iv","cipher","start","update","toDer","finish","output","getBytes","params","createPbkdf2Params","create","oidToDer","saltBytes","util","ByteBuffer","generatePkcs12Key","rval","decryptPrivateKeyInfo","errors","validate","oid","derToOid","encryptionOid","getCipher","encryptionParams","encrypted","createBuffer","fromDer","encryptedPrivateKeyToPem","epki","maxline","msg","body","pem","encode","encryptedPrivateKeyFromPem","decode","headerType","procType","encryptRsaPrivateKey","rsaKey","legacy","wrapRsaPrivateKey","privateKeyToAsn1","opensslDeriveBytes","substr","version","dekInfo","parameters","bytesToHex","decryptRsaPrivateKey","createDecryptionCipher","key","rc2","hexToBytes","privateKeyFromAsn1","id","iter","n","j","l","sha1","u","digestLength","v","blockLength","result","passBuf","undefined","length","putInt16","charCodeAt","p","s","D","fillWithByte","Slen","Math","ceil","S","putByte","at","Plen","P","I","putBuffer","c","i","buf","putBytes","bytes","round","digest","B","k","Inew","chunk","x","setAt","truncate","getCipherForPBES2","getCipherForPKCS12PBE","supportedOids","kdfOid","kdfSalt","kdfIterationCount","getInt","prfOidToMessageDigest","prfOid","encIv","iterations","dIvLen","startDecrypting","md5","digests","hash","push","join","supported","factory","sha512","toLowerCase","toString","NULL"],"mappings":"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","sourcesContent":["/**\r\n * Password-based encryption functions.\r\n *\r\n * @author Dave Longley\r\n * @author Stefan Siegl <stesie@brokenpipe.de>\r\n *\r\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\r\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\r\n *\r\n * An EncryptedPrivateKeyInfo:\r\n *\r\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\r\n *   encryptedData        EncryptedData }\r\n *\r\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\r\n *\r\n * EncryptedData ::= OCTET STRING\r\n */\r\nvar forge = require('./forge');\r\nrequire('./aes');\r\nrequire('./asn1');\r\nrequire('./des');\r\nrequire('./md');\r\nrequire('./oids');\r\nrequire('./pbkdf2');\r\nrequire('./pem');\r\nrequire('./random');\r\nrequire('./rc2');\r\nrequire('./rsa');\r\nrequire('./util');\r\n\r\nif(typeof BigInteger === 'undefined') {\r\n  var BigInteger = forge.jsbn.BigInteger;\r\n}\r\n\r\n// shortcut for asn.1 API\r\nvar asn1 = forge.asn1;\r\n\r\n/* Password-based encryption implementation. */\r\nvar pki = forge.pki = forge.pki || {};\r\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\r\nvar oids = pki.oids;\r\n\r\n// validator for an EncryptedPrivateKeyInfo structure\r\n// Note: Currently only works w/algorithm params\r\nvar encryptedPrivateKeyValidator = {\r\n  name: 'EncryptedPrivateKeyInfo',\r\n  tagClass: asn1.Class.UNIVERSAL,\r\n  type: asn1.Type.SEQUENCE,\r\n  constructed: true,\r\n  value: [{\r\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.SEQUENCE,\r\n    constructed: true,\r\n    value: [{\r\n      name: 'AlgorithmIdentifier.algorithm',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.OID,\r\n      constructed: false,\r\n      capture: 'encryptionOid'\r\n    }, {\r\n      name: 'AlgorithmIdentifier.parameters',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.SEQUENCE,\r\n      constructed: true,\r\n      captureAsn1: 'encryptionParams'\r\n    }]\r\n  }, {\r\n    // encryptedData\r\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.OCTETSTRING,\r\n    constructed: false,\r\n    capture: 'encryptedData'\r\n  }]\r\n};\r\n\r\n// validator for a PBES2Algorithms structure\r\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\r\nvar PBES2AlgorithmsValidator = {\r\n  name: 'PBES2Algorithms',\r\n  tagClass: asn1.Class.UNIVERSAL,\r\n  type: asn1.Type.SEQUENCE,\r\n  constructed: true,\r\n  value: [{\r\n    name: 'PBES2Algorithms.keyDerivationFunc',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.SEQUENCE,\r\n    constructed: true,\r\n    value: [{\r\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.OID,\r\n      constructed: false,\r\n      capture: 'kdfOid'\r\n    }, {\r\n      name: 'PBES2Algorithms.params',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.SEQUENCE,\r\n      constructed: true,\r\n      value: [{\r\n        name: 'PBES2Algorithms.params.salt',\r\n        tagClass: asn1.Class.UNIVERSAL,\r\n        type: asn1.Type.OCTETSTRING,\r\n        constructed: false,\r\n        capture: 'kdfSalt'\r\n      }, {\r\n        name: 'PBES2Algorithms.params.iterationCount',\r\n        tagClass: asn1.Class.UNIVERSAL,\r\n        type: asn1.Type.INTEGER,\r\n        constructed: false,\r\n        capture: 'kdfIterationCount'\r\n      }, {\r\n        name: 'PBES2Algorithms.params.keyLength',\r\n        tagClass: asn1.Class.UNIVERSAL,\r\n        type: asn1.Type.INTEGER,\r\n        constructed: false,\r\n        optional: true,\r\n        capture: 'keyLength'\r\n      }, {\r\n        // prf\r\n        name: 'PBES2Algorithms.params.prf',\r\n        tagClass: asn1.Class.UNIVERSAL,\r\n        type: asn1.Type.SEQUENCE,\r\n        constructed: true,\r\n        optional: true,\r\n        value: [{\r\n          name: 'PBES2Algorithms.params.prf.algorithm',\r\n          tagClass: asn1.Class.UNIVERSAL,\r\n          type: asn1.Type.OID,\r\n          constructed: false,\r\n          capture: 'prfOid'\r\n        }]\r\n      }]\r\n    }]\r\n  }, {\r\n    name: 'PBES2Algorithms.encryptionScheme',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.SEQUENCE,\r\n    constructed: true,\r\n    value: [{\r\n      name: 'PBES2Algorithms.encryptionScheme.oid',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.OID,\r\n      constructed: false,\r\n      capture: 'encOid'\r\n    }, {\r\n      name: 'PBES2Algorithms.encryptionScheme.iv',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.OCTETSTRING,\r\n      constructed: false,\r\n      capture: 'encIv'\r\n    }]\r\n  }]\r\n};\r\n\r\nvar pkcs12PbeParamsValidator = {\r\n  name: 'pkcs-12PbeParams',\r\n  tagClass: asn1.Class.UNIVERSAL,\r\n  type: asn1.Type.SEQUENCE,\r\n  constructed: true,\r\n  value: [{\r\n    name: 'pkcs-12PbeParams.salt',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.OCTETSTRING,\r\n    constructed: false,\r\n    capture: 'salt'\r\n  }, {\r\n    name: 'pkcs-12PbeParams.iterations',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.INTEGER,\r\n    constructed: false,\r\n    capture: 'iterations'\r\n  }]\r\n};\r\n\r\n/**\r\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\r\n *\r\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\r\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\r\n *\r\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\r\n *\r\n * PBES2-params ::= SEQUENCE {\r\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\r\n * }\r\n *\r\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\r\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\r\n *\r\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\r\n *\r\n * PBKDF2-params ::= SEQUENCE {\r\n *   salt CHOICE {\r\n *     specified OCTET STRING,\r\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\r\n *   },\r\n *   iterationCount INTEGER (1..MAX),\r\n *   keyLength INTEGER (1..MAX) OPTIONAL,\r\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\r\n * }\r\n *\r\n * @param obj the ASN.1 PrivateKeyInfo object.\r\n * @param password the password to encrypt with.\r\n * @param options:\r\n *          algorithm the encryption algorithm to use\r\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\r\n *          count the iteration count to use.\r\n *          saltSize the salt size to use.\r\n *          prfAlgorithm the PRF message digest algorithm to use\r\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\r\n *\r\n * @return the ASN.1 EncryptedPrivateKeyInfo.\r\n */\r\npki.encryptPrivateKeyInfo = function(obj, password, options) {\r\n  // set default options\r\n  options = options || {};\r\n  options.saltSize = options.saltSize || 8;\r\n  options.count = options.count || 2048;\r\n  options.algorithm = options.algorithm || 'aes128';\r\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1';\r\n\r\n  // generate PBE params\r\n  var salt = forge.random.getBytesSync(options.saltSize);\r\n  var count = options.count;\r\n  var countBytes = asn1.integerToDer(count);\r\n  var dkLen;\r\n  var encryptionAlgorithm;\r\n  var encryptedData;\r\n  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\r\n    // do PBES2\r\n    var ivLen, encOid, cipherFn;\r\n    switch(options.algorithm) {\r\n    case 'aes128':\r\n      dkLen = 16;\r\n      ivLen = 16;\r\n      encOid = oids['aes128-CBC'];\r\n      cipherFn = forge.aes.createEncryptionCipher;\r\n      break;\r\n    case 'aes192':\r\n      dkLen = 24;\r\n      ivLen = 16;\r\n      encOid = oids['aes192-CBC'];\r\n      cipherFn = forge.aes.createEncryptionCipher;\r\n      break;\r\n    case 'aes256':\r\n      dkLen = 32;\r\n      ivLen = 16;\r\n      encOid = oids['aes256-CBC'];\r\n      cipherFn = forge.aes.createEncryptionCipher;\r\n      break;\r\n    case 'des':\r\n      dkLen = 8;\r\n      ivLen = 8;\r\n      encOid = oids['desCBC'];\r\n      cipherFn = forge.des.createEncryptionCipher;\r\n      break;\r\n    default:\r\n      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\r\n      error.algorithm = options.algorithm;\r\n      throw error;\r\n    }\r\n\r\n    // get PRF message digest\r\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\r\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm);\r\n\r\n    // encrypt private key using pbe SHA-1 and AES/DES\r\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\r\n    var iv = forge.random.getBytesSync(ivLen);\r\n    var cipher = cipherFn(dk);\r\n    cipher.start(iv);\r\n    cipher.update(asn1.toDer(obj));\r\n    cipher.finish();\r\n    encryptedData = cipher.output.getBytes();\r\n\r\n    // get PBKDF2-params\r\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\r\n\r\n    encryptionAlgorithm = asn1.create(\r\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\r\n        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n        // keyDerivationFunc\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\r\n            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),\r\n          // PBKDF2-params\r\n          params\r\n        ]),\r\n        // encryptionScheme\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\r\n            asn1.oidToDer(encOid).getBytes()),\r\n          // iv\r\n          asn1.create(\r\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)\r\n        ])\r\n      ])\r\n    ]);\r\n  } else if(options.algorithm === '3des') {\r\n    // Do PKCS12 PBE\r\n    dkLen = 24;\r\n\r\n    var saltBytes = new forge.util.ByteBuffer(salt);\r\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\r\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\r\n    var cipher = forge.des.createEncryptionCipher(dk);\r\n    cipher.start(iv);\r\n    cipher.update(asn1.toDer(obj));\r\n    cipher.finish();\r\n    encryptedData = cipher.output.getBytes();\r\n\r\n    encryptionAlgorithm = asn1.create(\r\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\r\n        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),\r\n      // pkcs-12PbeParams\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n        // salt\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\r\n        // iteration count\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\r\n          countBytes.getBytes())\r\n      ])\r\n    ]);\r\n  } else {\r\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\r\n    error.algorithm = options.algorithm;\r\n    throw error;\r\n  }\r\n\r\n  // EncryptedPrivateKeyInfo\r\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n    // encryptionAlgorithm\r\n    encryptionAlgorithm,\r\n    // encryptedData\r\n    asn1.create(\r\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)\r\n  ]);\r\n  return rval;\r\n};\r\n\r\n/**\r\n * Decrypts a ASN.1 PrivateKeyInfo object.\r\n *\r\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\r\n * @param password the password to decrypt with.\r\n *\r\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\r\n */\r\npki.decryptPrivateKeyInfo = function(obj, password) {\r\n  var rval = null;\r\n\r\n  // get PBE params\r\n  var capture = {};\r\n  var errors = [];\r\n  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\r\n    var error = new Error('Cannot read encrypted private key. ' +\r\n      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\r\n    error.errors = errors;\r\n    throw error;\r\n  }\r\n\r\n  // get cipher\r\n  var oid = asn1.derToOid(capture.encryptionOid);\r\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\r\n\r\n  // get encrypted data\r\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\r\n\r\n  cipher.update(encrypted);\r\n  if(cipher.finish()) {\r\n    rval = asn1.fromDer(cipher.output);\r\n  }\r\n\r\n  return rval;\r\n};\r\n\r\n/**\r\n * Converts a EncryptedPrivateKeyInfo to PEM format.\r\n *\r\n * @param epki the EncryptedPrivateKeyInfo.\r\n * @param maxline the maximum characters per line, defaults to 64.\r\n *\r\n * @return the PEM-formatted encrypted private key.\r\n */\r\npki.encryptedPrivateKeyToPem = function(epki, maxline) {\r\n  // convert to DER, then PEM-encode\r\n  var msg = {\r\n    type: 'ENCRYPTED PRIVATE KEY',\r\n    body: asn1.toDer(epki).getBytes()\r\n  };\r\n  return forge.pem.encode(msg, {maxline: maxline});\r\n};\r\n\r\n/**\r\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\r\n * is not performed.\r\n *\r\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\r\n *\r\n * @return the ASN.1 EncryptedPrivateKeyInfo.\r\n */\r\npki.encryptedPrivateKeyFromPem = function(pem) {\r\n  var msg = forge.pem.decode(pem)[0];\r\n\r\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {\r\n    var error = new Error('Could not convert encrypted private key from PEM; ' +\r\n      'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\r\n    error.headerType = msg.type;\r\n    throw error;\r\n  }\r\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\r\n    throw new Error('Could not convert encrypted private key from PEM; ' +\r\n      'PEM is encrypted.');\r\n  }\r\n\r\n  // convert DER to ASN.1 object\r\n  return asn1.fromDer(msg.body);\r\n};\r\n\r\n/**\r\n * Encrypts an RSA private key. By default, the key will be wrapped in\r\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\r\n * This is the standard, preferred way to encrypt a private key.\r\n *\r\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\r\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\r\n * private key encryption), set the 'legacy' option to true. Note: Using this\r\n * option will cause the iteration count to be forced to 1.\r\n *\r\n * Note: The 'des' algorithm is supported, but it is not considered to be\r\n * secure because it only uses a single 56-bit key. If possible, it is highly\r\n * recommended that a different algorithm be used.\r\n *\r\n * @param rsaKey the RSA key to encrypt.\r\n * @param password the password to use.\r\n * @param options:\r\n *          algorithm: the encryption algorithm to use\r\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\r\n *          count: the iteration count to use.\r\n *          saltSize: the salt size to use.\r\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\r\n *            headers (DEK-Info) private key.\r\n *\r\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\r\n */\r\npki.encryptRsaPrivateKey = function(rsaKey, password, options) {\r\n  // standard PKCS#8\r\n  options = options || {};\r\n  if(!options.legacy) {\r\n    // encrypt PrivateKeyInfo\r\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\r\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\r\n    return pki.encryptedPrivateKeyToPem(rval);\r\n  }\r\n\r\n  // legacy non-PKCS#8\r\n  var algorithm;\r\n  var iv;\r\n  var dkLen;\r\n  var cipherFn;\r\n  switch(options.algorithm) {\r\n  case 'aes128':\r\n    algorithm = 'AES-128-CBC';\r\n    dkLen = 16;\r\n    iv = forge.random.getBytesSync(16);\r\n    cipherFn = forge.aes.createEncryptionCipher;\r\n    break;\r\n  case 'aes192':\r\n    algorithm = 'AES-192-CBC';\r\n    dkLen = 24;\r\n    iv = forge.random.getBytesSync(16);\r\n    cipherFn = forge.aes.createEncryptionCipher;\r\n    break;\r\n  case 'aes256':\r\n    algorithm = 'AES-256-CBC';\r\n    dkLen = 32;\r\n    iv = forge.random.getBytesSync(16);\r\n    cipherFn = forge.aes.createEncryptionCipher;\r\n    break;\r\n  case '3des':\r\n    algorithm = 'DES-EDE3-CBC';\r\n    dkLen = 24;\r\n    iv = forge.random.getBytesSync(8);\r\n    cipherFn = forge.des.createEncryptionCipher;\r\n    break;\r\n  case 'des':\r\n    algorithm = 'DES-CBC';\r\n    dkLen = 8;\r\n    iv = forge.random.getBytesSync(8);\r\n    cipherFn = forge.des.createEncryptionCipher;\r\n    break;\r\n  default:\r\n    var error = new Error('Could not encrypt RSA private key; unsupported ' +\r\n      'encryption algorithm \"' + options.algorithm + '\".');\r\n    error.algorithm = options.algorithm;\r\n    throw error;\r\n  }\r\n\r\n  // encrypt private key using OpenSSL legacy key derivation\r\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\r\n  var cipher = cipherFn(dk);\r\n  cipher.start(iv);\r\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\r\n  cipher.finish();\r\n\r\n  var msg = {\r\n    type: 'RSA PRIVATE KEY',\r\n    procType: {\r\n      version: '4',\r\n      type: 'ENCRYPTED'\r\n    },\r\n    dekInfo: {\r\n      algorithm: algorithm,\r\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\r\n    },\r\n    body: cipher.output.getBytes()\r\n  };\r\n  return forge.pem.encode(msg);\r\n};\r\n\r\n/**\r\n * Decrypts an RSA private key.\r\n *\r\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\r\n * @param password the password to use.\r\n *\r\n * @return the RSA key on success, null on failure.\r\n */\r\npki.decryptRsaPrivateKey = function(pem, password) {\r\n  var rval = null;\r\n\r\n  var msg = forge.pem.decode(pem)[0];\r\n\r\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&\r\n    msg.type !== 'PRIVATE KEY' &&\r\n    msg.type !== 'RSA PRIVATE KEY') {\r\n    var error = new Error('Could not convert private key from PEM; PEM header type ' +\r\n      'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\r\n    error.headerType = error;\r\n    throw error;\r\n  }\r\n\r\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\r\n    var dkLen;\r\n    var cipherFn;\r\n    switch(msg.dekInfo.algorithm) {\r\n    case 'DES-CBC':\r\n      dkLen = 8;\r\n      cipherFn = forge.des.createDecryptionCipher;\r\n      break;\r\n    case 'DES-EDE3-CBC':\r\n      dkLen = 24;\r\n      cipherFn = forge.des.createDecryptionCipher;\r\n      break;\r\n    case 'AES-128-CBC':\r\n      dkLen = 16;\r\n      cipherFn = forge.aes.createDecryptionCipher;\r\n      break;\r\n    case 'AES-192-CBC':\r\n      dkLen = 24;\r\n      cipherFn = forge.aes.createDecryptionCipher;\r\n      break;\r\n    case 'AES-256-CBC':\r\n      dkLen = 32;\r\n      cipherFn = forge.aes.createDecryptionCipher;\r\n      break;\r\n    case 'RC2-40-CBC':\r\n      dkLen = 5;\r\n      cipherFn = function(key) {\r\n        return forge.rc2.createDecryptionCipher(key, 40);\r\n      };\r\n      break;\r\n    case 'RC2-64-CBC':\r\n      dkLen = 8;\r\n      cipherFn = function(key) {\r\n        return forge.rc2.createDecryptionCipher(key, 64);\r\n      };\r\n      break;\r\n    case 'RC2-128-CBC':\r\n      dkLen = 16;\r\n      cipherFn = function(key) {\r\n        return forge.rc2.createDecryptionCipher(key, 128);\r\n      };\r\n      break;\r\n    default:\r\n      var error = new Error('Could not decrypt private key; unsupported ' +\r\n        'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\r\n      error.algorithm = msg.dekInfo.algorithm;\r\n      throw error;\r\n    }\r\n\r\n    // use OpenSSL legacy key derivation\r\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\r\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\r\n    var cipher = cipherFn(dk);\r\n    cipher.start(iv);\r\n    cipher.update(forge.util.createBuffer(msg.body));\r\n    if(cipher.finish()) {\r\n      rval = cipher.output.getBytes();\r\n    } else {\r\n      return rval;\r\n    }\r\n  } else {\r\n    rval = msg.body;\r\n  }\r\n\r\n  if(msg.type === 'ENCRYPTED PRIVATE KEY') {\r\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\r\n  } else {\r\n    // decryption already performed above\r\n    rval = asn1.fromDer(rval);\r\n  }\r\n\r\n  if(rval !== null) {\r\n    rval = pki.privateKeyFromAsn1(rval);\r\n  }\r\n\r\n  return rval;\r\n};\r\n\r\n/**\r\n * Derives a PKCS#12 key.\r\n *\r\n * @param password the password to derive the key material from, null or\r\n *          undefined for none.\r\n * @param salt the salt, as a ByteBuffer, to use.\r\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\r\n * @param iter the iteration count.\r\n * @param n the number of bytes to derive from the password.\r\n * @param md the message digest to use, defaults to SHA-1.\r\n *\r\n * @return a ByteBuffer with the bytes derived from the password.\r\n */\r\npki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\r\n  var j, l;\r\n\r\n  if(typeof md === 'undefined' || md === null) {\r\n    if(!('sha1' in forge.md)) {\r\n      throw new Error('\"sha1\" hash algorithm unavailable.');\r\n    }\r\n    md = forge.md.sha1.create();\r\n  }\r\n\r\n  var u = md.digestLength;\r\n  var v = md.blockLength;\r\n  var result = new forge.util.ByteBuffer();\r\n\r\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\r\n  var passBuf = new forge.util.ByteBuffer();\r\n  if(password !== null && password !== undefined) {\r\n    for(l = 0; l < password.length; l++) {\r\n      passBuf.putInt16(password.charCodeAt(l));\r\n    }\r\n    passBuf.putInt16(0);\r\n  }\r\n\r\n  /* Length of salt and password in BYTES. */\r\n  var p = passBuf.length();\r\n  var s = salt.length();\r\n\r\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\r\n        v copies of ID. */\r\n  var D = new forge.util.ByteBuffer();\r\n  D.fillWithByte(id, v);\r\n\r\n  /* 2. Concatenate copies of the salt together to create a string S of length\r\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\r\n        to create S).\r\n        Note that if the salt is the empty string, then so is S. */\r\n  var Slen = v * Math.ceil(s / v);\r\n  var S = new forge.util.ByteBuffer();\r\n  for(l = 0; l < Slen; l++) {\r\n    S.putByte(salt.at(l % s));\r\n  }\r\n\r\n  /* 3. Concatenate copies of the password together to create a string P of\r\n        length v * ceil(p / v) bytes (the final copy of the password may be\r\n        truncated to create P).\r\n        Note that if the password is the empty string, then so is P. */\r\n  var Plen = v * Math.ceil(p / v);\r\n  var P = new forge.util.ByteBuffer();\r\n  for(l = 0; l < Plen; l++) {\r\n    P.putByte(passBuf.at(l % p));\r\n  }\r\n\r\n  /* 4. Set I=S||P to be the concatenation of S and P. */\r\n  var I = S;\r\n  I.putBuffer(P);\r\n\r\n  /* 5. Set c=ceil(n / u). */\r\n  var c = Math.ceil(n / u);\r\n\r\n  /* 6. For i=1, 2, ..., c, do the following: */\r\n  for(var i = 1; i <= c; i++) {\r\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\r\n    var buf = new forge.util.ByteBuffer();\r\n    buf.putBytes(D.bytes());\r\n    buf.putBytes(I.bytes());\r\n    for(var round = 0; round < iter; round++) {\r\n      md.start();\r\n      md.update(buf.getBytes());\r\n      buf = md.digest();\r\n    }\r\n\r\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\r\n          final copy of Ai may be truncated to create B). */\r\n    var B = new forge.util.ByteBuffer();\r\n    for(l = 0; l < v; l++) {\r\n      B.putByte(buf.at(l % u));\r\n    }\r\n\r\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\r\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\r\n          Ij=(Ij+B+1) mod 2v for each j.  */\r\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\r\n    var Inew = new forge.util.ByteBuffer();\r\n    for(j = 0; j < k; j++) {\r\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\r\n      var x = 0x1ff;\r\n      for(l = B.length() - 1; l >= 0; l--) {\r\n        x = x >> 8;\r\n        x += B.at(l) + chunk.at(l);\r\n        chunk.setAt(l, x & 0xff);\r\n      }\r\n      Inew.putBuffer(chunk);\r\n    }\r\n    I = Inew;\r\n\r\n    /* Add Ai to A. */\r\n    result.putBuffer(buf);\r\n  }\r\n\r\n  result.truncate(result.length() - n);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get new Forge cipher object instance.\r\n *\r\n * @param oid the OID (in string notation).\r\n * @param params the ASN.1 params object.\r\n * @param password the password to decrypt with.\r\n *\r\n * @return new cipher object instance.\r\n */\r\npki.pbe.getCipher = function(oid, params, password) {\r\n  switch(oid) {\r\n  case pki.oids['pkcs5PBES2']:\r\n    return pki.pbe.getCipherForPBES2(oid, params, password);\r\n\r\n  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\r\n  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\r\n    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\r\n\r\n  default:\r\n    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\r\n    error.oid = oid;\r\n    error.supportedOids = [\r\n      'pkcs5PBES2',\r\n      'pbeWithSHAAnd3-KeyTripleDES-CBC',\r\n      'pbewithSHAAnd40BitRC2-CBC'\r\n    ];\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get new Forge cipher object instance according to PBES2 params block.\r\n *\r\n * The returned cipher instance is already started using the IV\r\n * from PBES2 parameter block.\r\n *\r\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\r\n * @param params the ASN.1 PBES2-params object.\r\n * @param password the password to decrypt with.\r\n *\r\n * @return new cipher object instance.\r\n */\r\npki.pbe.getCipherForPBES2 = function(oid, params, password) {\r\n  // get PBE params\r\n  var capture = {};\r\n  var errors = [];\r\n  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\r\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\r\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\r\n    error.errors = errors;\r\n    throw error;\r\n  }\r\n\r\n  // check oids\r\n  oid = asn1.derToOid(capture.kdfOid);\r\n  if(oid !== pki.oids['pkcs5PBKDF2']) {\r\n    var error = new Error('Cannot read encrypted private key. ' +\r\n      'Unsupported key derivation function OID.');\r\n    error.oid = oid;\r\n    error.supportedOids = ['pkcs5PBKDF2'];\r\n    throw error;\r\n  }\r\n  oid = asn1.derToOid(capture.encOid);\r\n  if(oid !== pki.oids['aes128-CBC'] &&\r\n    oid !== pki.oids['aes192-CBC'] &&\r\n    oid !== pki.oids['aes256-CBC'] &&\r\n    oid !== pki.oids['des-EDE3-CBC'] &&\r\n    oid !== pki.oids['desCBC']) {\r\n    var error = new Error('Cannot read encrypted private key. ' +\r\n      'Unsupported encryption scheme OID.');\r\n    error.oid = oid;\r\n    error.supportedOids = [\r\n      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\r\n    throw error;\r\n  }\r\n\r\n  // set PBE params\r\n  var salt = capture.kdfSalt;\r\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\r\n  count = count.getInt(count.length() << 3);\r\n  var dkLen;\r\n  var cipherFn;\r\n  switch(pki.oids[oid]) {\r\n  case 'aes128-CBC':\r\n    dkLen = 16;\r\n    cipherFn = forge.aes.createDecryptionCipher;\r\n    break;\r\n  case 'aes192-CBC':\r\n    dkLen = 24;\r\n    cipherFn = forge.aes.createDecryptionCipher;\r\n    break;\r\n  case 'aes256-CBC':\r\n    dkLen = 32;\r\n    cipherFn = forge.aes.createDecryptionCipher;\r\n    break;\r\n  case 'des-EDE3-CBC':\r\n    dkLen = 24;\r\n    cipherFn = forge.des.createDecryptionCipher;\r\n    break;\r\n  case 'desCBC':\r\n    dkLen = 8;\r\n    cipherFn = forge.des.createDecryptionCipher;\r\n    break;\r\n  }\r\n\r\n  // get PRF message digest\r\n  var md = prfOidToMessageDigest(capture.prfOid);\r\n\r\n  // decrypt private key using pbe with chosen PRF and AES/DES\r\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\r\n  var iv = capture.encIv;\r\n  var cipher = cipherFn(dk);\r\n  cipher.start(iv);\r\n\r\n  return cipher;\r\n};\r\n\r\n/**\r\n * Get new Forge cipher object instance for PKCS#12 PBE.\r\n *\r\n * The returned cipher instance is already started using the key & IV\r\n * derived from the provided password and PKCS#12 PBE salt.\r\n *\r\n * @param oid The PKCS#12 PBE OID (in string notation).\r\n * @param params The ASN.1 PKCS#12 PBE-params object.\r\n * @param password The password to decrypt with.\r\n *\r\n * @return the new cipher object instance.\r\n */\r\npki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\r\n  // get PBE params\r\n  var capture = {};\r\n  var errors = [];\r\n  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\r\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\r\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\r\n    error.errors = errors;\r\n    throw error;\r\n  }\r\n\r\n  var salt = forge.util.createBuffer(capture.salt);\r\n  var count = forge.util.createBuffer(capture.iterations);\r\n  count = count.getInt(count.length() << 3);\r\n\r\n  var dkLen, dIvLen, cipherFn;\r\n  switch(oid) {\r\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\r\n      dkLen = 24;\r\n      dIvLen = 8;\r\n      cipherFn = forge.des.startDecrypting;\r\n      break;\r\n\r\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\r\n      dkLen = 5;\r\n      dIvLen = 8;\r\n      cipherFn = function(key, iv) {\r\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\r\n        cipher.start(iv, null);\r\n        return cipher;\r\n      };\r\n      break;\r\n\r\n    default:\r\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\r\n      error.oid = oid;\r\n      throw error;\r\n  }\r\n\r\n  // get PRF message digest\r\n  var md = prfOidToMessageDigest(capture.prfOid);\r\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\r\n  md.start();\r\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\r\n\r\n  return cipherFn(key, iv);\r\n};\r\n\r\n/**\r\n * OpenSSL's legacy key derivation function.\r\n *\r\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\r\n *\r\n * @param password the password to derive the key from.\r\n * @param salt the salt to use, null for none.\r\n * @param dkLen the number of bytes needed for the derived key.\r\n * @param [options] the options to use:\r\n *          [md] an optional message digest object to use.\r\n */\r\npki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\r\n  if(typeof md === 'undefined' || md === null) {\r\n    if(!('md5' in forge.md)) {\r\n      throw new Error('\"md5\" hash algorithm unavailable.');\r\n    }\r\n    md = forge.md.md5.create();\r\n  }\r\n  if(salt === null) {\r\n    salt = '';\r\n  }\r\n  var digests = [hash(md, password + salt)];\r\n  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {\r\n    digests.push(hash(md, digests[i - 1] + password + salt));\r\n  }\r\n  return digests.join('').substr(0, dkLen);\r\n};\r\n\r\nfunction hash(md, bytes) {\r\n  return md.start().update(bytes).digest().getBytes();\r\n}\r\n\r\nfunction prfOidToMessageDigest(prfOid) {\r\n  // get PRF algorithm, default to SHA-1\r\n  var prfAlgorithm;\r\n  if(!prfOid) {\r\n    prfAlgorithm = 'hmacWithSHA1';\r\n  } else {\r\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\r\n    if(!prfAlgorithm) {\r\n      var error = new Error('Unsupported PRF OID.');\r\n      error.oid = prfOid;\r\n      error.supported = [\r\n        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\r\n        'hmacWithSHA512'];\r\n      throw error;\r\n    }\r\n  }\r\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\r\n}\r\n\r\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\r\n  var factory = forge.md;\r\n  switch(prfAlgorithm) {\r\n  case 'hmacWithSHA224':\r\n    factory = forge.md.sha512;\r\n  case 'hmacWithSHA1':\r\n  case 'hmacWithSHA256':\r\n  case 'hmacWithSHA384':\r\n  case 'hmacWithSHA512':\r\n    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\r\n    break;\r\n  default:\r\n    var error = new Error('Unsupported PRF algorithm.');\r\n    error.algorithm = prfAlgorithm;\r\n    error.supported = [\r\n      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\r\n      'hmacWithSHA512'];\r\n    throw error;\r\n  }\r\n  if(!factory || !(prfAlgorithm in factory)) {\r\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\r\n  }\r\n  return factory[prfAlgorithm].create();\r\n}\r\n\r\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\r\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n    // salt\r\n    asn1.create(\r\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\r\n    // iteration count\r\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\r\n      countBytes.getBytes())\r\n  ]);\r\n  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\r\n  if(prfAlgorithm !== 'hmacWithSHA1') {\r\n    params.value.push(\r\n      // key length\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\r\n        forge.util.hexToBytes(dkLen.toString(16))),\r\n      // AlgorithmIdentifier\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n        // algorithm\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\r\n          asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\r\n        // parameters (null)\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\r\n      ]));\r\n  }\r\n  return params;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}