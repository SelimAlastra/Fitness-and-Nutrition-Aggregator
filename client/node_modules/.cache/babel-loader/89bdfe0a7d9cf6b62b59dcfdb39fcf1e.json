{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bianca\\\\MajorGroupProject\\\\client\\\\src\\\\components\\\\Form\\\\FormBucket.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useStyles from './styles';\nimport { createBucket } from '../../actions/buckets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormBucket = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  const [postData, setPostData] = useState({\n    title: '',\n    postId: ''\n  });\n  const bucket = useSelector(state => currentId ? state.buckets.find(p => p._id === currentId) : null);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (bucket) setPostData(bucket);\n  }, [bucket]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(createBucket(postData));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [currentId ? 'Editing' : 'Creating', \" a Bucket\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Post Ids (coma separated)\",\n        fullWidth: true,\n        value: postData.postId,\n        onChange: e => setPostData({ ...postData,\n          postId: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormBucket, \"YBtlJVaW7cFXg3cFwyA7WinjP4U=\", false, function () {\n  return [useSelector, useStyles, useDispatch];\n});\n\n_c = FormBucket;\nexport default FormBucket;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormBucket\");","map":{"version":3,"sources":["C:/Users/Bianca/MajorGroupProject/client/src/components/Form/FormBucket.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","useDispatch","useSelector","useStyles","createBucket","FormBucket","currentId","setCurrentId","postData","setPostData","title","postId","bucket","state","buckets","find","p","_id","classes","dispatch","handleSubmit","e","preventDefault","paper","root","form","target","value","split","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState , useEffect} from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport { useDispatch , useSelector} from 'react-redux';\r\n\r\nimport useStyles from './styles';\r\nimport { createBucket} from '../../actions/buckets';\r\n\r\n\r\nconst FormBucket = ({currentId, setCurrentId}) => {\r\n    const [postData, setPostData] = useState({ title: '',postId: ''});\r\n    const bucket = useSelector((state) => currentId ? state.buckets.find((p)=> p._id === currentId ) : null);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n       if(bucket) setPostData(bucket);\r\n    }, [bucket]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(createBucket(postData));\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                <Typography variant=\"h6\">{currentId ? 'Editing' : 'Creating' } a Bucket</Typography>\r\n                <TextField name=\"title\" variant=\"outlined\" label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\r\n                <TextField name=\"tags\" variant=\"outlined\" label=\"Post Ids (coma separated)\" fullWidth value={postData.postId} onChange={(e) => setPostData({ ...postData, postId: e.target.value.split(',') })} />\r\n                <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n            </form>\r\n    </Paper>\r\n    );\r\n}\r\n\r\nexport default FormBucket;"]},"metadata":{},"sourceType":"module"}